var search_data = {"index":{"searchIndex":["bundler","bundlererror","cli","definition","depproxy","dependency","deployment","deprecatederror","dsl","dslerror","environment","gemhelper","gemhelpers","geminstaller","gemnotfound","gemfileerror","gemfilenotfound","gemspecerror","giterror","graph","graphnode","index","installerror","installer","invalidoption","invalidspecset","lazyspecification","lockfileparser","matchplatform","patherror","productionerror","remotespecification","resolver","specgroup","rubygemsintegration","almostmodern","ancient","deprecate","gem","gem::sourceindex","legacy","modern","transitional","runtime","settings","sharedhelpers","source","git","path","installer","rubygems","specset","ui","rgproxy","shell","versionconflict","gem","dependency","platform","requirement","specification","object","thor","actions","classmethods","base","classmethods","dynamictask","error","group","hiddentask","invocation","classmethods","invocationerror","malformattedargumenterror","rakecompat","requiredargumentmissingerror","shell","basic","color","html","task","undefinedtaskerror","unknownargumenterror","util","<<()","==()","==()","==()","==()","==()","[]()","[]()","[]()","[]=()","[]=()","__materialize__()","__swap__()","activate_platform()","add_bundler_dependencies()","add_file()","add_link()","add_remote()","add_runtime_options!()","all()","all_specs()","all_specs()","all_tasks()","allow_sudo?()","app_cache()","app_config_path()","append_file()","append_to_file()","apply()","argument()","arguments()","ask()","ask()","backport_segment_generation()","banner()","banner()","basename()","be_quiet!()","bin_path()","bin_path()","build()","build()","build_gem()","built_gem_path()","bundle_path()","cache()","cache()","cache()","cache()","cache()","cached!()","cached!()","camel_case()","check()","check_executable_overwrite()","check_unknown_options!()","check_unknown_options!()","chmod()","class_option()","class_options()","clean?()","clean_req()","clear_paths()","config()","configuration()","configure()","confirm()","confirm()","console()","copy_file()","create_file()","create_link()","current_dependencies()","current_dependencies()","current_env?()","current_platform?()","debug()","debug()","debug()","debug!()","default_gemfile()","default_gemfile()","default_lockfile()","default_lockfile()","default_task()","define_task()","definition()","delete()","dependencies()","dependencies_for()","deprecate()","desc()","desc()","destination_root()","destination_root=()","directory()","download_gem()","each()","empty?()","empty_directory()","encode_with()","ensure_equivalent_gemfile_and_lockfile()","env()","environment()","eql?()","eql?()","eql?()","eql?()","error()","error()","error()","error_message()","evaluate()","exec()","exit_on_failure?()","fetch()","fetch_platform()","fetch_specs()","file_collision()","find_by_namespace()","find_class_and_task_by_namespace()","find_in_source_paths()","find_name()","find_name()","find_subcommand()","find_subcommand_possibilities()","for()","for?()","formatted_usage()","from_lock()","from_lock()","from_lock()","from_superclass()","full_gem_path()","full_name()","full_name()","gem()","gem()","gem_bindir()","gem_dir()","gem_dir()","gem_message()","gem_path()","gem_platforms()","gems_size()","gemspec()","generate_bin()","generic()","get()","git()","git_push()","git_version()","globs_for()","group()","group()","groups()","groups()","groups()","gsub_file()","guard_already_tagged()","guard_clean()","handle_argument_error?()","handle_no_method_error?()","hash()","hash()","hash()","hash()","help()","help()","help()","help()","hidden?()","hidden?()","home()","in_bundle?()","in_root()","included()","index()","index()","inflate()","info()","info()","inherited()","init()","initialize_copy()","initialize_copy()","inject_into_class()","inject_into_file()","insert_into_file()","inside()","inspect()","install()","install()","install()","install()","install()","install()","install_gem()","install_path()","install_tasks()","invoke()","invoke()","invoke_from_option()","invoke_with_padding()","link_file()","load()","load_gemspec()","load_paths()","load_spec_files()","load_spec_files()","load_thorfile()","loaded_from()","loaded_specs()","local_specs()","locations()","lock()","lock()","lock()","long_desc()","map()","mark_loaded()","marshal_spec_dir()","match_platform()","matches_spec?()","materialize()","merge()","merge_remotes()","method_added()","method_option()","method_options()","missing_specs()","mkdir_p()","mute()","mute?()","name()","name()","name()","name()","name()","namespace()","namespace_from_thor_class()","namespaces_in_content()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_platform?()","new_specs()","no?()","no_sources?()","no_tasks()","nodes()","nondevelopment_dependencies()","none?()","not_debugging?()","open()","options()","package()","padding=()","path()","path()","path()","path()","perform_git_push()","platform()","platforms()","platforms()","prepend_file()","prepend_to_file()","preserve_paths()","preserve_paths()","pretty_values_for()","print_options()","print_table()","print_wrapped()","printable_tasks()","printable_tasks()","prune_cache()","public_task()","rake_classes()","read_binary()","read_file()","register()","relative_to_original_destination_root()","release_gem()","remote!()","remote!()","remove_argument()","remove_class_option()","remove_dir()","remove_file()","remove_invocation()","remove_task()","removed_specs()","replace_bin_path()","replace_entrypoints()","replace_gem()","replace_refresh()","requested_specs()","requested_specs()","require()","require()","required_by()","required_by()","required_options()","requirement()","requires_sudo?()","resolve()","resolve()","resolve()","resolve_remotely!()","resolve_requirement()","resolve_with_cache!()","respond_to?()","reverse_rubygems_kernel_mixin()","rg_full_gem_path()","rg_loaded_from()","root()","ruby_command()","ruby_engine()","ruby_scope()","rubygem_push()","rubygems_index()","run()","run()","run()","run()","run_ruby_script()","satisfies?()","say()","say()","say_status()","search()","search()","search_for_all_platforms()","set_color()","set_color()","set_global()","settings()","setup()","setup()","sh()","sh_with_code()","shell()","shell()","shell=()","shell=()","should_include?()","show()","skip_during()","snake_case()","sort!()","source()","source()","source_paths()","source_paths()","source_paths_for_search()","source_root()","source_root()","sources()","sources()","sources=()","spec_from_gem()","specs()","specs()","specs()","specs()","specs()","specs_for()","specs_path()","start()","start()","status_code()","stderr()","stdin()","stdout()","stub_rubygems()","stub_rubygems()","stub_rubygems()","stub_source_index137()","stub_source_index170()","subclass_files()","subclasses()","subcommand()","subcommand_help()","subcommands()","successify()","sudo()","sudo()","tag_version()","task_help()","tasks()","template()","thor()","thor_classes_in()","thor_root()","thor_root_glob()","tmp()","to_a()","to_definition()","to_gemfile()","to_hash()","to_lock()","to_lock()","to_lock()","to_lock()","to_lock()","to_lock()","to_lock()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_specs()","to_yaml_properties()","type()","ui()","ui=()","unlock()","unlock!()","update()","update()","use()","user_bundle_path()","user_home()","user_home()","valid_for?()","version()","version()","version()","version_conflict()","version_tag()","viz()","viz()","warn()","warn()","with_build_args()","with_clean_env()","with_padding()","without()","without=()","yes?()","bundle","bundle-config","bundle-config","bundle-exec","bundle-exec","bundle-install","bundle-install","bundle-package","bundle-package","bundle-update","bundle-update","bundle","gemfile.5","executable","gemfile"],"longSearchIndex":["bundler","bundler::bundlererror","bundler::cli","bundler::definition","bundler::depproxy","bundler::dependency","bundler::deployment","bundler::deprecatederror","bundler::dsl","bundler::dslerror","bundler::environment","bundler::gemhelper","bundler::gemhelpers","bundler::geminstaller","bundler::gemnotfound","bundler::gemfileerror","bundler::gemfilenotfound","bundler::gemspecerror","bundler::giterror","bundler::graph","bundler::graphnode","bundler::index","bundler::installerror","bundler::installer","bundler::invalidoption","bundler::invalidspecset","bundler::lazyspecification","bundler::lockfileparser","bundler::matchplatform","bundler::patherror","bundler::productionerror","bundler::remotespecification","bundler::resolver","bundler::resolver::specgroup","bundler::rubygemsintegration","bundler::rubygemsintegration::almostmodern","bundler::rubygemsintegration::ancient","bundler::rubygemsintegration::deprecate","bundler::rubygemsintegration::gem","bundler::rubygemsintegration::gem::sourceindex","bundler::rubygemsintegration::legacy","bundler::rubygemsintegration::modern","bundler::rubygemsintegration::transitional","bundler::runtime","bundler::settings","bundler::sharedhelpers","bundler::source","bundler::source::git","bundler::source::path","bundler::source::path::installer","bundler::source::rubygems","bundler::specset","bundler::ui","bundler::ui::rgproxy","bundler::ui::shell","bundler::versionconflict","gem","gem::dependency","gem::platform","gem::requirement","gem::specification","object","thor","thor::actions","thor::actions::classmethods","thor::base","thor::base::classmethods","thor::dynamictask","thor::error","thor::group","thor::hiddentask","thor::invocation","thor::invocation::classmethods","thor::invocationerror","thor::malformattedargumenterror","thor::rakecompat","thor::requiredargumentmissingerror","thor::shell","thor::shell::basic","thor::shell::color","thor::shell::html","thor::task","thor::undefinedtaskerror","thor::unknownargumenterror","thor::util","bundler::index#<<()","bundler::depproxy#==()","bundler::index#==()","bundler::source::git#==()","bundler::source::path#==()","bundler::source::rubygems#==()","bundler::index#[]()","bundler::settings#[]()","bundler::specset#[]()","bundler::settings#[]=()","bundler::specset#[]=()","bundler::lazyspecification#__materialize__()","bundler::remotespecification#__swap__()","bundler::resolver::specgroup#activate_platform()","gem::specification#add_bundler_dependencies()","thor::actions#add_file()","thor::actions#add_link()","bundler::source::rubygems#add_remote()","thor::actions::classmethods#add_runtime_options!()","bundler::settings#all()","bundler::rubygemsintegration::legacy#all_specs()","bundler::rubygemsintegration::modern#all_specs()","thor::base::classmethods#all_tasks()","bundler::settings#allow_sudo?()","bundler::app_cache()","bundler::app_config_path()","thor::actions#append_file()","thor::actions#append_to_file()","thor::actions#apply()","thor::base::classmethods#argument()","thor::base::classmethods#arguments()","thor::shell::basic#ask()","thor::shell::html#ask()","bundler::rubygemsintegration#backport_segment_generation()","thor::banner()","thor::group::banner()","thor::base::classmethods#basename()","bundler::ui::shell#be_quiet!()","bundler::bin_path()","bundler::rubygemsintegration#bin_path()","bundler::definition::build()","bundler::index::build()","bundler::gemhelper#build_gem()","bundler::gemhelper#built_gem_path()","bundler::bundle_path()","bundler::cache()","bundler::cli#cache()","bundler::runtime#cache()","bundler::source::path#cache()","bundler::source::rubygems#cache()","bundler::source::path#cached!()","bundler::source::rubygems#cached!()","thor::util::camel_case()","bundler::cli#check()","bundler::geminstaller#check_executable_overwrite()","thor::check_unknown_options!()","thor::base::classmethods#check_unknown_options!()","thor::actions#chmod()","thor::base::classmethods#class_option()","thor::base::classmethods#class_options()","bundler::gemhelper#clean?()","bundler::resolver#clean_req()","bundler::rubygemsintegration#clear_paths()","bundler::cli#config()","bundler::rubygemsintegration#configuration()","bundler::configure()","bundler::ui#confirm()","bundler::ui::shell#confirm()","bundler::cli#console()","thor::actions#copy_file()","thor::actions#create_file()","thor::actions#create_link()","bundler::definition#current_dependencies()","bundler::environment#current_dependencies()","bundler::dependency#current_env?()","bundler::dependency#current_platform?()","bundler::resolver#debug()","bundler::ui#debug()","bundler::ui::shell#debug()","bundler::ui::shell#debug!()","bundler::default_gemfile()","bundler::sharedhelpers#default_gemfile()","bundler::default_lockfile()","bundler::sharedhelpers#default_lockfile()","thor::default_task()","bundler::deployment::define_task()","bundler::definition()","bundler::settings#delete()","bundler::environment#dependencies()","bundler::runtime#dependencies_for()","bundler::dsl::deprecate()","thor::desc()","thor::group::desc()","thor::actions#destination_root()","thor::actions#destination_root=()","thor::actions#directory()","bundler::rubygemsintegration#download_gem()","bundler::index#each()","bundler::index#empty?()","thor::actions#empty_directory()","gem::dependency#encode_with()","bundler::definition#ensure_equivalent_gemfile_and_lockfile()","bundler::dsl#env()","bundler::environment()","bundler::depproxy#eql?()","bundler::source::git#eql?()","bundler::source::path#eql?()","bundler::source::rubygems#eql?()","bundler::ui#error()","bundler::ui::shell#error()","thor::shell::basic#error()","bundler::resolver#error_message()","bundler::dsl::evaluate()","bundler::cli#exec()","thor::base::classmethods#exit_on_failure?()","bundler::source::rubygems#fetch()","bundler::remotespecification#fetch_platform()","bundler::rubygemsintegration#fetch_specs()","thor::shell::basic#file_collision()","thor::util::find_by_namespace()","thor::util::find_class_and_task_by_namespace()","thor::actions#find_in_source_paths()","bundler::rubygemsintegration::legacy#find_name()","bundler::rubygemsintegration::modern#find_name()","thor::find_subcommand()","thor::find_subcommand_possibilities()","bundler::specset#for()","bundler::resolver::specgroup#for?()","thor::task#formatted_usage()","bundler::source::git::from_lock()","bundler::source::path::from_lock()","bundler::source::rubygems::from_lock()","thor::base::classmethods#from_superclass()","gem::specification#full_gem_path()","bundler::lazyspecification#full_name()","bundler::remotespecification#full_name()","bundler::cli#gem()","bundler::dsl#gem()","bundler::rubygemsintegration#gem_bindir()","bundler::rubygemsintegration#gem_dir()","gem::specification#gem_dir()","bundler::resolver#gem_message()","bundler::rubygemsintegration#gem_path()","bundler::dependency#gem_platforms()","bundler::resolver#gems_size()","bundler::dsl#gemspec()","bundler::source::path::installer#generate_bin()","bundler::gemhelpers#generic()","thor::actions#get()","bundler::dsl#git()","bundler::gemhelper#git_push()","gem::specification#git_version()","thor::util::globs_for()","bundler::dsl#group()","thor::base::classmethods#group()","bundler::definition#groups()","bundler::graph#groups()","gem::specification#groups()","thor::actions#gsub_file()","bundler::gemhelper#guard_already_tagged()","bundler::gemhelper#guard_clean()","thor::task#handle_argument_error?()","thor::task#handle_no_method_error?()","bundler::depproxy#hash()","bundler::source::path#hash()","bundler::source::rubygems#hash()","gem::platform#hash()","bundler::cli#help()","thor#help()","thor::help()","thor::group::help()","thor::hiddentask#hidden?()","thor::task#hidden?()","bundler::home()","bundler::sharedhelpers#in_bundle?()","thor::actions#in_root()","thor::rakecompat::included()","bundler::definition#index()","bundler::environment#index()","bundler::rubygemsintegration#inflate()","bundler::ui#info()","bundler::ui::shell#info()","thor::base::classmethods#inherited()","bundler::cli#init()","bundler::index#initialize_copy()","bundler::resolver::specgroup#initialize_copy()","thor::actions#inject_into_class()","thor::actions#inject_into_file()","thor::actions#insert_into_file()","thor::actions#inside()","bundler::environment#inspect()","bundler::cli#install()","bundler::gemhelper#install()","bundler::installer::install()","bundler::source::git#install()","bundler::source::path#install()","bundler::source::rubygems#install()","bundler::gemhelper#install_gem()","bundler::install_path()","bundler::gemhelper::install_tasks()","thor::group::invoke()","thor::invocation#invoke()","thor::group::invoke_from_option()","thor::invocation#invoke_with_padding()","thor::actions#link_file()","bundler::load()","bundler::load_gemspec()","gem::specification#load_paths()","bundler::source::git#load_spec_files()","bundler::source::path#load_spec_files()","thor::util::load_thorfile()","gem::specification#loaded_from()","bundler::rubygemsintegration#loaded_specs()","bundler::source::path#local_specs()","bundler::settings#locations()","bundler::cli#lock()","bundler::definition#lock()","bundler::environment#lock()","thor::long_desc()","thor::map()","bundler::rubygemsintegration#mark_loaded()","bundler::rubygemsintegration#marshal_spec_dir()","bundler::matchplatform#match_platform()","gem::dependency#matches_spec?()","bundler::specset#materialize()","bundler::specset#merge()","bundler::source::rubygems#merge_remotes()","thor::base::classmethods#method_added()","thor::method_option()","thor::method_options()","bundler::definition#missing_specs()","bundler::mkdir_p()","thor::shell::basic#mute()","thor::shell::basic#mute?()","bundler::gemhelper#name()","bundler::resolver::specgroup#name()","bundler::source::git#name()","bundler::source::path#name()","bundler::source::rubygems#name()","thor::base::classmethods#namespace()","thor::util::namespace_from_thor_class()","thor::util::namespaces_in_content()","bundler::cli::new()","bundler::definition::new()","bundler::depproxy::new()","bundler::dependency::new()","bundler::dsl::new()","bundler::environment::new()","bundler::gemhelper::new()","bundler::graph::new()","bundler::graphnode::new()","bundler::index::new()","bundler::lazyspecification::new()","bundler::lockfileparser::new()","bundler::remotespecification::new()","bundler::resolver::new()","bundler::resolver::specgroup::new()","bundler::rubygemsintegration::new()","bundler::rubygemsintegration::ancient::new()","bundler::settings::new()","bundler::source::git::new()","bundler::source::path::new()","bundler::source::path::installer::new()","bundler::source::rubygems::new()","bundler::specset::new()","bundler::ui::rgproxy::new()","bundler::ui::shell::new()","bundler::versionconflict::new()","thor::actions::new()","thor::base::new()","thor::dynamictask::new()","thor::shell::new()","thor::task::new()","bundler::definition#new_platform?()","bundler::definition#new_specs()","thor::shell::basic#no?()","bundler::definition#no_sources?()","thor::base::classmethods#no_tasks()","bundler::graph#nodes()","gem::specification#nondevelopment_dependencies()","gem::requirement#none?()","thor::task#not_debugging?()","bundler::cli#open()","bundler::source::rubygems#options()","bundler::cli#package()","thor::shell::basic#padding=()","bundler::dsl#path()","bundler::rubygemsintegration#path()","bundler::settings#path()","bundler::source::git#path()","bundler::gemhelper#perform_git_push()","bundler::dsl#platform()","bundler::dsl#platforms()","bundler::rubygemsintegration#platforms()","thor::actions#prepend_file()","thor::actions#prepend_to_file()","bundler::rubygemsintegration#preserve_paths()","bundler::rubygemsintegration::almostmodern#preserve_paths()","bundler::settings#pretty_values_for()","thor::base::classmethods#print_options()","thor::shell::basic#print_table()","thor::shell::basic#print_wrapped()","thor::printable_tasks()","thor::group::printable_tasks()","bundler::runtime#prune_cache()","thor::base::classmethods#public_task()","thor::rakecompat::rake_classes()","bundler::rubygemsintegration#read_binary()","bundler::read_file()","thor::register()","thor::actions#relative_to_original_destination_root()","bundler::gemhelper#release_gem()","bundler::source::path#remote!()","bundler::source::rubygems#remote!()","thor::base::classmethods#remove_argument()","thor::base::classmethods#remove_class_option()","thor::actions#remove_dir()","thor::actions#remove_file()","thor::group::remove_invocation()","thor::base::classmethods#remove_task()","bundler::definition#removed_specs()","bundler::rubygemsintegration#replace_bin_path()","bundler::rubygemsintegration#replace_entrypoints()","bundler::rubygemsintegration#replace_gem()","bundler::rubygemsintegration#replace_refresh()","bundler::definition#requested_specs()","bundler::environment#requested_specs()","bundler::require()","bundler::runtime#require()","gem::dependency#required_by()","gem::specification#required_by()","thor::task#required_options()","gem::dependency#requirement()","bundler::requires_sudo?()","bundler::definition#resolve()","bundler::resolver::resolve()","bundler::resolver#resolve()","bundler::definition#resolve_remotely!()","bundler::resolver#resolve_requirement()","bundler::definition#resolve_with_cache!()","bundler::lazyspecification#respond_to?()","bundler::rubygemsintegration#reverse_rubygems_kernel_mixin()","gem::specification#rg_full_gem_path()","gem::specification#rg_loaded_from()","bundler::root()","thor::util::ruby_command()","bundler::rubygemsintegration#ruby_engine()","bundler::ruby_scope()","bundler::gemhelper#rubygem_push()","bundler::definition#rubygems_index()","bundler::installer#run()","thor::actions#run()","thor::dynamictask#run()","thor::task#run()","thor::actions#run_ruby_script()","bundler::lazyspecification#satisfies?()","bundler::ui::rgproxy#say()","thor::shell::basic#say()","thor::shell::basic#say_status()","bundler::index#search()","bundler::resolver#search()","bundler::index#search_for_all_platforms()","thor::shell::color#set_color()","thor::shell::html#set_color()","bundler::settings#set_global()","bundler::settings()","bundler::setup()","bundler::runtime#setup()","bundler::gemhelper#sh()","bundler::gemhelper#sh_with_code()","thor::base::shell()","thor::shell#shell()","thor::base::shell=()","thor::shell#shell=()","bundler::dependency#should_include?()","bundler::cli#show()","bundler::rubygemsintegration::deprecate#skip_during()","thor::util::snake_case()","bundler::specset#sort!()","bundler::dsl#source()","bundler::resolver::specgroup#source()","thor::actions#source_paths()","thor::actions::classmethods#source_paths()","thor::actions::classmethods#source_paths_for_search()","bundler::cli::source_root()","thor::actions::classmethods#source_root()","bundler::index#sources()","bundler::rubygemsintegration#sources()","bundler::rubygemsintegration#sources=()","bundler::rubygemsintegration#spec_from_gem()","bundler::definition#specs()","bundler::environment#specs()","bundler::source::git#specs()","bundler::source::path#specs()","bundler::source::rubygems#specs()","bundler::definition#specs_for()","bundler::specs_path()","bundler::resolver#start()","thor::base::classmethods#start()","bundler::bundlererror::status_code()","thor::shell::basic#stderr()","thor::shell::basic#stdin()","thor::shell::basic#stdout()","bundler::rubygemsintegration::legacy#stub_rubygems()","bundler::rubygemsintegration::modern#stub_rubygems()","bundler::rubygemsintegration::transitional#stub_rubygems()","bundler::rubygemsintegration#stub_source_index137()","bundler::rubygemsintegration#stub_source_index170()","thor::base::subclass_files()","thor::base::subclasses()","thor::subcommand()","thor::subcommand_help()","thor::subcommands()","bundler::resolver#successify()","bundler::sudo()","bundler::source::rubygems#sudo()","bundler::gemhelper#tag_version()","thor::task_help()","thor::base::classmethods#tasks()","thor::actions#template()","thor::actions#thor()","thor::util::thor_classes_in()","thor::util::thor_root()","thor::util::thor_root_glob()","bundler::tmp()","bundler::specset#to_a()","bundler::dsl#to_definition()","gem::specification#to_gemfile()","bundler::specset#to_hash()","bundler::definition#to_lock()","bundler::dependency#to_lock()","bundler::lazyspecification#to_lock()","bundler::source::git#to_lock()","bundler::source::path#to_lock()","bundler::source::rubygems#to_lock()","gem::dependency#to_lock()","bundler::depproxy#to_s()","bundler::lazyspecification#to_s()","bundler::resolver::specgroup#to_s()","bundler::source::git#to_s()","bundler::source::path#to_s()","bundler::source::rubygems#to_s()","bundler::resolver::specgroup#to_specs()","gem::dependency#to_yaml_properties()","bundler::depproxy#type()","bundler::ui()","bundler::rubygemsintegration#ui=()","bundler::cli#unlock()","bundler::source::git#unlock!()","bundler::cli#update()","bundler::environment#update()","bundler::index#use()","bundler::user_bundle_path()","bundler::rubygemsintegration#user_home()","thor::util::user_home()","bundler::specset#valid_for?()","bundler::cli#version()","bundler::gemhelper#version()","bundler::resolver::specgroup#version()","bundler::resolver#version_conflict()","bundler::gemhelper#version_tag()","bundler::cli#viz()","bundler::graph#viz()","bundler::ui#warn()","bundler::ui::shell#warn()","bundler::rubygemsintegration#with_build_args()","bundler::with_clean_env()","thor::shell#with_padding()","bundler::settings#without()","bundler::settings#without=()","thor::shell::basic#yes?()","","","","","","","","","","","","","","",""],"info":[["Bundler","","Bundler.html","",""],["Bundler::BundlerError","","Bundler/BundlerError.html","",""],["Bundler::CLI","","Bundler/CLI.html","",""],["Bundler::Definition","","Bundler/Definition.html","",""],["Bundler::DepProxy","","Bundler/DepProxy.html","",""],["Bundler::Dependency","","Bundler/Dependency.html","",""],["Bundler::Deployment","","Bundler/Deployment.html","",""],["Bundler::DeprecatedError","","Bundler/DeprecatedError.html","",""],["Bundler::Dsl","","Bundler/Dsl.html","",""],["Bundler::DslError","","Bundler/DslError.html","",""],["Bundler::Environment","","Bundler/Environment.html","",""],["Bundler::GemHelper","","Bundler/GemHelper.html","",""],["Bundler::GemHelpers","","Bundler/GemHelpers.html","",""],["Bundler::GemInstaller","","Bundler/GemInstaller.html","",""],["Bundler::GemNotFound","","Bundler/GemNotFound.html","",""],["Bundler::GemfileError","","Bundler/GemfileError.html","",""],["Bundler::GemfileNotFound","","Bundler/GemfileNotFound.html","",""],["Bundler::GemspecError","","Bundler/GemspecError.html","",""],["Bundler::GitError","","Bundler/GitError.html","",""],["Bundler::Graph","","Bundler/Graph.html","",""],["Bundler::GraphNode","","Bundler/GraphNode.html","","<p>Add version info\n"],["Bundler::Index","","Bundler/Index.html","",""],["Bundler::InstallError","","Bundler/InstallError.html","",""],["Bundler::Installer","","Bundler/Installer.html","",""],["Bundler::InvalidOption","","Bundler/InvalidOption.html","",""],["Bundler::InvalidSpecSet","","Bundler/InvalidSpecSet.html","",""],["Bundler::LazySpecification","","Bundler/LazySpecification.html","",""],["Bundler::LockfileParser","","Bundler/LockfileParser.html","",""],["Bundler::MatchPlatform","","Bundler/MatchPlatform.html","",""],["Bundler::PathError","","Bundler/PathError.html","",""],["Bundler::ProductionError","","Bundler/ProductionError.html","",""],["Bundler::RemoteSpecification","","Bundler/RemoteSpecification.html","","<p>Represents a lazily loaded gem specification, where the full specification\nis on the source server in ...\n"],["Bundler::Resolver","","Bundler/Resolver.html","",""],["Bundler::Resolver::SpecGroup","","Bundler/Resolver/SpecGroup.html","",""],["Bundler::RubygemsIntegration","","Bundler/RubygemsIntegration.html","",""],["Bundler::RubygemsIntegration::AlmostModern","","Bundler/RubygemsIntegration/AlmostModern.html","","<p>Rubygems 1.8.0 to 1.8.4\n"],["Bundler::RubygemsIntegration::Ancient","","Bundler/RubygemsIntegration/Ancient.html","","<p>Rubygems versions 1.3.6 and 1.3.7\n"],["Bundler::RubygemsIntegration::Deprecate","","Bundler/RubygemsIntegration/Deprecate.html","",""],["Bundler::RubygemsIntegration::Gem","","Bundler/RubygemsIntegration/Gem.html","",""],["Bundler::RubygemsIntegration::Gem::SourceIndex","","Bundler/RubygemsIntegration/Gem/SourceIndex.html","",""],["Bundler::RubygemsIntegration::Legacy","","Bundler/RubygemsIntegration/Legacy.html","","<p>Rubygems 1.4 through 1.6\n"],["Bundler::RubygemsIntegration::Modern","","Bundler/RubygemsIntegration/Modern.html","","<p>Rubygems 1.8.5\n"],["Bundler::RubygemsIntegration::Transitional","","Bundler/RubygemsIntegration/Transitional.html","","<p>Rubygems 1.7\n"],["Bundler::Runtime","","Bundler/Runtime.html","",""],["Bundler::Settings","","Bundler/Settings.html","",""],["Bundler::SharedHelpers","","Bundler/SharedHelpers.html","",""],["Bundler::Source","","Bundler/Source.html","",""],["Bundler::Source::Git","","Bundler/Source/Git.html","",""],["Bundler::Source::Path","","Bundler/Source/Path.html","",""],["Bundler::Source::Path::Installer","","Bundler/Source/Path/Installer.html","",""],["Bundler::Source::Rubygems","","Bundler/Source/Rubygems.html","","<p>TODO: Refactor this class\n"],["Bundler::SpecSet","","Bundler/SpecSet.html","",""],["Bundler::UI","","Bundler/UI.html","",""],["Bundler::UI::RGProxy","","Bundler/UI/RGProxy.html","",""],["Bundler::UI::Shell","","Bundler/UI/Shell.html","",""],["Bundler::VersionConflict","","Bundler/VersionConflict.html","","<p>Internal errors, should be rescued\n"],["Gem","","Gem.html","","<p>Extending Gem classes to add necessary tracking information\n"],["Gem::Dependency","","Gem/Dependency.html","",""],["Gem::Platform","","Gem/Platform.html","",""],["Gem::Requirement","","Gem/Requirement.html","",""],["Gem::Specification","","Gem/Specification.html","",""],["Object","","Object.html","",""],["Thor","","Thor.html","",""],["Thor::Actions","","Thor/Actions.html","",""],["Thor::Actions::ClassMethods","","Thor/Actions/ClassMethods.html","",""],["Thor::Base","","Thor/Base.html","",""],["Thor::Base::ClassMethods","","Thor/Base/ClassMethods.html","",""],["Thor::DynamicTask","","Thor/DynamicTask.html","","<p>A dynamic task that handles method missing scenarios.\n"],["Thor::Error","","Thor/Error.html","","<p>Thor::Error is raised when it's caused by wrong usage of thor classes.\nThose errors have their backtrace ...\n"],["Thor::Group","","Thor/Group.html","","<p>Thor has a special class called Thor::Group. The main difference to Thor\nclass is that it invokes all ...\n"],["Thor::HiddenTask","","Thor/HiddenTask.html","","<p>A task that is hidden in help messages but still invocable.\n"],["Thor::Invocation","","Thor/Invocation.html","",""],["Thor::Invocation::ClassMethods","","Thor/Invocation/ClassMethods.html","",""],["Thor::InvocationError","","Thor/InvocationError.html","","<p>Raised when a task was found, but not invoked properly.\n"],["Thor::MalformattedArgumentError","","Thor/MalformattedArgumentError.html","",""],["Thor::RakeCompat","","Thor/RakeCompat.html","","<p>Adds a compatibility layer to your Thor classes which allows you to use\nrake package tasks. For example, ...\n"],["Thor::RequiredArgumentMissingError","","Thor/RequiredArgumentMissingError.html","",""],["Thor::Shell","","Thor/Shell.html","",""],["Thor::Shell::Basic","","Thor/Shell/Basic.html","",""],["Thor::Shell::Color","","Thor/Shell/Color.html","","<p>Inherit from Thor::Shell::Basic and add set_color behavior. Check\nThor::Shell::Basic to see all available ...\n"],["Thor::Shell::HTML","","Thor/Shell/HTML.html","","<p>Inherit from Thor::Shell::Basic and add set_color behavior. Check\nThor::Shell::Basic to see all available ...\n"],["Thor::Task","","Thor/Task.html","",""],["Thor::UndefinedTaskError","","Thor/UndefinedTaskError.html","","<p>Raised when a task was not found.\n"],["Thor::UnknownArgumentError","","Thor/UnknownArgumentError.html","",""],["Thor::Util","","Thor/Util.html","","<p>This module holds several utilities:\n<p>1) Methods to convert thor namespaces to constants and vice-versa. ...\n"],["<<","Bundler::Index","Bundler/Index.html#method-i-3C-3C","(spec)",""],["==","Bundler::DepProxy","Bundler/DepProxy.html#method-i-3D-3D","(o)",""],["==","Bundler::Index","Bundler/Index.html#method-i-3D-3D","(o)",""],["==","Bundler::Source::Git","Bundler/Source/Git.html#method-i-3D-3D","(o)",""],["==","Bundler::Source::Path","Bundler/Source/Path.html#method-i-3D-3D","(o)",""],["==","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-3D-3D","(o)",""],["[]","Bundler::Index","Bundler/Index.html#method-i-5B-5D","(query)",""],["[]","Bundler::Settings","Bundler/Settings.html#method-i-5B-5D","(key)",""],["[]","Bundler::SpecSet","Bundler/SpecSet.html#method-i-5B-5D","(key)",""],["[]=","Bundler::Settings","Bundler/Settings.html#method-i-5B-5D-3D","(key, value)",""],["[]=","Bundler::SpecSet","Bundler/SpecSet.html#method-i-5B-5D-3D","(key, value)",""],["__materialize__","Bundler::LazySpecification","Bundler/LazySpecification.html#method-i-__materialize__","()",""],["__swap__","Bundler::RemoteSpecification","Bundler/RemoteSpecification.html#method-i-__swap__","(spec)","<p>Because Rubyforge cannot be trusted to provide valid specifications once\nthe remote gem is downloaded, ...\n"],["activate_platform","Bundler::Resolver::SpecGroup","Bundler/Resolver/SpecGroup.html#method-i-activate_platform","(platform)",""],["add_bundler_dependencies","Gem::Specification","Gem/Specification.html#method-i-add_bundler_dependencies","(*groups)",""],["add_file","Thor::Actions","Thor/Actions.html#method-i-add_file","(destination, *args, &block)",""],["add_link","Thor::Actions","Thor/Actions.html#method-i-add_link","(destination, *args, &block)",""],["add_remote","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-add_remote","(source)",""],["add_runtime_options!","Thor::Actions::ClassMethods","Thor/Actions/ClassMethods.html#method-i-add_runtime_options-21","()","<p>Add runtime options that help actions execution.\n"],["all","Bundler::Settings","Bundler/Settings.html#method-i-all","()",""],["all_specs","Bundler::RubygemsIntegration::Legacy","Bundler/RubygemsIntegration/Legacy.html#method-i-all_specs","()",""],["all_specs","Bundler::RubygemsIntegration::Modern","Bundler/RubygemsIntegration/Modern.html#method-i-all_specs","()",""],["all_tasks","Thor::Base::ClassMethods","Thor/Base/ClassMethods.html#method-i-all_tasks","()","<p>Returns the tasks for this Thor class and all subclasses.\n<p>Returns\n<p>OrderedHash &mdash; An ordered hash with tasks ...\n"],["allow_sudo?","Bundler::Settings","Bundler/Settings.html#method-i-allow_sudo-3F","()",""],["app_cache","Bundler","Bundler.html#method-c-app_cache","()",""],["app_config_path","Bundler","Bundler.html#method-c-app_config_path","()",""],["append_file","Thor::Actions","Thor/Actions.html#method-i-append_file","(path, *args, &block)",""],["append_to_file","Thor::Actions","Thor/Actions.html#method-i-append_to_file","(path, *args, &block)","<p>Append text to a file. Since it depends on insert_into_file, it's\nreversible.\n<p>Parameters\n<p>path&lt;String&gt; ... &mdash; "],["apply","Thor::Actions","Thor/Actions.html#method-i-apply","(path, config={})","<p>Loads an external file and execute it in the instance binding.\n<p>Parameters\n<p>path&lt;String&gt; &mdash; The path to ...\n"],["argument","Thor::Base::ClassMethods","Thor/Base/ClassMethods.html#method-i-argument","(name, options={})","<p>Adds an argument to the class and creates an attr_accessor for it.\n<p>Arguments are different from options ...\n"],["arguments","Thor::Base::ClassMethods","Thor/Base/ClassMethods.html#method-i-arguments","()","<p>Returns this class arguments, looking up in the ancestors chain.\n<p>Returns\n<p>Array\n"],["ask","Thor::Shell::Basic","Thor/Shell/Basic.html#method-i-ask","(statement, color=nil)","<p>Ask something to the user and receives a response.\n<p>Example\n<p>ask(\"What is your name?\")\n"],["ask","Thor::Shell::HTML","Thor/Shell/HTML.html#method-i-ask","(statement, color=nil)","<p>Ask something to the user and receives a response.\n<p>Example\n<p>ask(\"What is your name?\")\n"],["backport_segment_generation","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-backport_segment_generation","()","<p>This backports the correct segment generation code from Rubygems 1.4+ by\nmonkeypatching it into the method ...\n"],["banner","Thor","Thor.html#method-c-banner","(task, namespace = nil, subcommand = false)","<p>The banner for this class. You can customize it if you are invoking the\nthor class by another ways which ...\n"],["banner","Thor::Group","Thor/Group.html#method-c-banner","()","<p>The banner for this class. You can customize it if you are invoking the\nthor class by another ways which ...\n"],["basename","Thor::Base::ClassMethods","Thor/Base/ClassMethods.html#method-i-basename","()","<p>The basename of the program invoking the thor class.\n"],["be_quiet!","Bundler::UI::Shell","Bundler/UI/Shell.html#method-i-be_quiet-21","()",""],["bin_path","Bundler","Bundler.html#method-c-bin_path","()",""],["bin_path","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-bin_path","(gem, bin, ver)",""],["build","Bundler::Definition","Bundler/Definition.html#method-c-build","(gemfile, lockfile, unlock)",""],["build","Bundler::Index","Bundler/Index.html#method-c-build","()",""],["build_gem","Bundler::GemHelper","Bundler/GemHelper.html#method-i-build_gem","()",""],["built_gem_path","Bundler::GemHelper","Bundler/GemHelper.html#method-i-built_gem_path","()",""],["bundle_path","Bundler","Bundler.html#method-c-bundle_path","()",""],["cache","Bundler","Bundler.html#method-c-cache","()",""],["cache","Bundler::CLI","Bundler/CLI.html#method-i-cache","()",""],["cache","Bundler::Runtime","Bundler/Runtime.html#method-i-cache","()",""],["cache","Bundler::Source::Path","Bundler/Source/Path.html#method-i-cache","(spec)",""],["cache","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-cache","(spec)",""],["cached!","Bundler::Source::Path","Bundler/Source/Path.html#method-i-cached-21","()",""],["cached!","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-cached-21","()",""],["camel_case","Thor::Util","Thor/Util.html#method-c-camel_case","(str)","<p>Receives a string and convert it to camel case. camel_case returns\nCamelCase.\n<p>Parameters\n<p>String\n"],["check","Bundler::CLI","Bundler/CLI.html#method-i-check","()",""],["check_executable_overwrite","Bundler::GemInstaller","Bundler/GemInstaller.html#method-i-check_executable_overwrite","(filename)",""],["check_unknown_options!","Thor","Thor.html#method-c-check_unknown_options-21","(options={})","<p>Extend check unknown options to accept a hash of conditions.\n<p>Parameters\n<p>options&lt;Hash&gt;: A hash containing ...\n"],["check_unknown_options!","Thor::Base::ClassMethods","Thor/Base/ClassMethods.html#method-i-check_unknown_options-21","()","<p>If you want to raise an error for unknown options, call\ncheck_unknown_options! This is disabled by default ...\n"],["chmod","Thor::Actions","Thor/Actions.html#method-i-chmod","(path, mode, config={})","<p>Changes the mode of the given file or directory.\n<p>Parameters\n<p>mode&lt;Integer&gt; &mdash; the file mode\n"],["class_option","Thor::Base::ClassMethods","Thor/Base/ClassMethods.html#method-i-class_option","(name, options={})","<p>Adds an option to the set of class options\n<p>Parameters\n<p>name&lt;Symbol&gt; &mdash; The name of the argument.\n"],["class_options","Thor::Base::ClassMethods","Thor/Base/ClassMethods.html#method-i-class_options","(options=nil)","<p>Adds a bunch of options to the set of class options.\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">class_options</span> :<span class=\"ruby-identifier\">foo</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-keyword\">false</span>, :<span class=\"ruby-identifier\">bar</span> =<span class=\"ruby-operator\">&gt;</span> :<span class=\"ruby-identifier\">required</span>, :<span class=\"ruby-identifier\">baz</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["clean?","Bundler::GemHelper","Bundler/GemHelper.html#method-i-clean-3F","()",""],["clean_req","Bundler::Resolver","Bundler/Resolver.html#method-i-clean_req","(req)",""],["clear_paths","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-clear_paths","()",""],["config","Bundler::CLI","Bundler/CLI.html#method-i-config","(name = nil, *args)",""],["configuration","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-configuration","()",""],["configure","Bundler","Bundler.html#method-c-configure","()",""],["confirm","Bundler::UI","Bundler/UI.html#method-i-confirm","(message)",""],["confirm","Bundler::UI::Shell","Bundler/UI/Shell.html#method-i-confirm","(msg)",""],["console","Bundler::CLI","Bundler/CLI.html#method-i-console","(group = nil)",""],["copy_file","Thor::Actions","Thor/Actions.html#method-i-copy_file","(source, *args, &block)","<p>Copies the file from the relative source to the relative destination. If\nthe destination is not given ...\n"],["create_file","Thor::Actions","Thor/Actions.html#method-i-create_file","(destination, *args, &block)","<p>Create a new file relative to the destination root with the given data,\nwhich is the return value of ...\n"],["create_link","Thor::Actions","Thor/Actions.html#method-i-create_link","(destination, *args, &block)","<p>Create a new file relative to the destination root from the given source.\n<p>Parameters\n<p>destination&lt;String&gt; ... &mdash; "],["current_dependencies","Bundler::Definition","Bundler/Definition.html#method-i-current_dependencies","()",""],["current_dependencies","Bundler::Environment","Bundler/Environment.html#method-i-current_dependencies","()",""],["current_env?","Bundler::Dependency","Bundler/Dependency.html#method-i-current_env-3F","()",""],["current_platform?","Bundler::Dependency","Bundler/Dependency.html#method-i-current_platform-3F","()",""],["debug","Bundler::Resolver","Bundler/Resolver.html#method-i-debug","()",""],["debug","Bundler::UI","Bundler/UI.html#method-i-debug","(message)",""],["debug","Bundler::UI::Shell","Bundler/UI/Shell.html#method-i-debug","(msg)",""],["debug!","Bundler::UI::Shell","Bundler/UI/Shell.html#method-i-debug-21","()",""],["default_gemfile","Bundler","Bundler.html#method-c-default_gemfile","()",""],["default_gemfile","Bundler::SharedHelpers","Bundler/SharedHelpers.html#method-i-default_gemfile","()",""],["default_lockfile","Bundler","Bundler.html#method-c-default_lockfile","()",""],["default_lockfile","Bundler::SharedHelpers","Bundler/SharedHelpers.html#method-i-default_lockfile","()",""],["default_task","Thor","Thor.html#method-c-default_task","(meth=nil)","<p>Sets the default task when thor is executed without an explicit task to be\ncalled.\n<p>Parameters\n<p>meth&lt;Symbol&gt; ... &mdash; "],["define_task","Bundler::Deployment","Bundler/Deployment.html#method-c-define_task","(context, task_method = :task, opts = {})",""],["definition","Bundler","Bundler.html#method-c-definition","(unlock = nil)",""],["delete","Bundler::Settings","Bundler/Settings.html#method-i-delete","(key)",""],["dependencies","Bundler::Environment","Bundler/Environment.html#method-i-dependencies","()",""],["dependencies_for","Bundler::Runtime","Bundler/Runtime.html#method-i-dependencies_for","(*groups)",""],["deprecate","Bundler::Dsl","Bundler/Dsl.html#method-c-deprecate","(name, replacement = nil)","<p>Deprecated methods\n"],["desc","Thor","Thor.html#method-c-desc","(usage, description, options={})","<p>Defines the usage and the description of the next task.\n<p>Parameters\n<p>usage&lt;String&gt; description&lt;String&gt; ...\n"],["desc","Thor::Group","Thor/Group.html#method-c-desc","(description=nil)","<p>The description for this Thor::Group. If none is provided, but a source\nroot exists, tries to find the ...\n"],["destination_root","Thor::Actions","Thor/Actions.html#method-i-destination_root","()","<p>Returns the root for this thor class (also aliased as destination root).\n"],["destination_root=","Thor::Actions","Thor/Actions.html#method-i-destination_root-3D","(root)","<p>Sets the root for this thor class. Relatives path are added to the\ndirectory where the script was invoked ...\n"],["directory","Thor::Actions","Thor/Actions.html#method-i-directory","(source, *args, &block)","<p>Copies recursively the files from source directory to root directory. If\nany of the files finishes with ...\n"],["download_gem","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-download_gem","(spec, uri, path)",""],["each","Bundler::Index","Bundler/Index.html#method-i-each","(&blk)",""],["empty?","Bundler::Index","Bundler/Index.html#method-i-empty-3F","()",""],["empty_directory","Thor::Actions","Thor/Actions.html#method-i-empty_directory","(destination, config={})","<p>Creates an empty directory.\n<p>Parameters\n<p>destination&lt;String&gt; &mdash; the relative path to the destination root. ...\n"],["encode_with","Gem::Dependency","Gem/Dependency.html#method-i-encode_with","(coder)",""],["ensure_equivalent_gemfile_and_lockfile","Bundler::Definition","Bundler/Definition.html#method-i-ensure_equivalent_gemfile_and_lockfile","(explicit_flag = false)",""],["env","Bundler::Dsl","Bundler/Dsl.html#method-i-env","(name)",""],["environment","Bundler","Bundler.html#method-c-environment","()",""],["eql?","Bundler::DepProxy","Bundler/DepProxy.html#method-i-eql-3F","(o)",""],["eql?","Bundler::Source::Git","Bundler/Source/Git.html#method-i-eql-3F","(o)",""],["eql?","Bundler::Source::Path","Bundler/Source/Path.html#method-i-eql-3F","(o)",""],["eql?","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-eql-3F","(o)",""],["error","Bundler::UI","Bundler/UI.html#method-i-error","(message)",""],["error","Bundler::UI::Shell","Bundler/UI/Shell.html#method-i-error","(msg)",""],["error","Thor::Shell::Basic","Thor/Shell/Basic.html#method-i-error","(statement)","<p>Called if something goes wrong during the execution. This is used by Thor\ninternally and should not be ...\n"],["error_message","Bundler::Resolver","Bundler/Resolver.html#method-i-error_message","()",""],["evaluate","Bundler::Dsl","Bundler/Dsl.html#method-c-evaluate","(gemfile, lockfile, unlock)",""],["exec","Bundler::CLI","Bundler/CLI.html#method-i-exec","(*)",""],["exit_on_failure?","Thor::Base::ClassMethods","Thor/Base/ClassMethods.html#method-i-exit_on_failure-3F","()","<p>A flag that makes the process exit with status 1 if any error happens.\n"],["fetch","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-fetch","(spec)",""],["fetch_platform","Bundler::RemoteSpecification","Bundler/RemoteSpecification.html#method-i-fetch_platform","()","<p>Needed before installs, since the arch matters then and quick specs don't\nbother to include the arch ...\n"],["fetch_specs","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-fetch_specs","(all, pre, &blk)",""],["file_collision","Thor::Shell::Basic","Thor/Shell/Basic.html#method-i-file_collision","(destination)","<p>Deals with file collision and returns true if the file should be overwriten\nand false otherwise. If a ...\n"],["find_by_namespace","Thor::Util","Thor/Util.html#method-c-find_by_namespace","(namespace)","<p>Receives a namespace and search for it in the Thor::Base subclasses.\n<p>Parameters\n<p>namespace&lt;String&gt; ... &mdash; "],["find_class_and_task_by_namespace","Thor::Util","Thor/Util.html#method-c-find_class_and_task_by_namespace","(namespace, fallback = true)","<p>Receives a namespace and tries to retrieve a Thor or Thor::Group class from\nit. It first searches for ...\n"],["find_in_source_paths","Thor::Actions","Thor/Actions.html#method-i-find_in_source_paths","(file)","<p>Receives a file or directory and search for it in the source paths.\n"],["find_name","Bundler::RubygemsIntegration::Legacy","Bundler/RubygemsIntegration/Legacy.html#method-i-find_name","(name)",""],["find_name","Bundler::RubygemsIntegration::Modern","Bundler/RubygemsIntegration/Modern.html#method-i-find_name","(name)",""],["find_subcommand","Thor","Thor.html#method-c-find_subcommand","(subcmd_name)",""],["find_subcommand_possibilities","Thor","Thor.html#method-c-find_subcommand_possibilities","(subcmd_name)",""],["for","Bundler::SpecSet","Bundler/SpecSet.html#method-i-for","(dependencies, skip = [], check = false, match_current_platform = false)",""],["for?","Bundler::Resolver::SpecGroup","Bundler/Resolver/SpecGroup.html#method-i-for-3F","(platform)",""],["formatted_usage","Thor::Task","Thor/Task.html#method-i-formatted_usage","(klass, namespace = true, subcommand = false)","<p>Returns the formatted usage by injecting given required arguments and\nrequired options into the given ...\n"],["from_lock","Bundler::Source::Git","Bundler/Source/Git.html#method-c-from_lock","(options)",""],["from_lock","Bundler::Source::Path","Bundler/Source/Path.html#method-c-from_lock","(options)",""],["from_lock","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-c-from_lock","(options)",""],["from_superclass","Thor::Base::ClassMethods","Thor/Base/ClassMethods.html#method-i-from_superclass","(method, default=nil)","<p>Retrieves a value from superclass. If it reaches the baseclass, returns\ndefault.\n"],["full_gem_path","Gem::Specification","Gem/Specification.html#method-i-full_gem_path","()",""],["full_name","Bundler::LazySpecification","Bundler/LazySpecification.html#method-i-full_name","()",""],["full_name","Bundler::RemoteSpecification","Bundler/RemoteSpecification.html#method-i-full_name","()",""],["gem","Bundler::CLI","Bundler/CLI.html#method-i-gem","(name)",""],["gem","Bundler::Dsl","Bundler/Dsl.html#method-i-gem","(name, *args)",""],["gem_bindir","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-gem_bindir","()",""],["gem_dir","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-gem_dir","()",""],["gem_dir","Gem::Specification","Gem/Specification.html#method-i-gem_dir","()",""],["gem_message","Bundler::Resolver","Bundler/Resolver.html#method-i-gem_message","(requirement)","<p>For a given conflicted requirement, print out what exactly went wrong\n"],["gem_path","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-gem_path","()",""],["gem_platforms","Bundler::Dependency","Bundler/Dependency.html#method-i-gem_platforms","(valid_platforms)",""],["gems_size","Bundler::Resolver","Bundler/Resolver.html#method-i-gems_size","(dep)",""],["gemspec","Bundler::Dsl","Bundler/Dsl.html#method-i-gemspec","(opts = nil)",""],["generate_bin","Bundler::Source::Path::Installer","Bundler/Source/Path/Installer.html#method-i-generate_bin","()",""],["generic","Bundler::GemHelpers","Bundler/GemHelpers.html#method-i-generic","(p)",""],["get","Thor::Actions","Thor/Actions.html#method-i-get","(source, *args, &block)","<p>Gets the content at the given address and places it at the given relative\ndestination. If a block is ...\n"],["git","Bundler::Dsl","Bundler/Dsl.html#method-i-git","(uri, options = {}, source_options = {}, &blk)",""],["git_push","Bundler::GemHelper","Bundler/GemHelper.html#method-i-git_push","()",""],["git_version","Gem::Specification","Gem/Specification.html#method-i-git_version","()",""],["globs_for","Thor::Util","Thor/Util.html#method-c-globs_for","(path)","<p>Where to look for Thor files.\n"],["group","Bundler::Dsl","Bundler/Dsl.html#method-i-group","(*args, &blk)",""],["group","Thor::Base::ClassMethods","Thor/Base/ClassMethods.html#method-i-group","(name=nil)","<p>Defines the group. This is used when thor list is invoked so you can\nspecify that only tasks from a pre-defined ...\n"],["groups","Bundler::Definition","Bundler/Definition.html#method-i-groups","()",""],["groups","Bundler::Graph","Bundler/Graph.html#method-i-groups","()",""],["groups","Gem::Specification","Gem/Specification.html#method-i-groups","()",""],["gsub_file","Thor::Actions","Thor/Actions.html#method-i-gsub_file","(path, flag, *args, &block)","<p>Run a regular expression replacement on a file.\n<p>Parameters\n<p>path&lt;String&gt; &mdash; path of the file to be changed ...\n"],["guard_already_tagged","Bundler::GemHelper","Bundler/GemHelper.html#method-i-guard_already_tagged","()",""],["guard_clean","Bundler::GemHelper","Bundler/GemHelper.html#method-i-guard_clean","()",""],["handle_argument_error?","Thor::Task","Thor/Task.html#method-i-handle_argument_error-3F","(instance, error, caller)",""],["handle_no_method_error?","Thor::Task","Thor/Task.html#method-i-handle_no_method_error-3F","(instance, error, caller)",""],["hash","Bundler::DepProxy","Bundler/DepProxy.html#method-i-hash","()",""],["hash","Bundler::Source::Path","Bundler/Source/Path.html#method-i-hash","()",""],["hash","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-hash","()",""],["hash","Gem::Platform","Gem/Platform.html#method-i-hash","()",""],["help","Bundler::CLI","Bundler/CLI.html#method-i-help","(cli = nil)",""],["help","Thor","Thor.html#method-i-help","(task = nil, subcommand = false)",""],["help","Thor","Thor.html#method-c-help","(shell, subcommand = false)","<p>Prints help information for this class.\n<p>Parameters\n<p>shell&lt;Thor::Shell&gt;\n"],["help","Thor::Group","Thor/Group.html#method-c-help","(shell)","<p>Prints help information.\n<p>Options\n<p>short &mdash; When true, shows only usage.\n"],["hidden?","Thor::HiddenTask","Thor/HiddenTask.html#method-i-hidden-3F","()",""],["hidden?","Thor::Task","Thor/Task.html#method-i-hidden-3F","()",""],["home","Bundler","Bundler.html#method-c-home","()",""],["in_bundle?","Bundler::SharedHelpers","Bundler/SharedHelpers.html#method-i-in_bundle-3F","()",""],["in_root","Thor::Actions","Thor/Actions.html#method-i-in_root","()","<p>Goes to the root and execute the given block.\n"],["included","Thor::RakeCompat","Thor/RakeCompat.html#method-c-included","(base)",""],["index","Bundler::Definition","Bundler/Definition.html#method-i-index","()",""],["index","Bundler::Environment","Bundler/Environment.html#method-i-index","()","<p>TODO: Remove this method. It's used in cli.rb still\n"],["inflate","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-inflate","(obj)",""],["info","Bundler::UI","Bundler/UI.html#method-i-info","(message)",""],["info","Bundler::UI::Shell","Bundler/UI/Shell.html#method-i-info","(msg)",""],["inherited","Thor::Base::ClassMethods","Thor/Base/ClassMethods.html#method-i-inherited","(klass)","<p>Everytime someone inherits from a Thor class, register the klass and file\ninto baseclass.\n"],["init","Bundler::CLI","Bundler/CLI.html#method-i-init","()",""],["initialize_copy","Bundler::Index","Bundler/Index.html#method-i-initialize_copy","(o)",""],["initialize_copy","Bundler::Resolver::SpecGroup","Bundler/Resolver/SpecGroup.html#method-i-initialize_copy","(o)",""],["inject_into_class","Thor::Actions","Thor/Actions.html#method-i-inject_into_class","(path, klass, *args, &block)","<p>Injects text right after the class definition. Since it depends on\ninsert_into_file, it's reversible. ...\n"],["inject_into_file","Thor::Actions","Thor/Actions.html#method-i-inject_into_file","(destination, *args, &block)",""],["insert_into_file","Thor::Actions","Thor/Actions.html#method-i-insert_into_file","(destination, *args, &block)","<p>Injects the given content into a file. Different from gsub_file, this\nmethod is reversible.\n<p>Parameters ...\n"],["inside","Thor::Actions","Thor/Actions.html#method-i-inside","(dir='', config={}, &block)","<p>Do something in the root or on a provided subfolder. If a relative path is\ngiven it's referenced from ...\n"],["inspect","Bundler::Environment","Bundler/Environment.html#method-i-inspect","()",""],["install","Bundler::CLI","Bundler/CLI.html#method-i-install","(path = nil)",""],["install","Bundler::GemHelper","Bundler/GemHelper.html#method-i-install","()",""],["install","Bundler::Installer","Bundler/Installer.html#method-c-install","(root, definition, options = {})",""],["install","Bundler::Source::Git","Bundler/Source/Git.html#method-i-install","(spec)",""],["install","Bundler::Source::Path","Bundler/Source/Path.html#method-i-install","(spec)",""],["install","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-install","(spec)",""],["install_gem","Bundler::GemHelper","Bundler/GemHelper.html#method-i-install_gem","()",""],["install_path","Bundler","Bundler.html#method-c-install_path","()",""],["install_tasks","Bundler::GemHelper","Bundler/GemHelper.html#method-c-install_tasks","(opts = {})",""],["invoke","Thor::Group","Thor/Group.html#method-c-invoke","(*names, &block)","<p>Invoke the given namespace or class given. It adds an instance method that\nwill invoke the klass and ...\n"],["invoke","Thor::Invocation","Thor/Invocation.html#method-i-invoke","(name=nil, *args)","<p>Receives a name and invokes it. The name can be a string (either \"task\" or\n\"namespace:task\"), ...\n"],["invoke_from_option","Thor::Group","Thor/Group.html#method-c-invoke_from_option","(*names, &block)","<p>Invoke a thor class based on the value supplied by the user to the given\noption named \"name\". ...\n"],["invoke_with_padding","Thor::Invocation","Thor/Invocation.html#method-i-invoke_with_padding","(*args)","<p>Invokes using shell padding.\n"],["link_file","Thor::Actions","Thor/Actions.html#method-i-link_file","(source, *args, &block)","<p>Links the file from the relative source to the relative destination. If the\ndestination is not given ...\n"],["load","Bundler","Bundler.html#method-c-load","()",""],["load_gemspec","Bundler","Bundler.html#method-c-load_gemspec","(file)",""],["load_paths","Gem::Specification","Gem/Specification.html#method-i-load_paths","()",""],["load_spec_files","Bundler::Source::Git","Bundler/Source/Git.html#method-i-load_spec_files","()",""],["load_spec_files","Bundler::Source::Path","Bundler/Source/Path.html#method-i-load_spec_files","()",""],["load_thorfile","Thor::Util","Thor/Util.html#method-c-load_thorfile","(path, content=nil, debug=false)","<p>Receives a path and load the thor file in the path. The file is evaluated\ninside the sandbox to avoid ...\n"],["loaded_from","Gem::Specification","Gem/Specification.html#method-i-loaded_from","()",""],["loaded_specs","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-loaded_specs","(name)",""],["local_specs","Bundler::Source::Path","Bundler/Source/Path.html#method-i-local_specs","()",""],["locations","Bundler::Settings","Bundler/Settings.html#method-i-locations","(key)",""],["lock","Bundler::CLI","Bundler/CLI.html#method-i-lock","()",""],["lock","Bundler::Definition","Bundler/Definition.html#method-i-lock","(file)",""],["lock","Bundler::Environment","Bundler/Environment.html#method-i-lock","()",""],["long_desc","Thor","Thor.html#method-c-long_desc","(long_description, options={})","<p>Defines the long description of the next task.\n<p>Parameters\n<p>long description&lt;String&gt;\n"],["map","Thor","Thor.html#method-c-map","(mappings=nil)","<p>Maps an input to a task. If you define:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">map</span> <span class=\"ruby-string\">&quot;-T&quot;</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-string\">&quot;list&quot;</span>\n</pre>\n<p>Running:\n"],["mark_loaded","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-mark_loaded","(spec)",""],["marshal_spec_dir","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-marshal_spec_dir","()",""],["match_platform","Bundler::MatchPlatform","Bundler/MatchPlatform.html#method-i-match_platform","(p)",""],["matches_spec?","Gem::Dependency","Gem/Dependency.html#method-i-matches_spec-3F","(spec)","<p>Backport of performance enhancement added to Rubygems 1.4\n"],["materialize","Bundler::SpecSet","Bundler/SpecSet.html#method-i-materialize","(deps, missing_specs = nil)",""],["merge","Bundler::SpecSet","Bundler/SpecSet.html#method-i-merge","(set)",""],["merge_remotes","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-merge_remotes","(source)",""],["method_added","Thor::Base::ClassMethods","Thor/Base/ClassMethods.html#method-i-method_added","(meth)","<p>Fire this callback whenever a method is added. Added methods are tracked as\ntasks by invoking the create_task ...\n"],["method_option","Thor","Thor.html#method-c-method_option","(name, options={})","<p>Adds an option to the set of method options. If :for is given as option, it\nallows you to change the ...\n"],["method_options","Thor","Thor.html#method-c-method_options","(options=nil)","<p>Declares the options for the next task to be declared.\n<p>Parameters\n<p>Hash[Symbol =&gt; Object] &mdash; The hash key ...\n"],["missing_specs","Bundler::Definition","Bundler/Definition.html#method-i-missing_specs","()",""],["mkdir_p","Bundler","Bundler.html#method-c-mkdir_p","(path)",""],["mute","Thor::Shell::Basic","Thor/Shell/Basic.html#method-i-mute","()","<p>Mute everything that's inside given block\n"],["mute?","Thor::Shell::Basic","Thor/Shell/Basic.html#method-i-mute-3F","()","<p>Check if base is muted\n"],["name","Bundler::GemHelper","Bundler/GemHelper.html#method-i-name","()",""],["name","Bundler::Resolver::SpecGroup","Bundler/Resolver/SpecGroup.html#method-i-name","()",""],["name","Bundler::Source::Git","Bundler/Source/Git.html#method-i-name","()",""],["name","Bundler::Source::Path","Bundler/Source/Path.html#method-i-name","()",""],["name","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-name","()",""],["namespace","Thor::Base::ClassMethods","Thor/Base/ClassMethods.html#method-i-namespace","(name=nil)","<p>Sets the namespace for the Thor or Thor::Group class. By default the\nnamespace is retrieved from the ...\n"],["namespace_from_thor_class","Thor::Util","Thor/Util.html#method-c-namespace_from_thor_class","(constant)","<p>Receives a constant and converts it to a Thor namespace. Since Thor tasks\ncan be added to a sandbox, ...\n"],["namespaces_in_content","Thor::Util","Thor/Util.html#method-c-namespaces_in_content","(contents, file=__FILE__)","<p>Given the contents, evaluate it inside the sandbox and returns the\nnamespaces defined in the sandbox. ...\n"],["new","Bundler::CLI","Bundler/CLI.html#method-c-new","(*)",""],["new","Bundler::Definition","Bundler/Definition.html#method-c-new","(lockfile, dependencies, sources, unlock)","<p>How does the new system work?\n<p>\n<p>Load information from Gemfile and Lockfile\n"],["new","Bundler::DepProxy","Bundler/DepProxy.html#method-c-new","(dep, platform)",""],["new","Bundler::Dependency","Bundler/Dependency.html#method-c-new","(name, version, options = {}, &blk)",""],["new","Bundler::Dsl","Bundler/Dsl.html#method-c-new","()",""],["new","Bundler::Environment","Bundler/Environment.html#method-c-new","(root, definition)",""],["new","Bundler::GemHelper","Bundler/GemHelper.html#method-c-new","(base, name = nil)",""],["new","Bundler::Graph","Bundler/Graph.html#method-c-new","(env)",""],["new","Bundler::GraphNode","Bundler/GraphNode.html#method-c-new","(name, version)",""],["new","Bundler::Index","Bundler/Index.html#method-c-new","()",""],["new","Bundler::LazySpecification","Bundler/LazySpecification.html#method-c-new","(name, version, platform, source = nil)",""],["new","Bundler::LockfileParser","Bundler/LockfileParser.html#method-c-new","(lockfile)",""],["new","Bundler::RemoteSpecification","Bundler/RemoteSpecification.html#method-c-new","(name, version, platform, source_uri)",""],["new","Bundler::Resolver","Bundler/Resolver.html#method-c-new","(index, source_requirements, base)",""],["new","Bundler::Resolver::SpecGroup","Bundler/Resolver/SpecGroup.html#method-c-new","(a)",""],["new","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-c-new","()",""],["new","Bundler::RubygemsIntegration::Ancient","Bundler/RubygemsIntegration/Ancient.html#method-c-new","()",""],["new","Bundler::Settings","Bundler/Settings.html#method-c-new","(root)",""],["new","Bundler::Source::Git","Bundler/Source/Git.html#method-c-new","(options)",""],["new","Bundler::Source::Path","Bundler/Source/Path.html#method-c-new","(options)",""],["new","Bundler::Source::Path::Installer","Bundler/Source/Path/Installer.html#method-c-new","(spec, options = {})",""],["new","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-c-new","(options = {})",""],["new","Bundler::SpecSet","Bundler/SpecSet.html#method-c-new","(specs)",""],["new","Bundler::UI::RGProxy","Bundler/UI/RGProxy.html#method-c-new","(ui)",""],["new","Bundler::UI::Shell","Bundler/UI/Shell.html#method-c-new","(shell)",""],["new","Bundler::VersionConflict","Bundler/VersionConflict.html#method-c-new","(conflicts, msg = nil)",""],["new","Thor::Actions","Thor/Actions.html#method-c-new","(args=[], options={}, config={})","<p>Extends initializer to add more configuration options.\n<p>Configuration\n<p>behavior&lt;Symbol&gt; &mdash; The actions ...\n"],["new","Thor::Base","Thor/Base.html#method-c-new","(args=[], options={}, config={})","<p>It receives arguments in an Array and two hashes, one for options and other\nfor configuration.\n<p>Notice ...\n"],["new","Thor::DynamicTask","Thor/DynamicTask.html#method-c-new","(name, options=nil)",""],["new","Thor::Shell","Thor/Shell.html#method-c-new","(args=[], options={}, config={})","<p>Add shell to initialize config values.\n<p>Configuration\n<p>shell&lt;Object&gt; &mdash; An instance of the shell to be ...\n"],["new","Thor::Task","Thor/Task.html#method-c-new","(name, description, long_description, usage, options=nil)",""],["new_platform?","Bundler::Definition","Bundler/Definition.html#method-i-new_platform-3F","()",""],["new_specs","Bundler::Definition","Bundler/Definition.html#method-i-new_specs","()",""],["no?","Thor::Shell::Basic","Thor/Shell/Basic.html#method-i-no-3F","(statement, color=nil)","<p>Make a question the to user and returns true if the user replies \"n\" or\n\"no\".\n"],["no_sources?","Bundler::Definition","Bundler/Definition.html#method-i-no_sources-3F","()",""],["no_tasks","Thor::Base::ClassMethods","Thor/Base/ClassMethods.html#method-i-no_tasks","()","<p>All methods defined inside the given block are not added as tasks.\n<p>So you can do:\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">MyScript</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">Thor</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["nodes","Bundler::Graph","Bundler/Graph.html#method-i-nodes","()",""],["nondevelopment_dependencies","Gem::Specification","Gem/Specification.html#method-i-nondevelopment_dependencies","()",""],["none?","Gem::Requirement","Gem/Requirement.html#method-i-none-3F","()","<p>Backport of performance enhancement added to Rubygems 1.4\n"],["not_debugging?","Thor::Task","Thor/Task.html#method-i-not_debugging-3F","(instance)",""],["open","Bundler::CLI","Bundler/CLI.html#method-i-open","(name)",""],["options","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-options","()",""],["package","Bundler::CLI","Bundler/CLI.html#method-i-package","()",""],["padding=","Thor::Shell::Basic","Thor/Shell/Basic.html#method-i-padding-3D","(value)","<p>Sets the output padding, not allowing less than zero values.\n"],["path","Bundler::Dsl","Bundler/Dsl.html#method-i-path","(path, options = {}, source_options = {}, &blk)",""],["path","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-path","(obj)",""],["path","Bundler::Settings","Bundler/Settings.html#method-i-path","()","<p>@local_config should be prioritized over ENV\n"],["path","Bundler::Source::Git","Bundler/Source/Git.html#method-i-path","()",""],["perform_git_push","Bundler::GemHelper","Bundler/GemHelper.html#method-i-perform_git_push","(options = '')",""],["platform","Bundler::Dsl","Bundler/Dsl.html#method-i-platform","(*platforms)",""],["platforms","Bundler::Dsl","Bundler/Dsl.html#method-i-platforms","(*platforms)",""],["platforms","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-platforms","()",""],["prepend_file","Thor::Actions","Thor/Actions.html#method-i-prepend_file","(path, *args, &block)",""],["prepend_to_file","Thor::Actions","Thor/Actions.html#method-i-prepend_to_file","(path, *args, &block)","<p>Prepend text to a file. Since it depends on insert_into_file, it's\nreversible.\n<p>Parameters\n<p>path&lt;String&gt; ... &mdash; "],["preserve_paths","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-preserve_paths","()",""],["preserve_paths","Bundler::RubygemsIntegration::AlmostModern","Bundler/RubygemsIntegration/AlmostModern.html#method-i-preserve_paths","()","<p>Rubygems [&gt;= 1.8.0, &lt; 1.8.5] has a bug that changes Gem.dir whenever\nyou call Gem::Installer#install ...\n"],["pretty_values_for","Bundler::Settings","Bundler/Settings.html#method-i-pretty_values_for","(exposed_key)",""],["print_options","Thor::Base::ClassMethods","Thor/Base/ClassMethods.html#method-i-print_options","(shell, options, group_name=nil)","<p>Receives a set of options and print them.\n"],["print_table","Thor::Shell::Basic","Thor/Shell/Basic.html#method-i-print_table","(table, options={})","<p>Prints a table.\n<p>Parameters\n<p>Array[Array[String, String, ...]]\n"],["print_wrapped","Thor::Shell::Basic","Thor/Shell/Basic.html#method-i-print_wrapped","(message, options={})","<p>Prints a long string, word-wrapping the text to the current width of the\nterminal display. Ideal for ...\n"],["printable_tasks","Thor","Thor.html#method-c-printable_tasks","(all = true, subcommand = false)","<p>Returns tasks ready to be printed.\n"],["printable_tasks","Thor::Group","Thor/Group.html#method-c-printable_tasks","(*)","<p>Returns tasks ready to be printed.\n"],["prune_cache","Bundler::Runtime","Bundler/Runtime.html#method-i-prune_cache","()",""],["public_task","Thor::Base::ClassMethods","Thor/Base/ClassMethods.html#method-i-public_task","(*names)","<p>Allows to use private methods from parent in child classes as tasks.\n<p>Paremeters\n\n<pre>names&lt;Array&gt;:: Method names ...</pre>\n"],["rake_classes","Thor::RakeCompat","Thor/RakeCompat.html#method-c-rake_classes","()",""],["read_binary","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-read_binary","(path)",""],["read_file","Bundler","Bundler.html#method-c-read_file","(file)",""],["register","Thor","Thor.html#method-c-register","(klass, subcommand_name, usage, description, options={})","<p>Registers another Thor subclass as a command.\n<p>Parameters\n<p>klass&lt;Class&gt; &mdash; Thor subclass to register\n"],["relative_to_original_destination_root","Thor::Actions","Thor/Actions.html#method-i-relative_to_original_destination_root","(path, remove_dot=true)","<p>Returns the given path relative to the absolute root (ie, root where the\nscript started).\n"],["release_gem","Bundler::GemHelper","Bundler/GemHelper.html#method-i-release_gem","()",""],["remote!","Bundler::Source::Path","Bundler/Source/Path.html#method-i-remote-21","()",""],["remote!","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-remote-21","()",""],["remove_argument","Thor::Base::ClassMethods","Thor/Base/ClassMethods.html#method-i-remove_argument","(*names)","<p>Removes a previous defined argument. If :undefine is given, undefine\naccessors as well.\n<p>Paremeters\n<p>names&lt;Array&gt; ... &mdash; "],["remove_class_option","Thor::Base::ClassMethods","Thor/Base/ClassMethods.html#method-i-remove_class_option","(*names)","<p>Removes a previous defined class option.\n<p>Paremeters\n<p>names&lt;Array&gt; &mdash; Class options to be removed\n"],["remove_dir","Thor::Actions","Thor/Actions.html#method-i-remove_dir","(path, config={})",""],["remove_file","Thor::Actions","Thor/Actions.html#method-i-remove_file","(path, config={})","<p>Removes a file at the given location.\n<p>Parameters\n<p>path&lt;String&gt; &mdash; path of the file to be changed\n"],["remove_invocation","Thor::Group","Thor/Group.html#method-c-remove_invocation","(*names)","<p>Remove a previously added invocation.\n<p>Examples\n\n<pre>remove_invocation :test_framework</pre>\n"],["remove_task","Thor::Base::ClassMethods","Thor/Base/ClassMethods.html#method-i-remove_task","(*names)","<p>Removes a given task from this Thor class. This is usually done if you are\ninheriting from another class ...\n"],["removed_specs","Bundler::Definition","Bundler/Definition.html#method-i-removed_specs","()",""],["replace_bin_path","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-replace_bin_path","(specs)","<p>Used to make bin stubs that are not created by bundler work under bundler.\nThe new Gem.bin_path only ...\n"],["replace_entrypoints","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-replace_entrypoints","(specs)","<p>Replace or hook into Rubygems to provide a bundlerized view of the world.\n"],["replace_gem","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-replace_gem","(specs)",""],["replace_refresh","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-replace_refresh","()","<p>Because Bundler has a static view of what specs are available, we don't\n#reflesh, so stub it out.\n"],["requested_specs","Bundler::Definition","Bundler/Definition.html#method-i-requested_specs","()",""],["requested_specs","Bundler::Environment","Bundler/Environment.html#method-i-requested_specs","()",""],["require","Bundler","Bundler.html#method-c-require","(*groups)",""],["require","Bundler::Runtime","Bundler/Runtime.html#method-i-require","(*groups)",""],["required_by","Gem::Dependency","Gem/Dependency.html#method-i-required_by","()",""],["required_by","Gem::Specification","Gem/Specification.html#method-i-required_by","()",""],["required_options","Thor::Task","Thor/Task.html#method-i-required_options","()",""],["requirement","Gem::Dependency","Gem/Dependency.html#method-i-requirement","()",""],["requires_sudo?","Bundler","Bundler.html#method-c-requires_sudo-3F","()",""],["resolve","Bundler::Definition","Bundler/Definition.html#method-i-resolve","()",""],["resolve","Bundler::Resolver","Bundler/Resolver.html#method-c-resolve","(requirements, index, source_requirements = {}, base = [])","<p>Figures out the best possible configuration of gems that satisfies the list\nof passed dependencies and ...\n"],["resolve","Bundler::Resolver","Bundler/Resolver.html#method-i-resolve","(reqs, activated)",""],["resolve_remotely!","Bundler::Definition","Bundler/Definition.html#method-i-resolve_remotely-21","()",""],["resolve_requirement","Bundler::Resolver","Bundler/Resolver.html#method-i-resolve_requirement","(spec_group, requirement, reqs, activated)",""],["resolve_with_cache!","Bundler::Definition","Bundler/Definition.html#method-i-resolve_with_cache-21","()",""],["respond_to?","Bundler::LazySpecification","Bundler/LazySpecification.html#method-i-respond_to-3F","(*args)",""],["reverse_rubygems_kernel_mixin","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-reverse_rubygems_kernel_mixin","()",""],["rg_full_gem_path","Gem::Specification","Gem/Specification.html#method-i-rg_full_gem_path","()",""],["rg_loaded_from","Gem::Specification","Gem/Specification.html#method-i-rg_loaded_from","()",""],["root","Bundler","Bundler.html#method-c-root","()",""],["ruby_command","Thor::Util","Thor/Util.html#method-c-ruby_command","()","<p>Return the path to the ruby interpreter taking into account multiple\ninstallations and windows extensions. ...\n"],["ruby_engine","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-ruby_engine","()",""],["ruby_scope","Bundler","Bundler.html#method-c-ruby_scope","()",""],["rubygem_push","Bundler::GemHelper","Bundler/GemHelper.html#method-i-rubygem_push","(path)",""],["rubygems_index","Bundler::Definition","Bundler/Definition.html#method-i-rubygems_index","()",""],["run","Bundler::Installer","Bundler/Installer.html#method-i-run","(options)",""],["run","Thor::Actions","Thor/Actions.html#method-i-run","(command, config={})","<p>Executes a command returning the contents of the command.\n<p>Parameters\n<p>command&lt;String&gt; &mdash; the command ...\n"],["run","Thor::DynamicTask","Thor/DynamicTask.html#method-i-run","(instance, args=[])",""],["run","Thor::Task","Thor/Task.html#method-i-run","(instance, args=[])","<p>By default, a task invokes a method in the thor class. You can change this\nimplementation to create custom ...\n"],["run_ruby_script","Thor::Actions","Thor/Actions.html#method-i-run_ruby_script","(command, config={})","<p>Executes a ruby script (taking into account WIN32 platform quirks).\n<p>Parameters\n<p>command&lt;String&gt; &mdash; the ...\n"],["satisfies?","Bundler::LazySpecification","Bundler/LazySpecification.html#method-i-satisfies-3F","(dependency)",""],["say","Bundler::UI::RGProxy","Bundler/UI/RGProxy.html#method-i-say","(message)",""],["say","Thor::Shell::Basic","Thor/Shell/Basic.html#method-i-say","(message=\"\", color=nil, force_new_line=(message.to_s !~ /( |\\t)$/))","<p>Say (print) something to the user. If the sentence ends with a whitespace\nor tab character, a new line ...\n"],["say_status","Thor::Shell::Basic","Thor/Shell/Basic.html#method-i-say_status","(status, message, log_status=true)","<p>Say a status with the given color and appends the message. Since this\nmethod is used frequently by actions, ...\n"],["search","Bundler::Index","Bundler/Index.html#method-i-search","(query)",""],["search","Bundler::Resolver","Bundler/Resolver.html#method-i-search","(dep)",""],["search_for_all_platforms","Bundler::Index","Bundler/Index.html#method-i-search_for_all_platforms","(dependency, base = [])",""],["set_color","Thor::Shell::Color","Thor/Shell/Color.html#method-i-set_color","(string, color, bold=false)","<p>Set color by using a string or one of the defined constants. If a third\noption is set to true, it also ...\n"],["set_color","Thor::Shell::HTML","Thor/Shell/HTML.html#method-i-set_color","(string, color, bold=false)","<p>Set color by using a string or one of the defined constants. If a third\noption is set to true, it also ...\n"],["set_global","Bundler::Settings","Bundler/Settings.html#method-i-set_global","(key, value)",""],["settings","Bundler","Bundler.html#method-c-settings","()",""],["setup","Bundler","Bundler.html#method-c-setup","(*groups)",""],["setup","Bundler::Runtime","Bundler/Runtime.html#method-i-setup","(*groups)",""],["sh","Bundler::GemHelper","Bundler/GemHelper.html#method-i-sh","(cmd, &block)",""],["sh_with_code","Bundler::GemHelper","Bundler/GemHelper.html#method-i-sh_with_code","(cmd, &block)",""],["shell","Thor::Base","Thor/Base.html#method-c-shell","()","<p>Returns the shell used in all Thor classes. If you are in a Unix platform\nit will use a colored log, ...\n"],["shell","Thor::Shell","Thor/Shell.html#method-i-shell","()","<p>Holds the shell for the given Thor instance. If no shell is given, it gets\na default shell from Thor::Base.shell ...\n"],["shell=","Thor::Base","Thor/Base.html#method-c-shell-3D","(klass)","<p>Sets the shell used in all Thor classes.\n"],["shell=","Thor::Shell","Thor/Shell.html#method-i-shell-3D","(shell)","<p>Sets the shell for this thor class.\n"],["should_include?","Bundler::Dependency","Bundler/Dependency.html#method-i-should_include-3F","()",""],["show","Bundler::CLI","Bundler/CLI.html#method-i-show","(gem_name = nil)",""],["skip_during","Bundler::RubygemsIntegration::Deprecate","Bundler/RubygemsIntegration/Deprecate.html#method-i-skip_during","()",""],["snake_case","Thor::Util","Thor/Util.html#method-c-snake_case","(str)","<p>Receives a string and convert it to snake case. SnakeCase returns\nsnake_case.\n<p>Parameters\n<p>String\n"],["sort!","Bundler::SpecSet","Bundler/SpecSet.html#method-i-sort-21","()",""],["source","Bundler::Dsl","Bundler/Dsl.html#method-i-source","(source, options = {})",""],["source","Bundler::Resolver::SpecGroup","Bundler/Resolver/SpecGroup.html#method-i-source","()",""],["source_paths","Thor::Actions","Thor/Actions.html#method-i-source_paths","()","<p>Holds source paths in instance so they can be manipulated.\n"],["source_paths","Thor::Actions::ClassMethods","Thor/Actions/ClassMethods.html#method-i-source_paths","()","<p>Hold source paths for one Thor instance. source_paths_for_search is the\nmethod responsible to gather ...\n"],["source_paths_for_search","Thor::Actions::ClassMethods","Thor/Actions/ClassMethods.html#method-i-source_paths_for_search","()","<p>Returns the source paths in the following order:\n\n<pre class=\"ruby\"><span class=\"ruby-value\">1</span>) <span class=\"ruby-constant\">This</span> <span class=\"ruby-keyword\">class</span> <span class=\"ruby-identifier\">source</span> <span class=\"ruby-identifier\">paths</span>\n<span class=\"ruby-value\">2</span>) <span class=\"ruby-constant\">Source</span> <span class=\"ruby-identifier\">root</span>\n<span class=\"ruby-value\">3</span>) <span class=\"ruby-constant\">Parents</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["source_root","Bundler::CLI","Bundler/CLI.html#method-c-source_root","()",""],["source_root","Thor::Actions::ClassMethods","Thor/Actions/ClassMethods.html#method-i-source_root","(path=nil)","<p>Stores and return the source root for this class\n"],["sources","Bundler::Index","Bundler/Index.html#method-i-sources","()",""],["sources","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-sources","()",""],["sources=","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-sources-3D","(val)",""],["spec_from_gem","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-spec_from_gem","(path)",""],["specs","Bundler::Definition","Bundler/Definition.html#method-i-specs","()",""],["specs","Bundler::Environment","Bundler/Environment.html#method-i-specs","()",""],["specs","Bundler::Source::Git","Bundler/Source/Git.html#method-i-specs","()","<p>TODO: actually cache git specs\n"],["specs","Bundler::Source::Path","Bundler/Source/Path.html#method-i-specs","()",""],["specs","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-specs","()",""],["specs_for","Bundler::Definition","Bundler/Definition.html#method-i-specs_for","(groups)",""],["specs_path","Bundler","Bundler.html#method-c-specs_path","()",""],["start","Bundler::Resolver","Bundler/Resolver.html#method-i-start","(reqs)",""],["start","Thor::Base::ClassMethods","Thor/Base/ClassMethods.html#method-i-start","(given_args=ARGV, config={})","<p>Parses the task and options from the given args, instantiate the class and\ninvoke the task. This method ...\n"],["status_code","Bundler::BundlerError","Bundler/BundlerError.html#method-c-status_code","(code)",""],["stderr","Thor::Shell::Basic","Thor/Shell/Basic.html#method-i-stderr","()",""],["stdin","Thor::Shell::Basic","Thor/Shell/Basic.html#method-i-stdin","()",""],["stdout","Thor::Shell::Basic","Thor/Shell/Basic.html#method-i-stdout","()",""],["stub_rubygems","Bundler::RubygemsIntegration::Legacy","Bundler/RubygemsIntegration/Legacy.html#method-i-stub_rubygems","(specs)",""],["stub_rubygems","Bundler::RubygemsIntegration::Modern","Bundler/RubygemsIntegration/Modern.html#method-i-stub_rubygems","(specs)",""],["stub_rubygems","Bundler::RubygemsIntegration::Transitional","Bundler/RubygemsIntegration/Transitional.html#method-i-stub_rubygems","(specs)",""],["stub_source_index137","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-stub_source_index137","(specs)",""],["stub_source_index170","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-stub_source_index170","(specs)",""],["subclass_files","Thor::Base","Thor/Base.html#method-c-subclass_files","()","<p>Returns the files where the subclasses are kept.\n<p>Returns\n<p>Hash[path&lt;String&gt; =&gt; Class]\n"],["subclasses","Thor::Base","Thor/Base.html#method-c-subclasses","()","<p>Returns the classes that inherits from Thor or Thor::Group.\n<p>Returns\n<p>Array\n"],["subcommand","Thor","Thor.html#method-c-subcommand","(subcommand, subcommand_class)",""],["subcommand_help","Thor","Thor.html#method-c-subcommand_help","(cmd)",""],["subcommands","Thor","Thor.html#method-c-subcommands","()",""],["successify","Bundler::Resolver","Bundler/Resolver.html#method-i-successify","(activated)",""],["sudo","Bundler","Bundler.html#method-c-sudo","(str)",""],["sudo","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-sudo","(str)",""],["tag_version","Bundler::GemHelper","Bundler/GemHelper.html#method-i-tag_version","()",""],["task_help","Thor","Thor.html#method-c-task_help","(shell, task_name)","<p>Prints help information for the given task.\n<p>Parameters\n<p>shell&lt;Thor::Shell&gt; task_name&lt;String&gt; ...\n"],["tasks","Thor::Base::ClassMethods","Thor/Base/ClassMethods.html#method-i-tasks","()","<p>Returns the tasks for this Thor class.\n<p>Returns\n<p>OrderedHash &mdash; An ordered hash with tasks names as keys and ...\n"],["template","Thor::Actions","Thor/Actions.html#method-i-template","(source, *args, &block)","<p>Gets an ERB template at the relative source, executes it and makes a copy\nat the relative destination. ...\n"],["thor","Thor::Actions","Thor/Actions.html#method-i-thor","(task, *args)","<p>Run a thor command. A hash of options can be given and it's converted to\nswitches.\n<p>Parameters\n<p>task&lt;String&gt; ... &mdash; "],["thor_classes_in","Thor::Util","Thor/Util.html#method-c-thor_classes_in","(klass)","<p>Returns the thor classes declared inside the given class.\n"],["thor_root","Thor::Util","Thor/Util.html#method-c-thor_root","()","<p>Returns the root where thor files are located, dependending on the OS.\n"],["thor_root_glob","Thor::Util","Thor/Util.html#method-c-thor_root_glob","()","<p>Returns the files in the thor root. On Windows thor_root will be something\nlike this:\n\n<pre>C:\\Documents and ...</pre>\n"],["tmp","Bundler","Bundler.html#method-c-tmp","()",""],["to_a","Bundler::SpecSet","Bundler/SpecSet.html#method-i-to_a","()",""],["to_definition","Bundler::Dsl","Bundler/Dsl.html#method-i-to_definition","(lockfile, unlock)",""],["to_gemfile","Gem::Specification","Gem/Specification.html#method-i-to_gemfile","(path = nil)",""],["to_hash","Bundler::SpecSet","Bundler/SpecSet.html#method-i-to_hash","()",""],["to_lock","Bundler::Definition","Bundler/Definition.html#method-i-to_lock","()",""],["to_lock","Bundler::Dependency","Bundler/Dependency.html#method-i-to_lock","()",""],["to_lock","Bundler::LazySpecification","Bundler/LazySpecification.html#method-i-to_lock","()",""],["to_lock","Bundler::Source::Git","Bundler/Source/Git.html#method-i-to_lock","()",""],["to_lock","Bundler::Source::Path","Bundler/Source/Path.html#method-i-to_lock","()",""],["to_lock","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-to_lock","()",""],["to_lock","Gem::Dependency","Gem/Dependency.html#method-i-to_lock","()",""],["to_s","Bundler::DepProxy","Bundler/DepProxy.html#method-i-to_s","()",""],["to_s","Bundler::LazySpecification","Bundler/LazySpecification.html#method-i-to_s","()",""],["to_s","Bundler::Resolver::SpecGroup","Bundler/Resolver/SpecGroup.html#method-i-to_s","()",""],["to_s","Bundler::Source::Git","Bundler/Source/Git.html#method-i-to_s","()",""],["to_s","Bundler::Source::Path","Bundler/Source/Path.html#method-i-to_s","()",""],["to_s","Bundler::Source::Rubygems","Bundler/Source/Rubygems.html#method-i-to_s","()",""],["to_specs","Bundler::Resolver::SpecGroup","Bundler/Resolver/SpecGroup.html#method-i-to_specs","()",""],["to_yaml_properties","Gem::Dependency","Gem/Dependency.html#method-i-to_yaml_properties","()",""],["type","Bundler::DepProxy","Bundler/DepProxy.html#method-i-type","()",""],["ui","Bundler","Bundler.html#method-c-ui","()",""],["ui=","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-ui-3D","(obj)",""],["unlock","Bundler::CLI","Bundler/CLI.html#method-i-unlock","()",""],["unlock!","Bundler::Source::Git","Bundler/Source/Git.html#method-i-unlock-21","()",""],["update","Bundler::CLI","Bundler/CLI.html#method-i-update","(*gems)",""],["update","Bundler::Environment","Bundler/Environment.html#method-i-update","(*gems)",""],["use","Bundler::Index","Bundler/Index.html#method-i-use","(other, override_dupes = false)",""],["user_bundle_path","Bundler","Bundler.html#method-c-user_bundle_path","()",""],["user_home","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-user_home","()",""],["user_home","Thor::Util","Thor/Util.html#method-c-user_home","()",""],["valid_for?","Bundler::SpecSet","Bundler/SpecSet.html#method-i-valid_for-3F","(deps)",""],["version","Bundler::CLI","Bundler/CLI.html#method-i-version","()",""],["version","Bundler::GemHelper","Bundler/GemHelper.html#method-i-version","()",""],["version","Bundler::Resolver::SpecGroup","Bundler/Resolver/SpecGroup.html#method-i-version","()",""],["version_conflict","Bundler::Resolver","Bundler/Resolver.html#method-i-version_conflict","()",""],["version_tag","Bundler::GemHelper","Bundler/GemHelper.html#method-i-version_tag","()",""],["viz","Bundler::CLI","Bundler/CLI.html#method-i-viz","()",""],["viz","Bundler::Graph","Bundler/Graph.html#method-i-viz","(output_file, show_gem_versions = false, show_dependency_requirements = false)",""],["warn","Bundler::UI","Bundler/UI.html#method-i-warn","(message)",""],["warn","Bundler::UI::Shell","Bundler/UI/Shell.html#method-i-warn","(msg)",""],["with_build_args","Bundler::RubygemsIntegration","Bundler/RubygemsIntegration.html#method-i-with_build_args","(args)",""],["with_clean_env","Bundler","Bundler.html#method-c-with_clean_env","()",""],["with_padding","Thor::Shell","Thor/Shell.html#method-i-with_padding","()","<p>Yields the given block with padding.\n"],["without","Bundler::Settings","Bundler/Settings.html#method-i-without","()",""],["without=","Bundler::Settings","Bundler/Settings.html#method-i-without-3D","(array)",""],["yes?","Thor::Shell::Basic","Thor/Shell/Basic.html#method-i-yes-3F","(statement, color=nil)","<p>Make a question the to user and returns true if the user replies \"y\" or\n\"yes\".\n"],["bundle","","lib/bundler/man/bundle.html","","<p>.\" generated with Ronn/v0.7.3 .\" github.com/rtomayko/ronn/tree/0.7.3 . .TH\n\"BUNDLE\" \"1\" ...\n"],["bundle-config","","lib/bundler/man/bundle-config.html","","<p>.\" generated with Ronn/v0.7.3 .\" github.com/rtomayko/ronn/tree/0.7.3 . .TH\n\"BUNDLE-CONFIG\" ...\n"],["bundle-config","","lib/bundler/man/bundle-config_txt.html","","<p>BUNDLE-CONFIG(1)                                             \nBUNDLE-CONFIG(1)\n<p>NAME\n\n<pre>bundle-config - Set ...</pre>\n"],["bundle-exec","","lib/bundler/man/bundle-exec.html","","<p>.\" generated with Ronn/v0.7.3 .\" github.com/rtomayko/ronn/tree/0.7.3 . .TH\n\"BUNDLE-EXEC\" \"1\" ...\n"],["bundle-exec","","lib/bundler/man/bundle-exec_txt.html","","<p>BUNDLE-EXEC(1)                                                 \nBUNDLE-EXEC(1)\n<p>NAME\n\n<pre>bundle-exec - Execute ...</pre>\n"],["bundle-install","","lib/bundler/man/bundle-install.html","",""],["bundle-install","","lib/bundler/man/bundle-install_txt.html","","<p>BUNDLE-INSTALL(1)                                           \nBUNDLE-INSTALL(1)\n<p>NAME\n\n<pre>bundle-install - Install ...</pre>\n"],["bundle-package","","lib/bundler/man/bundle-package.html","","<p>.\" generated with Ronn/v0.7.3 .\" github.com/rtomayko/ronn/tree/0.7.3 . .TH\n\"BUNDLE-PACKAGE\" ...\n"],["bundle-package","","lib/bundler/man/bundle-package_txt.html","","<p>BUNDLE-PACKAGE(1)                                           \nBUNDLE-PACKAGE(1)\n<p>NAME\n\n<pre>bundle-package - Package ...</pre>\n"],["bundle-update","","lib/bundler/man/bundle-update.html","","<p>.\" generated with Ronn/v0.7.3 .\" github.com/rtomayko/ronn/tree/0.7.3 . .TH\n\"BUNDLE-UPDATE\" ...\n"],["bundle-update","","lib/bundler/man/bundle-update_txt.html","","<p>BUNDLE-UPDATE(1)                                             \nBUNDLE-UPDATE(1)\n<p>NAME\n\n<pre>bundle-update - Update ...</pre>\n"],["bundle","","lib/bundler/man/bundle_txt.html","","<p>BUNDLE(1)                                                           \nBUNDLE(1)\n<p>NAME\n\n<pre>bundle - Ruby Dependency ...</pre>\n"],["gemfile.5","","lib/bundler/man/gemfile_5_txt.html","","<p>GEMFILE(5)                                                         \nGEMFILE(5)\n<p>NAME\n\n<pre>Gemfile - A format ...</pre>\n"],["Executable","","lib/bundler/templates/Executable.html","","<p>#!/usr/bin/env &lt;%= RbConfig::CONFIG %&gt; # # This file was generated by\nBundler. # # The application ...\n"],["Gemfile","","lib/bundler/templates/Gemfile.html","","<p># A sample Gemfile source \"rubygems.org\"\n<p># gem \"rails\"\n"]]}}
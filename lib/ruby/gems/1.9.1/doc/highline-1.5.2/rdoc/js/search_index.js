var search_data = {"index":{"searchIndex":["highline","colorscheme","menu","question","noautocompletematch","questionerror","samplecolorscheme","systemextensions","io","kernel","object","string","stringio","getconsolemode()","getconsolescreenbufferinfo()","getstdhandle()","setconsoleecho()","setconsolemode()","[]()","[]=()","agree()","answer_or_default()","ask()","build_responses()","change_case()","choice()","choices()","choose()","color()","color_scheme()","color_scheme=()","convert()","expected_range()","first_answer()","first_answer?()","get_character()","help()","hidden()","in_range?()","include?()","index=()","init_help()","layout=()","list()","load_from_hash()","new()","new()","new()","new()","new()","options()","or_ask()","output_cols()","output_rows()","page_at=()","raw_no_echo_mode()","remove_whitespace()","restore_mode()","say()","select()","selection()","terminal_size()","to_ary()","to_str()","to_str()","track_eof=()","track_eof?()","update_responses()","use_color=()","use_color?()","using_color_scheme?()","valid_answer?()","wrap_at=()","changelog","install","license","readme","todo"],"longSearchIndex":["highline","highline::colorscheme","highline::menu","highline::question","highline::question::noautocompletematch","highline::questionerror","highline::samplecolorscheme","highline::systemextensions","io","kernel","object","string","stringio","highline::systemextensions#getconsolemode()","highline::systemextensions#getconsolescreenbufferinfo()","highline::systemextensions#getstdhandle()","highline::systemextensions#setconsoleecho()","highline::systemextensions#setconsolemode()","highline::colorscheme#[]()","highline::colorscheme#[]=()","highline#agree()","highline::question#answer_or_default()","highline#ask()","highline::question#build_responses()","highline::question#change_case()","highline::menu#choice()","highline::menu#choices()","highline#choose()","highline#color()","highline::color_scheme()","highline::color_scheme=()","highline::question#convert()","highline::question#expected_range()","highline::question#first_answer()","highline::question#first_answer?()","highline::systemextensions#get_character()","highline::menu#help()","highline::menu#hidden()","highline::question#in_range?()","highline::colorscheme#include?()","highline::menu#index=()","highline::menu#init_help()","highline::menu#layout=()","highline#list()","highline::colorscheme#load_from_hash()","highline::new()","highline::colorscheme::new()","highline::menu::new()","highline::question::new()","highline::samplecolorscheme::new()","highline::menu#options()","object#or_ask()","highline#output_cols()","highline#output_rows()","highline#page_at=()","highline::systemextensions#raw_no_echo_mode()","highline::question#remove_whitespace()","highline::systemextensions#restore_mode()","highline#say()","highline::menu#select()","highline::question#selection()","highline::systemextensions#terminal_size()","highline::menu#to_ary()","highline::menu#to_str()","highline::question#to_str()","highline::track_eof=()","highline::track_eof?()","highline::menu#update_responses()","highline::use_color=()","highline::use_color?()","highline::using_color_scheme?()","highline::question#valid_answer?()","highline#wrap_at=()","","","","",""],"info":[["HighLine","","HighLine.html","","<p>system_extensions.rb\n\n<pre>Created by James Edward Gray II on 2006-06-14.\nCopyright 2006 Gray Productions. All ...</pre>\n"],["HighLine::ColorScheme","","HighLine/ColorScheme.html","","<p>ColorScheme objects encapsulate a named set of colors to be used in the\nHighLine.colors() method call. ...\n"],["HighLine::Menu","","HighLine/Menu.html","","<p>Menu objects encapsulate all the details of a call to HighLine.choose().\nUsing the accessors and Menu.choice() ...\n"],["HighLine::Question","","HighLine/Question.html","","<p>Question objects contain all the details of a single invocation of\nHighLine.ask().  The object is initialized ...\n"],["HighLine::Question::NoAutoCompleteMatch","","HighLine/Question/NoAutoCompleteMatch.html","","<p>An internal HighLine error.  User code does not need to trap this.\n"],["HighLine::QuestionError","","HighLine/QuestionError.html","","<p>An internal HighLine error.  User code does not need to trap this.\n"],["HighLine::SampleColorScheme","","HighLine/SampleColorScheme.html","","<p>A sample ColorScheme.\n"],["HighLine::SystemExtensions","","HighLine/SystemExtensions.html","",""],["IO","","IO.html","",""],["Kernel","","Kernel.html","","<p><code>require &quot;highline/import&quot;</code> adds shortcut methods to\nKernel, making agree(), ask(), choose() ...\n"],["Object","","Object.html","",""],["String","","String.html","","<p>Not a perfect translation, but sufficient for our needs.\n"],["StringIO","","StringIO.html","",""],["GetConsoleMode","HighLine::SystemExtensions","HighLine/SystemExtensions.html#method-i-GetConsoleMode","( console_handle )",""],["GetConsoleScreenBufferInfo","HighLine::SystemExtensions","HighLine/SystemExtensions.html#method-i-GetConsoleScreenBufferInfo","( console_handle )",""],["GetStdHandle","HighLine::SystemExtensions","HighLine/SystemExtensions.html#method-i-GetStdHandle","( handle_type )",""],["SetConsoleEcho","HighLine::SystemExtensions","HighLine/SystemExtensions.html#method-i-SetConsoleEcho","( console_handle, on )","<p>windows savvy console echo toggler\n"],["SetConsoleMode","HighLine::SystemExtensions","HighLine/SystemExtensions.html#method-i-SetConsoleMode","( console_handle, mode )",""],["[]","HighLine::ColorScheme","HighLine/ColorScheme.html#method-i-5B-5D","( color_tag )","<p>Allow the scheme to be accessed like a Hash.\n"],["[]=","HighLine::ColorScheme","HighLine/ColorScheme.html#method-i-5B-5D-3D","( color_tag, constants )","<p>Allow the scheme to be set like a Hash.\n"],["agree","HighLine","HighLine.html#method-i-agree","( yes_or_no_question, character = nil )","<p>A shortcut to HighLine.ask() a question that only accepts \"yes\" or \"no\"\nanswers (\"y\" ...\n"],["answer_or_default","HighLine::Question","HighLine/Question.html#method-i-answer_or_default","( answer_string )","<p>Returns the provided <em>answer_string</em> or the default answer for this\nQuestion if a default was set and the ...\n"],["ask","HighLine","HighLine.html#method-i-ask","( question, answer_type = String )","<p>This method is the primary interface for user input.  Just provide a\n<em>question</em> to ask the user, the <em>answer_type</em> ...\n"],["build_responses","HighLine::Question","HighLine/Question.html#method-i-build_responses","( )","<p>Called late in the initialization process to build intelligent responses\nbased on the details of this ...\n"],["change_case","HighLine::Question","HighLine/Question.html#method-i-change_case","( answer_string )","<p>Returns the provided <em>answer_string</em> after changing character case\nby the rules of this Question.  Valid ...\n"],["choice","HighLine::Menu","HighLine/Menu.html#method-i-choice","( name, help = nil, &action )","<p>Adds <em>name</em> to the list of available menu items.  Menu items will be\ndisplayed in the order they are added. ...\n"],["choices","HighLine::Menu","HighLine/Menu.html#method-i-choices","( *names, &action )","<p>A shortcut for multiple calls to the sister method choice().  <strong>Be\nwarned:</strong>  An <em>action</em> set here will apply ...\n"],["choose","HighLine","HighLine.html#method-i-choose","( *items, &details )","<p>This method is HighLine's menu handler.  For simple usage, you can just\npass all the menu items you wish ...\n"],["color","HighLine","HighLine.html#method-i-color","( string, *colors )","<p>This method provides easy access to ANSI color sequences, without the user\nneeding to remember to CLEAR ...\n"],["color_scheme","HighLine","HighLine.html#method-c-color_scheme","()","<p>Returns the current color scheme.\n"],["color_scheme=","HighLine","HighLine.html#method-c-color_scheme-3D","( setting )","<p>Pass ColorScheme to <em>setting</em> to turn set a HighLine color scheme.\n"],["convert","HighLine::Question","HighLine/Question.html#method-i-convert","( answer_string )","<p>Transforms the given <em>answer_string</em> into the expected type for this\nQuestion.  Currently supported conversions ...\n"],["expected_range","HighLine::Question","HighLine/Question.html#method-i-expected_range","( )","<p>Returns a english explination of the current range settings.\n"],["first_answer","HighLine::Question","HighLine/Question.html#method-i-first_answer","( )","<p>Returns <em>first_answer</em>, which will be unset following this call.\n"],["first_answer?","HighLine::Question","HighLine/Question.html#method-i-first_answer-3F","( )","<p>Returns true if <em>first_answer</em> is set.\n"],["get_character","HighLine::SystemExtensions","HighLine/SystemExtensions.html#method-i-get_character","( input = STDIN )","<p>Windows savvy getc().\n"],["help","HighLine::Menu","HighLine/Menu.html#method-i-help","( topic, help )","<p>Used to set help for arbitrary topics.  Use the topic\n<code>&quot;help&quot;</code> to override the default message. ...\n"],["hidden","HighLine::Menu","HighLine/Menu.html#method-i-hidden","( name, help = nil, &action )","<p>Identical to choice(), but the item will not be listed for the user.\n"],["in_range?","HighLine::Question","HighLine/Question.html#method-i-in_range-3F","( answer_object )","<p>Returns <code>true</code> if the <em>answer_object</em> is greater than the\n<em>above</em> attribute, less than the <em>below</em> attribute ...\n"],["include?","HighLine::ColorScheme","HighLine/ColorScheme.html#method-i-include-3F","( color_tag )","<p>Does this color scheme include the given tag name?\n"],["index=","HighLine::Menu","HighLine/Menu.html#method-i-index-3D","( style )","<p>Sets the indexing style for this Menu object.  Indexes are appended to menu\nitems, when displayed in ...\n"],["init_help","HighLine::Menu","HighLine/Menu.html#method-i-init_help","( )","<p>Initializes the help system by adding a <code>:help</code> choice, some\naction code, and the default help listing. ...\n"],["layout=","HighLine::Menu","HighLine/Menu.html#method-i-layout-3D","( new_layout )","<p>Setting a <em>layout</em> with this method also adjusts some other\nattributes of the Menu object, to ideal defaults ...\n"],["list","HighLine","HighLine.html#method-i-list","( items, mode = :rows, option = nil )","<p>This method is a utility for quickly and easily laying out lists.  It can\nbe accessed within ERb replacements ...\n"],["load_from_hash","HighLine::ColorScheme","HighLine/ColorScheme.html#method-i-load_from_hash","( h )","<p>Load multiple colors from key/value pairs.\n"],["new","HighLine","HighLine.html#method-c-new","( input = $stdin, output = $stdout, wrap_at = nil, page_at = nil )","<p>Create an instance of HighLine, connected to the streams <em>input</em> and\n<em>output</em>.\n"],["new","HighLine::ColorScheme","HighLine/ColorScheme.html#method-c-new","( h = nil )","<p>Create an instance of HighLine::ColorScheme. The customization can happen\nas a passed in Hash or via ...\n"],["new","HighLine::Menu","HighLine/Menu.html#method-c-new","( )","<p>Create an instance of HighLine::Menu.  All customization is done through\nthe passed block, which should ...\n"],["new","HighLine::Question","HighLine/Question.html#method-c-new","( question, answer_type )","<p>Create an instance of HighLine::Question.  Expects a <em>question</em> to\nask (can be <code>&quot;&quot;</code>) and an <em>answer_type</em> ...\n"],["new","HighLine::SampleColorScheme","HighLine/SampleColorScheme.html#method-c-new","( h = nil )","<p>Builds the sample scheme with settings for <code>:critical</code>,\n<code>:error</code>, <code>:warning</code>, <code>:notice</code>,\n<code>:info</code>, <code>:debug</code>, <code>:row_even</code> ...\n"],["options","HighLine::Menu","HighLine/Menu.html#method-i-options","( )","<p>This method returns all possible options for auto-completion, based on the\nsettings of <em>index</em> and <em>select_by</em> ...\n"],["or_ask","Object","Object.html#method-i-or_ask","( *args, &details )","<p>Tries this object as a <em>first_answer</em> for a HighLine::Question.  See\nthat attribute for details.\n<p><strong>Warning</strong> ...\n"],["output_cols","HighLine","HighLine.html#method-i-output_cols","()","<p>Returns the number of columns for the console, or a default it they cannot\nbe determined.\n"],["output_rows","HighLine","HighLine.html#method-i-output_rows","()","<p>Returns the number of rows for the console, or a default if they cannot be\ndetermined.\n"],["page_at=","HighLine","HighLine.html#method-i-page_at-3D","( setting )","<p>Set to an integer value to cause HighLine to page output lines over the\nindicated line limit.  When  ...\n"],["raw_no_echo_mode","HighLine::SystemExtensions","HighLine/SystemExtensions.html#method-i-raw_no_echo_mode","()","<p>Switched the input mode to raw and disables echo.\n<p><strong>WARNING</strong>:  This method requires the external \"stty\" ...\n"],["remove_whitespace","HighLine::Question","HighLine/Question.html#method-i-remove_whitespace","( answer_string )","<p>Returns the provided <em>answer_string</em> after processing whitespace by\nthe rules of this Question.  Valid ...\n"],["restore_mode","HighLine::SystemExtensions","HighLine/SystemExtensions.html#method-i-restore_mode","()","<p>Restores a previously saved input mode.\n<p><strong>WARNING</strong>:  This method requires the external \"stty\"\nprogram! ...\n"],["say","HighLine","HighLine.html#method-i-say","( statement )","<p>The basic output method for HighLine objects.  If the provided\n<em>statement</em> ends with a space or tab character, ...\n"],["select","HighLine::Menu","HighLine/Menu.html#method-i-select","( highline_context, selection, details = nil )","<p>This method processes the auto-completed user selection, based on the rules\nfor this Menu object.  If ...\n"],["selection","HighLine::Question","HighLine/Question.html#method-i-selection","( )","<p>Returns an Array of valid answers to this question.  These answers are only\nknown when <em>answer_type</em> is ...\n"],["terminal_size","HighLine::SystemExtensions","HighLine/SystemExtensions.html#method-i-terminal_size","()","<p>A Windows savvy method to fetch the console columns, and rows.\n"],["to_ary","HighLine::Menu","HighLine/Menu.html#method-i-to_ary","( )","<p>Allows Menu objects to pass as Arrays, for use with HighLine.list(). This\nmethod returns all menu items ...\n"],["to_str","HighLine::Menu","HighLine/Menu.html#method-i-to_str","( )","<p>Allows Menu to behave as a String, just like Question.  Returns the\n<em>layout</em> to be rendered, which is used ...\n"],["to_str","HighLine::Question","HighLine/Question.html#method-i-to_str","( )","<p>Stringifies the question to be asked.\n"],["track_eof=","HighLine","HighLine.html#method-c-track_eof-3D","( setting )","<p>Pass <code>false</code> to <em>setting</em> to turn off HighLine's EOF\ntracking.\n"],["track_eof?","HighLine","HighLine.html#method-c-track_eof-3F","()","<p>Returns true if HighLine is currently tracking EOF for input.\n"],["update_responses","HighLine::Menu","HighLine/Menu.html#method-i-update_responses","( )","<p>This method will update the intelligent responses to account for Menu\nspecific differences.  This overrides ...\n"],["use_color=","HighLine","HighLine.html#method-c-use_color-3D","( setting )","<p>Pass <code>false</code> to <em>setting</em> to turn off HighLine's color\nescapes.\n"],["use_color?","HighLine","HighLine.html#method-c-use_color-3F","()","<p>Returns true if HighLine is currently using color escapes.\n"],["using_color_scheme?","HighLine","HighLine.html#method-c-using_color_scheme-3F","()","<p>Returns <code>true</code> if HighLine is currently using a color scheme.\n"],["valid_answer?","HighLine::Question","HighLine/Question.html#method-i-valid_answer-3F","( answer_string )","<p>Returns <code>true</code> if the provided <em>answer_string</em> is\naccepted by the  <em>validate</em> attribute or <code>false</code> if it's\nnot. ...\n"],["wrap_at=","HighLine","HighLine.html#method-i-wrap_at-3D","( setting )","<p>Set to an integer value to cause HighLine to wrap output lines at the\nindicated character limit.  When ...\n"],["CHANGELOG","","CHANGELOG.html","","<p>Change Log\n<p>Below is a complete listing of changes for each revision of HighLine.\n<p>1.5.2\n"],["INSTALL","","INSTALL.html","","<p>Installing HighLine\n<p>RubyGems is the preferred easy install method for HighLine.  However, you\ncan install ...\n"],["LICENSE","","LICENSE.html","","<p>License Terms\n<p>Distributed under the user's choice of the GPL Version 2 (see COPYING for\ndetails) or the ...\n"],["README","","README.html","","<p>Read Me\n<p>by James Edward Gray II\n<p>Description\n"],["TODO","","TODO.html","","<p>To Do List\n<p>The following is a list of planned expansions for HighLine, in no\nparticular order.\n<p>Rent this ...\n"]]}}
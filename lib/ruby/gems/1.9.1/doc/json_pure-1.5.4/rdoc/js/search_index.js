var search_data = {"index":{"searchIndex":["class","complex","date","datetime","exception","json","circulardatastructure","editor","editmenu","filemenu","gtk","treeiter","jsontreeview","mainwindow","menuextension","optionsmenu","popupmenu","ext","generatorerror","jsonerror","missingunicodesupport","nestingerror","parsererror","pure","generator","generatormethods","array","falseclass","float","hash","integer","nilclass","object","string","extend","trueclass","state","parser","unparsererror","kernel","range","rational","regexp","struct","symbol","time","[]()","[]()","add_item()","add_separator()","allow_nan?()","append_new_node()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","as_json()","ascii_only?()","ask_for_element()","ask_for_find_term()","ask_for_hash_pair()","ask_for_location()","ask_for_order()","ask_save()","change()","change_node()","check_circular?()","clear()","collapse_expand()","collapsed_nodes()","configure()","const_defined_in?()","content()","content=()","copy()","copy_node()","create()","create()","create()","create()","create()","create_menu_bar()","create_node()","cut_node()","data2model()","display_status()","display_title()","dump()","each()","edit()","edit()","error_dialog()","expand_collapse()","fast_generate()","fetch_icon()","file_open()","file_save()","file_save_as()","find()","find_again()","from_state()","generate()","generate()","iconv()","included()","insert_new_node()","json_creatable?()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","json_create()","load()","load_file()","load_location()","location_open()","merge()","method_missing()","model2data()","new()","new()","new()","new()","new()","new()","open()","open_location()","parse()","parse()","parse!()","paste()","paste_node_appending()","paste_node_inserting_before()","pretty_generate()","pretty_saving()","question_dialog()","quirks_mode?()","quirks_mode?()","quit()","quit()","read_data()","recurse_proc()","recursive_each()","remove_subtree()","reset()","restore()","revert()","save()","save_as()","select_file()","sort()","start()","store_file()","to_h()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json()","to_json_raw()","to_json_raw_object()","type()","type=()","unchange()","view_new_model()","readme"],"longSearchIndex":["class","complex","date","datetime","exception","json","json::circulardatastructure","json::editor","json::editor::editmenu","json::editor::filemenu","json::editor::gtk","json::editor::gtk::treeiter","json::editor::jsontreeview","json::editor::mainwindow","json::editor::menuextension","json::editor::optionsmenu","json::editor::popupmenu","json::ext","json::generatorerror","json::jsonerror","json::missingunicodesupport","json::nestingerror","json::parsererror","json::pure","json::pure::generator","json::pure::generator::generatormethods","json::pure::generator::generatormethods::array","json::pure::generator::generatormethods::falseclass","json::pure::generator::generatormethods::float","json::pure::generator::generatormethods::hash","json::pure::generator::generatormethods::integer","json::pure::generator::generatormethods::nilclass","json::pure::generator::generatormethods::object","json::pure::generator::generatormethods::string","json::pure::generator::generatormethods::string::extend","json::pure::generator::generatormethods::trueclass","json::pure::generator::state","json::pure::parser","json::unparsererror","kernel","range","rational","regexp","struct","symbol","time","json::[]()","json::pure::generator::state#[]()","json::editor::menuextension#add_item()","json::editor::menuextension#add_separator()","json::pure::generator::state#allow_nan?()","json::editor::popupmenu#append_new_node()","complex#as_json()","date#as_json()","datetime#as_json()","exception#as_json()","range#as_json()","rational#as_json()","regexp#as_json()","struct#as_json()","symbol#as_json()","time#as_json()","json::pure::generator::state#ascii_only?()","json::editor::jsontreeview#ask_for_element()","json::editor::jsontreeview#ask_for_find_term()","json::editor::jsontreeview#ask_for_hash_pair()","json::editor::mainwindow#ask_for_location()","json::editor::jsontreeview#ask_for_order()","json::editor::mainwindow#ask_save()","json::editor::mainwindow#change()","json::editor::popupmenu#change_node()","json::pure::generator::state#check_circular?()","json::editor::mainwindow#clear()","json::editor::popupmenu#collapse_expand()","json::editor::optionsmenu#collapsed_nodes()","json::pure::generator::state#configure()","json::const_defined_in?()","json::editor::gtk::treeiter#content()","json::editor::gtk::treeiter#content=()","json::editor::editmenu#copy()","json::editor::popupmenu#copy_node()","json::editor::editmenu#create()","json::editor::filemenu#create()","json::editor::menuextension#create()","json::editor::optionsmenu#create()","json::editor::popupmenu#create()","json::editor::mainwindow#create_menu_bar()","json::editor::jsontreeview#create_node()","json::editor::popupmenu#cut_node()","json::editor::data2model()","json::editor::mainwindow#display_status()","json::editor::mainwindow#display_title()","json#dump()","json::editor::gtk::treeiter#each()","json::editor::edit()","json::editor::mainwindow#edit()","json::editor::error_dialog()","json::editor::jsontreeview#expand_collapse()","json#fast_generate()","json::editor::fetch_icon()","json::editor::mainwindow#file_open()","json::editor::mainwindow#file_save()","json::editor::mainwindow#file_save_as()","json::editor::editmenu#find()","json::editor::editmenu#find_again()","json::pure::generator::state::from_state()","json#generate()","json::pure::generator::state#generate()","json::iconv()","json::pure::generator::generatormethods::string::included()","json::editor::popupmenu#insert_new_node()","class#json_creatable?()","complex::json_create()","date::json_create()","datetime::json_create()","exception::json_create()","json::pure::generator::generatormethods::string::extend#json_create()","range::json_create()","rational::json_create()","regexp::json_create()","struct::json_create()","symbol::json_create()","time::json_create()","json#load()","json::editor::mainwindow#load_file()","json::editor::mainwindow#load_location()","json::editor::mainwindow#location_open()","json::pure::generator::state#merge()","json::editor::menuextension#method_missing()","json::editor::model2data()","json::editor::filemenu#new()","json::editor::jsontreeview::new()","json::editor::mainwindow::new()","json::editor::menuextension::new()","json::pure::generator::state::new()","json::pure::parser::new()","json::editor::filemenu#open()","json::editor::filemenu#open_location()","json#parse()","json::pure::parser#parse()","json#parse!()","json::editor::editmenu#paste()","json::editor::popupmenu#paste_node_appending()","json::editor::popupmenu#paste_node_inserting_before()","json#pretty_generate()","json::editor::optionsmenu#pretty_saving()","json::editor::question_dialog()","json::pure::generator::state#quirks_mode?()","json::pure::parser#quirks_mode?()","json::editor::filemenu#quit()","json::editor::mainwindow#quit()","json::editor::mainwindow#read_data()","json#recurse_proc()","json::editor::gtk::treeiter#recursive_each()","json::editor::gtk::treeiter#remove_subtree()","json::pure::parser#reset()","json::restore()","json::editor::filemenu#revert()","json::editor::filemenu#save()","json::editor::filemenu#save_as()","json::editor::mainwindow#select_file()","json::editor::editmenu#sort()","json::editor::start()","json::editor::mainwindow#store_file()","json::pure::generator::state#to_h()","complex#to_json()","date#to_json()","datetime#to_json()","exception#to_json()","json::pure::generator::generatormethods::array#to_json()","json::pure::generator::generatormethods::falseclass#to_json()","json::pure::generator::generatormethods::float#to_json()","json::pure::generator::generatormethods::hash#to_json()","json::pure::generator::generatormethods::integer#to_json()","json::pure::generator::generatormethods::nilclass#to_json()","json::pure::generator::generatormethods::object#to_json()","json::pure::generator::generatormethods::string#to_json()","json::pure::generator::generatormethods::trueclass#to_json()","range#to_json()","rational#to_json()","regexp#to_json()","struct#to_json()","symbol#to_json()","time#to_json()","json::pure::generator::generatormethods::string#to_json_raw()","json::pure::generator::generatormethods::string#to_json_raw_object()","json::editor::gtk::treeiter#type()","json::editor::gtk::treeiter#type=()","json::editor::mainwindow#unchange()","json::editor::mainwindow#view_new_model()",""],"info":[["Class","","Class.html","","<p>Extends any Class to include <em>json_creatable?</em> method.\n"],["Complex","","Complex.html","",""],["Date","","Date.html","","<p>Date serialization/deserialization\n"],["DateTime","","DateTime.html","","<p>DateTime serialization/deserialization\n"],["Exception","","Exception.html","","<p>Exception serialization/deserialization\n"],["JSON","","JSON.html","",""],["JSON::CircularDatastructure","","JSON/CircularDatastructure.html","",""],["JSON::Editor","","JSON/Editor.html","",""],["JSON::Editor::EditMenu","","JSON/Editor/EditMenu.html","","<p>This class creates the Edit pulldown menu.\n"],["JSON::Editor::FileMenu","","JSON/Editor/FileMenu.html","","<p>This class creates the File pulldown menu.\n"],["JSON::Editor::Gtk","","JSON/Editor/Gtk.html","",""],["JSON::Editor::Gtk::TreeIter","","JSON/Editor/Gtk/TreeIter.html","","<p>The Gtk::TreeIter class is reopened and some auxiliary methods are added.\n"],["JSON::Editor::JSONTreeView","","JSON/Editor/JSONTreeView.html","","<p>This class inherits from Gtk::TreeView, to configure it and to add a lot of\nbehaviour to it.\n"],["JSON::Editor::MainWindow","","JSON/Editor/MainWindow.html","","<p>The editor main window\n"],["JSON::Editor::MenuExtension","","JSON/Editor/MenuExtension.html","","<p>This module bundles some method, that can be used to create a menu. It\nshould be included into the class ...\n"],["JSON::Editor::OptionsMenu","","JSON/Editor/OptionsMenu.html","",""],["JSON::Editor::PopUpMenu","","JSON/Editor/PopUpMenu.html","","<p>This class creates the popup menu, that opens when clicking onto the\ntreeview.\n"],["JSON::Ext","","JSON/Ext.html","","<p>This module holds all the modules/classes that implement JSON's\nfunctionality as C extensions.\n"],["JSON::GeneratorError","","JSON/GeneratorError.html","","<p>This exception is raised if a generator or unparser error occurs.\n"],["JSON::JSONError","","JSON/JSONError.html","","<p>The base exception for JSON errors.\n"],["JSON::MissingUnicodeSupport","","JSON/MissingUnicodeSupport.html","","<p>This exception is raised if the required unicode support is missing on the\nsystem. Usually this means ...\n"],["JSON::NestingError","","JSON/NestingError.html","","<p>This exception is raised if the nesting of parsed data structures is too\ndeep.\n"],["JSON::ParserError","","JSON/ParserError.html","","<p>This exception is raised if a parser error occurs.\n"],["JSON::Pure","","JSON/Pure.html","","<p>This module holds all the modules/classes that implement JSON's\nfunctionality in pure ruby.\n"],["JSON::Pure::Generator","","JSON/Pure/Generator.html","",""],["JSON::Pure::Generator::GeneratorMethods","","JSON/Pure/Generator/GeneratorMethods.html","",""],["JSON::Pure::Generator::GeneratorMethods::Array","","JSON/Pure/Generator/GeneratorMethods/Array.html","",""],["JSON::Pure::Generator::GeneratorMethods::FalseClass","","JSON/Pure/Generator/GeneratorMethods/FalseClass.html","",""],["JSON::Pure::Generator::GeneratorMethods::Float","","JSON/Pure/Generator/GeneratorMethods/Float.html","",""],["JSON::Pure::Generator::GeneratorMethods::Hash","","JSON/Pure/Generator/GeneratorMethods/Hash.html","",""],["JSON::Pure::Generator::GeneratorMethods::Integer","","JSON/Pure/Generator/GeneratorMethods/Integer.html","",""],["JSON::Pure::Generator::GeneratorMethods::NilClass","","JSON/Pure/Generator/GeneratorMethods/NilClass.html","",""],["JSON::Pure::Generator::GeneratorMethods::Object","","JSON/Pure/Generator/GeneratorMethods/Object.html","",""],["JSON::Pure::Generator::GeneratorMethods::String","","JSON/Pure/Generator/GeneratorMethods/String.html","",""],["JSON::Pure::Generator::GeneratorMethods::String::Extend","","JSON/Pure/Generator/GeneratorMethods/String/Extend.html","","<p>Module that holds the extinding methods if, the String module is included.\n"],["JSON::Pure::Generator::GeneratorMethods::TrueClass","","JSON/Pure/Generator/GeneratorMethods/TrueClass.html","",""],["JSON::Pure::Generator::State","","JSON/Pure/Generator/State.html","","<p>This class is used to create State instances, that are use to hold data\nwhile generating a JSON text ...\n"],["JSON::Pure::Parser","","JSON/Pure/Parser.html","","<p>This class implements the JSON parser that is used to parse a JSON string\ninto a Ruby data structure. ...\n"],["JSON::UnparserError","","JSON/GeneratorError.html","","<p>This exception is raised if a generator or unparser error occurs.\n"],["Kernel","","Kernel.html","",""],["Range","","Range.html","","<p>Range serialization/deserialization\n"],["Rational","","Rational.html","",""],["Regexp","","Regexp.html","","<p>Regexp serialization/deserialization\n"],["Struct","","Struct.html","","<p>Struct serialization/deserialization\n"],["Symbol","","Symbol.html","","<p>Symbol serialization/deserialization\n"],["Time","","Time.html","","<p>Time serialization/deserialization\n"],["[]","JSON","JSON.html#method-c-5B-5D","(object, opts = {})","<p>If <em>object</em> is string-like, parse the string and return the parsed\nresult as a Ruby data structure. Otherwise ...\n"],["[]","JSON::Pure::Generator::State","JSON/Pure/Generator/State.html#method-i-5B-5D","(name)","<p>Return the value returned by method <code>name</code>.\n"],["add_item","JSON::Editor::MenuExtension","JSON/Editor/MenuExtension.html#method-i-add_item","(label, keyval = nil, klass = MenuItem, &callback)","<p>Adds a Gtk::MenuItem to this instance's #menu. <em>label</em> is the label\nstring, <em>klass</em> is the item type, and ...\n"],["add_separator","JSON::Editor::MenuExtension","JSON/Editor/MenuExtension.html#method-i-add_separator","()","<p>Adds a Gtk::SeparatorMenuItem to this instance's #menu.\n"],["allow_nan?","JSON::Pure::Generator::State","JSON/Pure/Generator/State.html#method-i-allow_nan-3F","()","<p>Returns true if NaN, Infinity, and -Infinity should be considered as valid\nJSON and output.\n"],["append_new_node","JSON::Editor::PopUpMenu","JSON/Editor/PopUpMenu.html#method-i-append_new_node","(item)","<p>Append a new node to the selected Hash or Array.\n"],["as_json","Complex","Complex.html#method-i-as_json","(*)",""],["as_json","Date","Date.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["as_json","DateTime","DateTime.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["as_json","Exception","Exception.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["as_json","Range","Range.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["as_json","Rational","Rational.html#method-i-as_json","(*)",""],["as_json","Regexp","Regexp.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["as_json","Struct","Struct.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["as_json","Symbol","Symbol.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["as_json","Time","Time.html#method-i-as_json","(*)","<p>Returns a hash, that will be turned into a JSON object and represent this\nobject.\n"],["ascii_only?","JSON::Pure::Generator::State","JSON/Pure/Generator/State.html#method-i-ascii_only-3F","()","<p>Returns true, if only ASCII characters should be generated. Otherwise\nreturns false.\n"],["ask_for_element","JSON::Editor::JSONTreeView","JSON/Editor/JSONTreeView.html#method-i-ask_for_element","(parent = nil, default_type = nil, value_text = @content)","<p>Ask for an element to be appended <em>parent</em>.\n"],["ask_for_find_term","JSON::Editor::JSONTreeView","JSON/Editor/JSONTreeView.html#method-i-ask_for_find_term","(search = nil)","<p>Ask for a find term to search for in the tree. Returns the term as a\nstring.\n"],["ask_for_hash_pair","JSON::Editor::JSONTreeView","JSON/Editor/JSONTreeView.html#method-i-ask_for_hash_pair","(parent)","<p>Ask for a hash key, value pair to be added to the Hash node\n<em>parent</em>.\n"],["ask_for_location","JSON::Editor::MainWindow","JSON/Editor/MainWindow.html#method-i-ask_for_location","()","<p>Ask for location URI a to load data from. Returns the URI as a string.\n"],["ask_for_order","JSON::Editor::JSONTreeView","JSON/Editor/JSONTreeView.html#method-i-ask_for_order","()","<p>Ask for an order criteria for sorting, using <em>x</em> for the element in\nquestion. Returns the order criterium, ...\n"],["ask_save","JSON::Editor::MainWindow","JSON/Editor/MainWindow.html#method-i-ask_save","()","<p>Opens a dialog, asking, if changes should be saved to a file.\n"],["change","JSON::Editor::MainWindow","JSON/Editor/MainWindow.html#method-i-change","()","<p>Sets editor status to changed, to indicate that the edited data containts\nunsaved changes.\n"],["change_node","JSON::Editor::PopUpMenu","JSON/Editor/PopUpMenu.html#method-i-change_node","(item)","<p>Change the type or content of the selected node.\n"],["check_circular?","JSON::Pure::Generator::State","JSON/Pure/Generator/State.html#method-i-check_circular-3F","()","<p>Returns true, if circular data structures are checked, otherwise returns\nfalse.\n"],["clear","JSON::Editor::MainWindow","JSON/Editor/MainWindow.html#method-i-clear","()","<p>Clear the current model, after asking to save all unsaved changes.\n"],["collapse_expand","JSON::Editor::PopUpMenu","JSON/Editor/PopUpMenu.html#method-i-collapse_expand","(item)","<p>Recursively collapse/expand a subtree starting from the selected node.\n"],["collapsed_nodes","JSON::Editor::OptionsMenu","JSON/Editor/OptionsMenu.html#method-i-collapsed_nodes","(item)","<p>Collapse/Expand all nodes by default.\n"],["configure","JSON::Pure::Generator::State","JSON/Pure/Generator/State.html#method-i-configure","(opts)","<p>Configure this State instance with the Hash <em>opts</em>, and return\nitself.\n"],["const_defined_in?","JSON","JSON.html#method-c-const_defined_in-3F","(modul, constant)",""],["content","JSON::Editor::Gtk::TreeIter","JSON/Editor/Gtk/TreeIter.html#method-i-content","()","<p>Returns the content of this node.\n"],["content=","JSON::Editor::Gtk::TreeIter","JSON/Editor/Gtk/TreeIter.html#method-i-content-3D","(value)","<p>Sets the content of this node to <em>value</em>.\n"],["copy","JSON::Editor::EditMenu","JSON/Editor/EditMenu.html#method-i-copy","(item)","<p>Copy data from model into primary clipboard.\n"],["copy_node","JSON::Editor::PopUpMenu","JSON/Editor/PopUpMenu.html#method-i-copy_node","(item)","<p>Copy the selected node and its subtree, and save it into the clipboard.\n"],["create","JSON::Editor::EditMenu","JSON/Editor/EditMenu.html#method-i-create","()","<p>Create the menu.\n"],["create","JSON::Editor::FileMenu","JSON/Editor/FileMenu.html#method-i-create","()","<p>Create the menu.\n"],["create","JSON::Editor::MenuExtension","JSON/Editor/MenuExtension.html#method-i-create","()","<p>This method should be implemented in subclasses to create the #menu of this\ninstance. It has to be called ...\n"],["create","JSON::Editor::OptionsMenu","JSON/Editor/OptionsMenu.html#method-i-create","()","<p>Create the menu.\n"],["create","JSON::Editor::PopUpMenu","JSON/Editor/PopUpMenu.html#method-i-create","()","<p>Create the menu.\n"],["create_menu_bar","JSON::Editor::MainWindow","JSON/Editor/MainWindow.html#method-i-create_menu_bar","()","<p>Creates the menu bar with the pulldown menus and returns it.\n"],["create_node","JSON::Editor::JSONTreeView","JSON/Editor/JSONTreeView.html#method-i-create_node","(parent, type, content)","<p>Create a <em>type</em> node with content <em>content</em>, and add it to\n<em>parent</em> in the model. If <em>parent</em> is nil, create ...\n"],["cut_node","JSON::Editor::PopUpMenu","JSON/Editor/PopUpMenu.html#method-i-cut_node","(item)","<p>Cut the selected node and its subtree, and save it into the clipboard.\n"],["data2model","JSON::Editor","JSON/Editor.html#method-c-data2model","(data, model = nil, parent = nil)","<p>Convert the Ruby data structure <em>data</em> into tree model data for Gtk\nand returns the whole model. If the ...\n"],["display_status","JSON::Editor::MainWindow","JSON/Editor/MainWindow.html#method-i-display_status","(text)","<p>Displays <em>text</em> in the status bar.\n"],["display_title","JSON::Editor::MainWindow","JSON/Editor/MainWindow.html#method-i-display_title","()","<p>Display the new title according to the editor's current state.\n"],["dump","JSON","JSON.html#method-i-dump","(obj, anIO = nil, limit = nil)","<p>Dumps <em>obj</em> as a JSON string, i.e. calls generate on the object and\nreturns the result.\n<p>If anIO (an IO-like ...\n"],["each","JSON::Editor::Gtk::TreeIter","JSON/Editor/Gtk/TreeIter.html#method-i-each","()","<p>Traverse each of this Gtk::TreeIter instance's children and yield to them.\n"],["edit","JSON::Editor","JSON/Editor.html#method-c-edit","(json, encoding = 'utf8')","<p>Edit the string <em>json</em> with encoding <em>encoding</em> in the\neditor.\n"],["edit","JSON::Editor::MainWindow","JSON/Editor/MainWindow.html#method-i-edit","(json)","<p>Edit the string <em>json</em> in the editor.\n"],["error_dialog","JSON::Editor","JSON/Editor.html#method-c-error_dialog","(window, text)","<p>Opens an error dialog on top of <em>window</em> showing the error message\n<em>text</em>.\n"],["expand_collapse","JSON::Editor::JSONTreeView","JSON/Editor/JSONTreeView.html#method-i-expand_collapse","(iter)","<p>Expand or collapse row pointed to by <em>iter</em> according to the\n#expanded attribute.\n"],["fast_generate","JSON","JSON.html#method-i-fast_generate","(obj, opts = nil)","<p>Generate a JSON document from the Ruby data structure <em>obj</em> and\nreturn it. This method disables the checks ...\n"],["fetch_icon","JSON::Editor","JSON/Editor.html#method-c-fetch_icon","(name)","<p>Returns the Gdk::Pixbuf of the icon named <em>name</em> from the icon\ncache.\n"],["file_open","JSON::Editor::MainWindow","JSON/Editor/MainWindow.html#method-i-file_open","(filename = nil)","<p>Open the file <em>filename</em> or call the #select_file method to ask for\na filename.\n"],["file_save","JSON::Editor::MainWindow","JSON/Editor/MainWindow.html#method-i-file_save","()","<p>Save the current file.\n"],["file_save_as","JSON::Editor::MainWindow","JSON/Editor/MainWindow.html#method-i-file_save_as","()","<p>Save the current file as the filename\n"],["find","JSON::Editor::EditMenu","JSON/Editor/EditMenu.html#method-i-find","(item)","<p>Find a string in all nodes' contents and select the found node in the\ntreeview.\n"],["find_again","JSON::Editor::EditMenu","JSON/Editor/EditMenu.html#method-i-find_again","(item)","<p>Repeat the last search given by #find.\n"],["from_state","JSON::Pure::Generator::State","JSON/Pure/Generator/State.html#method-c-from_state","(opts)","<p>Creates a State object from <em>opts</em>, which ought to be Hash to create\na new State instance configured by ...\n"],["generate","JSON","JSON.html#method-i-generate","(obj, opts = nil)","<p>Generate a JSON document from the Ruby data structure <em>obj</em> and\nreturn it. <em>state</em> is * a JSON::State object, ...\n"],["generate","JSON::Pure::Generator::State","JSON/Pure/Generator/State.html#method-i-generate","(obj)","<p>Generates a valid JSON document from object <code>obj</code> and returns\nthe result. If no valid JSON document can ...\n"],["iconv","JSON","JSON.html#method-c-iconv","(to, from, string)","<p>Encodes string using Ruby's <em>String.encode</em>\n"],["included","JSON::Pure::Generator::GeneratorMethods::String","JSON/Pure/Generator/GeneratorMethods/String.html#method-c-included","(modul)","<p>Extends <em>modul</em> with the String::Extend module.\n"],["insert_new_node","JSON::Editor::PopUpMenu","JSON/Editor/PopUpMenu.html#method-i-insert_new_node","(item)","<p>Insert a new node into an Array before the selected element.\n"],["json_creatable?","Class","Class.html#method-i-json_creatable-3F","()","<p>Returns true if this class can be used to create an instance from a\nserialised JSON string. The class ...\n"],["json_create","Complex","Complex.html#method-c-json_create","(object)",""],["json_create","Date","Date.html#method-c-json_create","(object)","<p>Deserializes JSON string by converting Julian year <code>y</code>, month\n<code>m</code>, day <code>d</code> and Day of Calendar Reform\n<code>sg</code> to ...\n"],["json_create","DateTime","DateTime.html#method-c-json_create","(object)","<p>Deserializes JSON string by converting year <code>y</code>, month\n<code>m</code>, day <code>d</code>, hour <code>H</code>, minute\n<code>M</code>, second <code>S</code>, offset <code>of</code> ...\n"],["json_create","Exception","Exception.html#method-c-json_create","(object)","<p>Deserializes JSON string by constructing new Exception object with message\n<code>m</code> and backtrace <code>b</code> serialized ...\n"],["json_create","JSON::Pure::Generator::GeneratorMethods::String::Extend","JSON/Pure/Generator/GeneratorMethods/String/Extend.html#method-i-json_create","(o)","<p>Raw Strings are JSON Objects (the raw bytes are stored in an array for the\nkey \"raw\"). The ...\n"],["json_create","Range","Range.html#method-c-json_create","(object)","<p>Deserializes JSON string by constructing new Range object with arguments\n<code>a</code> serialized by <code>to_json</code>.\n"],["json_create","Rational","Rational.html#method-c-json_create","(object)",""],["json_create","Regexp","Regexp.html#method-c-json_create","(object)","<p>Deserializes JSON string by constructing new Regexp object with source\n<code>s</code> (Regexp or String) and options ...\n"],["json_create","Struct","Struct.html#method-c-json_create","(object)","<p>Deserializes JSON string by constructing new Struct object with values\n<code>v</code> serialized by <code>to_json</code>.\n"],["json_create","Symbol","Symbol.html#method-c-json_create","(o)","<p>Deserializes JSON string by converting the <code>string</code> value stored\nin the object to a Symbol\n"],["json_create","Time","Time.html#method-c-json_create","(object)","<p>Deserializes JSON string by converting time since epoch to Time\n"],["load","JSON","JSON.html#method-i-load","(source, proc = nil)","<p>Load a ruby data structure from a JSON <em>source</em> and return it. A\nsource can either be a string-like object, ...\n"],["load_file","JSON::Editor::MainWindow","JSON/Editor/MainWindow.html#method-i-load_file","(filename)","<p>Load the file named <em>filename</em> into the editor as a JSON document.\n"],["load_location","JSON::Editor::MainWindow","JSON/Editor/MainWindow.html#method-i-load_location","(uri)","<p>Load the data at location <em>uri</em> into the editor as a JSON document.\n"],["location_open","JSON::Editor::MainWindow","JSON/Editor/MainWindow.html#method-i-location_open","(uri = nil)","<p>Open the data at the location <em>uri</em>, if given. Otherwise open a\ndialog to ask for the <em>uri</em>.\n"],["merge","JSON::Pure::Generator::State","JSON/Pure/Generator/State.html#method-i-merge","(opts)",""],["method_missing","JSON::Editor::MenuExtension","JSON/Editor/MenuExtension.html#method-i-method_missing","(*a, &b)",""],["model2data","JSON::Editor","JSON/Editor.html#method-c-model2data","(iter)","<p>Convert the tree model starting from Gtk::TreeIter <em>iter</em> into a\nRuby data structure and return it.\n"],["new","JSON::Editor::FileMenu","JSON/Editor/FileMenu.html#method-i-new","(item)","<p>Clear the model and filename, but ask to save the JSON document, if unsaved\nchanges have occured.\n"],["new","JSON::Editor::JSONTreeView","JSON/Editor/JSONTreeView.html#method-c-new","(window)","<p>Creates a JSONTreeView instance, the parameter <em>window</em> is a\nMainWindow instance and used for self delegation. ...\n"],["new","JSON::Editor::MainWindow","JSON/Editor/MainWindow.html#method-c-new","(encoding)",""],["new","JSON::Editor::MenuExtension","JSON/Editor/MenuExtension.html#method-c-new","(treeview)","<p>Creates a Menu, that includes MenuExtension. <em>treeview</em> is the\nGtk::TreeView, on which it operates.\n"],["new","JSON::Pure::Generator::State","JSON/Pure/Generator/State.html#method-c-new","(opts = {})","<p>Instantiates a new State object, configured by <em>opts</em>.\n<p><em>opts</em> can have the following keys:\n<p><strong>indent</strong>: a string ...\n"],["new","JSON::Pure::Parser","JSON/Pure/Parser.html#method-c-new","(source, opts = {})","<p>Creates a new JSON::Pure::Parser instance for the string <em>source</em>.\n<p>It will be configured by the <em>opts</em> hash. ...\n"],["open","JSON::Editor::FileMenu","JSON/Editor/FileMenu.html#method-i-open","(item)","<p>Open a file and load it into the editor. Ask to save the JSON document\nfirst, if unsaved changes have ...\n"],["open_location","JSON::Editor::FileMenu","JSON/Editor/FileMenu.html#method-i-open_location","(item)",""],["parse","JSON","JSON.html#method-i-parse","(source, opts = {})","<p>Parse the JSON document <em>source</em> into a Ruby data structure and\nreturn it.\n<p><em>opts</em> can have the following keys: ...\n"],["parse","JSON::Pure::Parser","JSON/Pure/Parser.html#method-i-parse","()","<p>Parses the current JSON string <em>source</em> and returns the complete\ndata structure as a result.\n"],["parse!","JSON","JSON.html#method-i-parse-21","(source, opts = {})","<p>Parse the JSON document <em>source</em> into a Ruby data structure and\nreturn it. The bang version of the parse ...\n"],["paste","JSON::Editor::EditMenu","JSON/Editor/EditMenu.html#method-i-paste","(item)","<p>Copy json text from primary clipboard into model.\n"],["paste_node_appending","JSON::Editor::PopUpMenu","JSON/Editor/PopUpMenu.html#method-i-paste_node_appending","(item)","<p>Paste the data in the clipboard into the selected Array or Hash by\nappending it.\n"],["paste_node_inserting_before","JSON::Editor::PopUpMenu","JSON/Editor/PopUpMenu.html#method-i-paste_node_inserting_before","(item)","<p>Paste the data in the clipboard into the selected Array inserting it before\nthe selected element.\n"],["pretty_generate","JSON","JSON.html#method-i-pretty_generate","(obj, opts = nil)","<p>Generate a JSON document from the Ruby data structure <em>obj</em> and\nreturn it. The returned document is a prettier ...\n"],["pretty_saving","JSON::Editor::OptionsMenu","JSON/Editor/OptionsMenu.html#method-i-pretty_saving","(item)","<p>Toggle pretty saving mode on/off.\n"],["question_dialog","JSON::Editor","JSON/Editor.html#method-c-question_dialog","(window, text)","<p>Opens a yes/no question dialog on top of <em>window</em> showing the error\nmessage <em>text</em>. If yes was answered  ...\n"],["quirks_mode?","JSON::Pure::Generator::State","JSON/Pure/Generator/State.html#method-i-quirks_mode-3F","()","<p>Returns true, if quirks mode is enabled. Otherwise returns false.\n"],["quirks_mode?","JSON::Pure::Parser","JSON/Pure/Parser.html#method-i-quirks_mode-3F","()",""],["quit","JSON::Editor::FileMenu","JSON/Editor/FileMenu.html#method-i-quit","(item)","<p>Quit the editor, after asking to save any unsaved changes first.\n"],["quit","JSON::Editor::MainWindow","JSON/Editor/MainWindow.html#method-i-quit","()","<p>Quit this editor, that is, leave this editor's main loop.\n"],["read_data","JSON::Editor::MainWindow","JSON/Editor/MainWindow.html#method-i-read_data","(filename)","<p>Read a JSON document from the file named <em>filename</em>, parse it into a\nruby data structure, and return the ...\n"],["recurse_proc","JSON","JSON.html#method-i-recurse_proc","(result, &proc)","<p>Recursively calls passed <em>Proc</em> if the parsed data structure is an\n<em>Array</em> or <em>Hash</em>\n"],["recursive_each","JSON::Editor::Gtk::TreeIter","JSON/Editor/Gtk/TreeIter.html#method-i-recursive_each","(&block)","<p>Recursively traverse all nodes of this Gtk::TreeIter's subtree (including\nself) and yield to them.\n"],["remove_subtree","JSON::Editor::Gtk::TreeIter","JSON/Editor/Gtk/TreeIter.html#method-i-remove_subtree","(model)","<p>Remove the subtree of this Gtk::TreeIter instance from the model\n<em>model</em>.\n"],["reset","JSON::Pure::Parser","JSON/Pure/Parser.html#method-i-reset","()",""],["restore","JSON","JSON.html#method-c-restore","(source, proc = nil)",""],["revert","JSON::Editor::FileMenu","JSON/Editor/FileMenu.html#method-i-revert","(item)","<p>Revert the current JSON document in the editor to the saved version.\n"],["save","JSON::Editor::FileMenu","JSON/Editor/FileMenu.html#method-i-save","(item)","<p>Save the current JSON document.\n"],["save_as","JSON::Editor::FileMenu","JSON/Editor/FileMenu.html#method-i-save_as","(item)","<p>Save the current JSON document under the given filename.\n"],["select_file","JSON::Editor::MainWindow","JSON/Editor/MainWindow.html#method-i-select_file","(message)","<p>Open a file selecton dialog, displaying <em>message</em>, and return the\nselected filename or nil, if no file ...\n"],["sort","JSON::Editor::EditMenu","JSON/Editor/EditMenu.html#method-i-sort","(item)","<p>Sort (Reverse sort) all elements of the selected array by the given\nexpression. <em>x</em> is the element in question. ...\n"],["start","JSON::Editor","JSON/Editor.html#method-c-start","(encoding = 'utf8')","<p>Starts a JSON Editor. If a block was given, it yields to the\nJSON::Editor::MainWindow instance.\n"],["store_file","JSON::Editor::MainWindow","JSON/Editor/MainWindow.html#method-i-store_file","(path)","<p>Store the current JSON document to <em>path</em>.\n"],["to_h","JSON::Pure::Generator::State","JSON/Pure/Generator/State.html#method-i-to_h","()","<p>Returns the configuration instance variables as a hash, that can be passed\nto the configure method.\n"],["to_json","Complex","Complex.html#method-i-to_json","(*)",""],["to_json","Date","Date.html#method-i-to_json","(*args)","<p>Stores class name (Date) with Julian year <code>y</code>, month\n<code>m</code>, day <code>d</code> and Day of Calendar Reform\n<code>sg</code> as JSON string ...\n"],["to_json","DateTime","DateTime.html#method-i-to_json","(*args)","<p>Stores class name (DateTime) with Julian year <code>y</code>, month\n<code>m</code>, day <code>d</code>, hour <code>H</code>, minute\n<code>M</code>, second <code>S</code>, offset  ...\n"],["to_json","Exception","Exception.html#method-i-to_json","(*args)","<p>Stores class name (Exception) with message <code>m</code> and backtrace\narray <code>b</code> as JSON string\n"],["to_json","JSON::Pure::Generator::GeneratorMethods::Array","JSON/Pure/Generator/GeneratorMethods/Array.html#method-i-to_json","(state = nil, *)","<p>Returns a JSON string containing a JSON array, that is unparsed from this\nArray instance. <em>state</em> is a ...\n"],["to_json","JSON::Pure::Generator::GeneratorMethods::FalseClass","JSON/Pure/Generator/GeneratorMethods/FalseClass.html#method-i-to_json","(*)","<p>Returns a JSON string for false: 'false'.\n"],["to_json","JSON::Pure::Generator::GeneratorMethods::Float","JSON/Pure/Generator/GeneratorMethods/Float.html#method-i-to_json","(state = nil, *)","<p>Returns a JSON string representation for this Float number.\n"],["to_json","JSON::Pure::Generator::GeneratorMethods::Hash","JSON/Pure/Generator/GeneratorMethods/Hash.html#method-i-to_json","(state = nil, *)","<p>Returns a JSON string containing a JSON object, that is unparsed from this\nHash instance. <em>state</em> is a ...\n"],["to_json","JSON::Pure::Generator::GeneratorMethods::Integer","JSON/Pure/Generator/GeneratorMethods/Integer.html#method-i-to_json","(*)","<p>Returns a JSON string representation for this Integer number.\n"],["to_json","JSON::Pure::Generator::GeneratorMethods::NilClass","JSON/Pure/Generator/GeneratorMethods/NilClass.html#method-i-to_json","(*)","<p>Returns a JSON string for nil: 'null'.\n"],["to_json","JSON::Pure::Generator::GeneratorMethods::Object","JSON/Pure/Generator/GeneratorMethods/Object.html#method-i-to_json","(*)","<p>Converts this object to a string (calling #to_s), converts it to a JSON\nstring, and returns the result. ...\n"],["to_json","JSON::Pure::Generator::GeneratorMethods::String","JSON/Pure/Generator/GeneratorMethods/String.html#method-i-to_json","(state = nil, *args)","<p>This string should be encoded with UTF-8 A call to this method returns a\nJSON string encoded with UTF16 ...\n"],["to_json","JSON::Pure::Generator::GeneratorMethods::TrueClass","JSON/Pure/Generator/GeneratorMethods/TrueClass.html#method-i-to_json","(*)","<p>Returns a JSON string for true: 'true'.\n"],["to_json","Range","Range.html#method-i-to_json","(*args)","<p>Stores class name (Range) with JSON array of arguments <code>a</code> which\ninclude <code>first</code> (integer), <code>last</code> (integer), ...\n"],["to_json","Rational","Rational.html#method-i-to_json","(*)",""],["to_json","Regexp","Regexp.html#method-i-to_json","(*)","<p>Stores class name (Regexp) with options <code>o</code> and source\n<code>s</code> (Regexp or String) as JSON string\n"],["to_json","Struct","Struct.html#method-i-to_json","(*args)","<p>Stores class name (Struct) with Struct values <code>v</code> as a JSON\nstring. Only named structs are supported.\n"],["to_json","Symbol","Symbol.html#method-i-to_json","(*a)","<p>Stores class name (Symbol) with String representation of Symbol as a JSON\nstring.\n"],["to_json","Time","Time.html#method-i-to_json","(*args)","<p>Stores class name (Time) with number of seconds since epoch and number of\nmicroseconds for Time as JSON ...\n"],["to_json_raw","JSON::Pure::Generator::GeneratorMethods::String","JSON/Pure/Generator/GeneratorMethods/String.html#method-i-to_json_raw","(*args)","<p>This method creates a JSON text from the result of a call to\nto_json_raw_object of this String.\n"],["to_json_raw_object","JSON::Pure::Generator::GeneratorMethods::String","JSON/Pure/Generator/GeneratorMethods/String.html#method-i-to_json_raw_object","()","<p>This method creates a raw object hash, that can be nested into other data\nstructures and will be unparsed ...\n"],["type","JSON::Editor::Gtk::TreeIter","JSON/Editor/Gtk/TreeIter.html#method-i-type","()","<p>Returns the type of this node.\n"],["type=","JSON::Editor::Gtk::TreeIter","JSON/Editor/Gtk/TreeIter.html#method-i-type-3D","(value)","<p>Sets the type of this node to <em>value</em>. This implies setting the\nrespective icon accordingly.\n"],["unchange","JSON::Editor::MainWindow","JSON/Editor/MainWindow.html#method-i-unchange","()","<p>Sets editor status to unchanged, to indicate that the edited data doesn't\ncontaint unsaved changes.\n"],["view_new_model","JSON::Editor::MainWindow","JSON/Editor/MainWindow.html#method-i-view_new_model","(model)","<p>Puts a new model <em>model</em> into the Gtk::TreeView to be edited.\n"],["README","","README_rdoc.html","","<p>JSON implementation for Ruby \n<p>Description\n<p>This is a implementation of the JSON specification according ...\n"]]}}
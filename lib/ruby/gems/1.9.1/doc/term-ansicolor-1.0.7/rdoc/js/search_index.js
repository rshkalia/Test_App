var search_data = {"index":{"searchIndex":["term","ansicolor","attributes()","coloring=()","coloring?()","support?()","uncolored()","readme"],"longSearchIndex":["term","term::ansicolor","term::ansicolor#attributes()","term::ansicolor::coloring=()","term::ansicolor::coloring?()","term::ansicolor#support?()","term::ansicolor#uncolored()",""],"info":[["Term","","Term.html","",""],["Term::ANSIColor","","Term/ANSIColor.html","","<p>The ANSIColor module can be used for namespacing and mixed into your own\nclasses.\n"],["attributes","Term::ANSIColor","Term/ANSIColor.html#method-i-attributes","()","<p>Returns an array of all Term::ANSIColor attributes as symbols.\n"],["coloring=","Term::ANSIColor","Term/ANSIColor.html#method-c-coloring-3D","(val)","<p>Turns the coloring on or off globally, so you can easily do this for\nexample:\n\n<pre>Term::ANSIColor::coloring ...</pre>\n"],["coloring?","Term::ANSIColor","Term/ANSIColor.html#method-c-coloring-3F","()","<p>Returns true, if the coloring function of this module is switched on, false\notherwise.\n"],["support?","Term::ANSIColor","Term/ANSIColor.html#method-i-support-3F","(feature)","<p>Returns true if Term::ANSIColor supports the <code>feature</code>.\n<p>The feature :clear, that is mixing the clear color ...\n"],["uncolored","Term::ANSIColor","Term/ANSIColor.html#method-i-uncolored","(string = nil)","<p>Returns an uncolored version of the string, that is all ANSI-sequences are\nstripped from the string. ...\n"],["README","","README_rdoc.html","","<p>Term::ANSIColor - ANSI escape sequences in Ruby\n<p>Description\n<p>This library can be used to color/decolor strings ...\n"]]}}
var search_data = {"index":{"searchIndex":["array","enumerable","file","float","hash","io","irb","integer","method","module","object","proc","range","spruz","attempt","bijection","blank","array","falseclass","hash","nilclass","numeric","object","string","trueclass","countby","deepdup","filebinary","classmethods","constants","full","go","generator","hashsymbolizekeysrecursive","hashunion","limited","linesfile","lineextension","memoize","minimize","modulegroup","null","once","p","partialapplication","rangeplus","round","securewrite","shuffle","stringcamelize","stringunderscore","stringversion","version","subhash","timedummy","classmethods","toproc","uniqby","write","string","symbol","time","+()","<=>()","==()","[]()","[]()","[]()","[]()","[]=()","[]=()","__memoize_cache__()","__memoize_cache__()","__memoize_cache_delete__()","add_dimension()","array()","ascii?()","ascii?()","attempt()","binary?()","binary?()","blank?()","blank?()","blank?()","blank?()","blank?()","blank?()","build()","build=()","camelcase()","camelize()","const_missing()","count_by()","deep_dup()","each()","each()","empty?()","examine()","execute()","extended()","file_linenumber()","filename()","fill()","for_file()","for_filename()","for_lines()","freeze()","full?()","go()","included()","included()","included()","included()","included()","included()","inspect()","inspect()","inspect()","last_line_number()","line()","line_number=()","major()","major=()","match_backward()","match_forward()","memoize_cache_clear()","memoize_function()","memoize_method()","method_missing()","minimize()","minimize!()","minor()","minor=()","named()","named()","new()","new()","new()","new()","new()","new()","next!()","now()","only_once()","partial()","pred!()","present?()","previous!()","revision()","revision=()","rewind()","round()","secure_write()","shuffle()","shuffle!()","size()","subhash()","subhash!()","succ!()","symbolize_keys_recursive()","symbolize_keys_recursive!()","to_a()","to_proc()","to_s()","to_s()","to_s()","try_only_once()","underscore()","uniq_by()","uniq_by!()","unminimize()","unminimize!()","version()","version()","|()","readme"],"longSearchIndex":["array","enumerable","file","float","hash","io","irb","integer","method","module","object","proc","range","spruz","spruz::attempt","spruz::bijection","spruz::blank","spruz::blank::array","spruz::blank::falseclass","spruz::blank::hash","spruz::blank::nilclass","spruz::blank::numeric","spruz::blank::object","spruz::blank::string","spruz::blank::trueclass","spruz::countby","spruz::deepdup","spruz::filebinary","spruz::filebinary::classmethods","spruz::filebinary::constants","spruz::full","spruz::go","spruz::generator","spruz::hashsymbolizekeysrecursive","spruz::hashunion","spruz::limited","spruz::linesfile","spruz::linesfile::lineextension","spruz::memoize","spruz::minimize","spruz::modulegroup","spruz::null","spruz::once","spruz::p","spruz::partialapplication","spruz::rangeplus","spruz::round","spruz::securewrite","spruz::shuffle","spruz::stringcamelize","spruz::stringunderscore","spruz::stringversion","spruz::stringversion::version","spruz::subhash","spruz::timedummy","spruz::timedummy::classmethods","spruz::toproc","spruz::uniqby","spruz::write","string","symbol","time","spruz::rangeplus#+()","spruz::stringversion::version#<=>()","spruz::stringversion::version#==()","spruz::bijection::[]()","spruz::generator::[]()","spruz::modulegroup::[]()","spruz::stringversion::version#[]()","spruz::bijection#[]=()","spruz::stringversion::version#[]=()","module::__memoize_cache__()","module#__memoize_cache__()","module::__memoize_cache_delete__()","spruz::generator#add_dimension()","spruz::stringversion::version#array()","spruz::filebinary#ascii?()","spruz::filebinary::classmethods#ascii?()","spruz::attempt#attempt()","spruz::filebinary#binary?()","spruz::filebinary::classmethods#binary?()","spruz::blank::falseclass#blank?()","spruz::blank::nilclass#blank?()","spruz::blank::numeric#blank?()","spruz::blank::object#blank?()","spruz::blank::string#blank?()","spruz::blank::trueclass#blank?()","spruz::stringversion::version#build()","spruz::stringversion::version#build=()","spruz::stringcamelize#camelcase()","spruz::stringcamelize#camelize()","spruz::null#const_missing()","spruz::countby#count_by()","spruz::deepdup#deep_dup()","spruz::generator#each()","spruz::linesfile#each()","spruz::linesfile#empty?()","irb::examine()","spruz::limited#execute()","spruz::write::extended()","spruz::linesfile#file_linenumber()","spruz::linesfile::lineextension#filename()","spruz::bijection#fill()","spruz::linesfile::for_file()","spruz::linesfile::for_filename()","spruz::linesfile::for_lines()","spruz::bijection#freeze()","spruz::full#full?()","spruz::go#go()","spruz::blank::array::included()","spruz::blank::hash::included()","spruz::filebinary::included()","spruz::partialapplication::included()","spruz::round::included()","spruz::timedummy::included()","spruz::linesfile#inspect()","spruz::null#inspect()","spruz::stringversion::version#inspect()","spruz::linesfile#last_line_number()","spruz::linesfile#line()","spruz::linesfile#line_number=()","spruz::stringversion::version#major()","spruz::stringversion::version#major=()","spruz::linesfile#match_backward()","spruz::linesfile#match_forward()","module#memoize_cache_clear()","module#memoize_function()","module#memoize_method()","spruz::null#method_missing()","spruz::minimize#minimize()","spruz::minimize#minimize!()","spruz::stringversion::version#minor()","spruz::stringversion::version#minor=()","module#named()","object#named()","spruz::bijection::new()","spruz::generator::new()","spruz::limited::new()","spruz::linesfile::new()","spruz::stringversion::version::new()","spruz::timedummy::classmethods#new()","spruz::linesfile#next!()","spruz::timedummy::classmethods#now()","spruz::once#only_once()","spruz::partialapplication#partial()","spruz::stringversion::version#pred!()","spruz::blank::object#present?()","spruz::linesfile#previous!()","spruz::stringversion::version#revision()","spruz::stringversion::version#revision=()","spruz::linesfile#rewind()","spruz::round#round()","spruz::securewrite#secure_write()","spruz::shuffle#shuffle()","spruz::shuffle#shuffle!()","spruz::generator#size()","spruz::subhash#subhash()","hash#subhash!()","spruz::stringversion::version#succ!()","spruz::hashsymbolizekeysrecursive#symbolize_keys_recursive()","spruz::hashsymbolizekeysrecursive#symbolize_keys_recursive!()","spruz::stringversion::version#to_a()","spruz::toproc#to_proc()","spruz::linesfile#to_s()","spruz::null#to_s()","spruz::stringversion::version#to_s()","spruz::once#try_only_once()","spruz::stringunderscore#underscore()","spruz::uniqby#uniq_by()","array#uniq_by!()","spruz::minimize#unminimize()","spruz::minimize#unminimize!()","spruz::stringversion#version()","spruz::stringversion::version#version()","spruz::hashunion#|()",""],"info":[["Array","","Array.html","",""],["Enumerable","","Enumerable.html","",""],["File","","File.html","",""],["Float","","Float.html","",""],["Hash","","Hash.html","",""],["IO","","IO.html","","<p>class ::Object\n\n<pre>include Spruz::SecureWrite</pre>\n<p>end\n"],["IRB","","IRB.html","",""],["Integer","","Integer.html","",""],["Method","","Method.html","",""],["Module","","Module.html","",""],["Object","","Object.html","",""],["Proc","","Proc.html","",""],["Range","","Range.html","",""],["Spruz","","Spruz.html","",""],["Spruz::Attempt","","Spruz/Attempt.html","",""],["Spruz::Bijection","","Spruz/Bijection.html","",""],["Spruz::Blank","","Spruz/Blank.html","",""],["Spruz::Blank::Array","","Spruz/Blank/Array.html","",""],["Spruz::Blank::FalseClass","","Spruz/Blank/FalseClass.html","",""],["Spruz::Blank::Hash","","Spruz/Blank/Hash.html","",""],["Spruz::Blank::NilClass","","Spruz/Blank/NilClass.html","",""],["Spruz::Blank::Numeric","","Spruz/Blank/Numeric.html","",""],["Spruz::Blank::Object","","Spruz/Blank/Object.html","",""],["Spruz::Blank::String","","Spruz/Blank/String.html","",""],["Spruz::Blank::TrueClass","","Spruz/Blank/TrueClass.html","",""],["Spruz::CountBy","","Spruz/CountBy.html","",""],["Spruz::DeepDup","","Spruz/DeepDup.html","",""],["Spruz::FileBinary","","Spruz/FileBinary.html","",""],["Spruz::FileBinary::ClassMethods","","Spruz/FileBinary/ClassMethods.html","",""],["Spruz::FileBinary::Constants","","Spruz/FileBinary/Constants.html","",""],["Spruz::Full","","Spruz/Full.html","",""],["Spruz::GO","","Spruz/GO.html","",""],["Spruz::Generator","","Spruz/Generator.html","","<p>This class can create generator objects, that can produce all tuples, that\nwould be created by as many ...\n"],["Spruz::HashSymbolizeKeysRecursive","","Spruz/HashSymbolizeKeysRecursive.html","",""],["Spruz::HashUnion","","Spruz/HashUnion.html","",""],["Spruz::Limited","","Spruz/Limited.html","",""],["Spruz::LinesFile","","Spruz/LinesFile.html","",""],["Spruz::LinesFile::LineExtension","","Spruz/LinesFile/LineExtension.html","",""],["Spruz::Memoize","","Spruz/Memoize.html","",""],["Spruz::Minimize","","Spruz/Minimize.html","","<p>This module can be mixed into all classes, whose instances respond to the\n<p> &mdash; and size-methods, like for ...\n\n"],["Spruz::ModuleGroup","","Spruz/ModuleGroup.html","",""],["Spruz::Null","","Spruz/Null.html","","<p>Implementation of the null object pattern in Ruby.\n"],["Spruz::Once","","Spruz/Once.html","",""],["Spruz::P","","Spruz/P.html","",""],["Spruz::PartialApplication","","Spruz/PartialApplication.html","",""],["Spruz::RangePlus","","Spruz/RangePlus.html","",""],["Spruz::Round","","Spruz/Round.html","","<p>A bit more versatile rounding for Ruby\n"],["Spruz::SecureWrite","","Spruz/SecureWrite.html","",""],["Spruz::Shuffle","","Spruz/Shuffle.html","",""],["Spruz::StringCamelize","","Spruz/StringCamelize.html","",""],["Spruz::StringUnderscore","","Spruz/StringUnderscore.html","",""],["Spruz::StringVersion","","Spruz/StringVersion.html","",""],["Spruz::StringVersion::Version","","Spruz/StringVersion/Version.html","",""],["Spruz::Subhash","","Spruz/Subhash.html","",""],["Spruz::TimeDummy","","Spruz/TimeDummy.html","",""],["Spruz::TimeDummy::ClassMethods","","Spruz/TimeDummy/ClassMethods.html","",""],["Spruz::ToProc","","Spruz/ToProc.html","",""],["Spruz::UniqBy","","Spruz/UniqBy.html","",""],["Spruz::Write","","Spruz/Write.html","",""],["String","","String.html","",""],["Symbol","","Symbol.html","",""],["Time","","Time.html","",""],["+","Spruz::RangePlus","Spruz/RangePlus.html#method-i-2B","(other)",""],["<=>","Spruz::StringVersion::Version","Spruz/StringVersion/Version.html#method-i-3C-3D-3E","(other)",""],["==","Spruz::StringVersion::Version","Spruz/StringVersion/Version.html#method-i-3D-3D","(other)",""],["[]","Spruz::Bijection","Spruz/Bijection.html#method-c-5B-5D","(*pairs)",""],["[]","Spruz::Generator","Spruz/Generator.html#method-c-5B-5D","(*enums)","<p>Create a new Generator object from the enumberables <em>enums</em>.\n"],["[]","Spruz::ModuleGroup","Spruz/ModuleGroup.html#method-c-5B-5D","(*modules)",""],["[]","Spruz::StringVersion::Version","Spruz/StringVersion/Version.html#method-i-5B-5D","(index)",""],["[]=","Spruz::Bijection","Spruz/Bijection.html#method-i-5B-5D-3D","(key, value)",""],["[]=","Spruz::StringVersion::Version","Spruz/StringVersion/Version.html#method-i-5B-5D-3D","(index, value)",""],["__memoize_cache__","Module","Module.html#method-c-__memoize_cache__","()","<p>Returns the current memoize cache for all the stored objects and method\ncall results.\n"],["__memoize_cache__","Module","Module.html#method-i-__memoize_cache__","()","<p>Returns the current memoize cache for this Module.\n"],["__memoize_cache_delete__","Module","Module.html#method-c-__memoize_cache_delete__","()","<p>Finalizer to delete the stored result for a garbage collected object.\n"],["add_dimension","Spruz::Generator","Spruz/Generator.html#method-i-add_dimension","(enum, iterator = :each)","<p>Add another dimension to this generator. <em>enum</em> is an object, that\nought to respond to the <em>iterator</em> method ...\n"],["array","Spruz::StringVersion::Version","Spruz/StringVersion/Version.html#method-i-array","()",""],["ascii?","Spruz::FileBinary","Spruz/FileBinary.html#method-i-ascii-3F","(options = {})","<p>Returns true if FileBinary#binary? returns false, false if\nFileBinary#binary? returns true, and nil otherwise. ...\n"],["ascii?","Spruz::FileBinary::ClassMethods","Spruz/FileBinary/ClassMethods.html#method-i-ascii-3F","(name, options = {})","<p>Returns true if the file with name <code>name</code> is considered to be\nascii using the FileBinary#ascii? method. ...\n"],["attempt","Spruz::Attempt","Spruz/Attempt.html#method-i-attempt","(opts = {}, &block)",""],["binary?","Spruz::FileBinary","Spruz/FileBinary.html#method-i-binary-3F","(options = {})","<p>Returns true if this file is considered to be binary, false if it is not\nconsidered to be binary, and ...\n"],["binary?","Spruz::FileBinary::ClassMethods","Spruz/FileBinary/ClassMethods.html#method-i-binary-3F","(name, options = {})","<p>Returns true if the file with name <code>name</code> is considered to be\nbinary using the FileBinary#binary? method. ...\n"],["blank?","Spruz::Blank::FalseClass","Spruz/Blank/FalseClass.html#method-i-blank-3F","()",""],["blank?","Spruz::Blank::NilClass","Spruz/Blank/NilClass.html#method-i-blank-3F","()",""],["blank?","Spruz::Blank::Numeric","Spruz/Blank/Numeric.html#method-i-blank-3F","()",""],["blank?","Spruz::Blank::Object","Spruz/Blank/Object.html#method-i-blank-3F","()",""],["blank?","Spruz::Blank::String","Spruz/Blank/String.html#method-i-blank-3F","()",""],["blank?","Spruz::Blank::TrueClass","Spruz/Blank/TrueClass.html#method-i-blank-3F","()",""],["build","Spruz::StringVersion::Version","Spruz/StringVersion/Version.html#method-i-build","()",""],["build=","Spruz::StringVersion::Version","Spruz/StringVersion/Version.html#method-i-build-3D","(number)",""],["camelcase","Spruz::StringCamelize","Spruz/StringCamelize.html#method-i-camelcase","(first_letter = :upper)",""],["camelize","Spruz::StringCamelize","Spruz/StringCamelize.html#method-i-camelize","(first_letter = :upper)",""],["const_missing","Spruz::Null","Spruz/Null.html#method-i-const_missing","(*)",""],["count_by","Spruz::CountBy","Spruz/CountBy.html#method-i-count_by","(&b)",""],["deep_dup","Spruz::DeepDup","Spruz/DeepDup.html#method-i-deep_dup","()",""],["each","Spruz::Generator","Spruz/Generator.html#method-i-each","()","<p>Iterate over all tuples produced by this generator and yield to them.\n"],["each","Spruz::LinesFile","Spruz/LinesFile.html#method-i-each","(&block)",""],["empty?","Spruz::LinesFile","Spruz/LinesFile.html#method-i-empty-3F","()",""],["examine","IRB","IRB.html#method-c-examine","(binding = TOPLEVEL_BINDING)",""],["execute","Spruz::Limited","Spruz/Limited.html#method-i-execute","()","<p>Execute <em>maximum</em> number of threads in parallel.\n"],["extended","Spruz::Write","Spruz/Write.html#method-c-extended","(modul)",""],["file_linenumber","Spruz::LinesFile","Spruz/LinesFile.html#method-i-file_linenumber","()",""],["filename","Spruz::LinesFile::LineExtension","Spruz/LinesFile/LineExtension.html#method-i-filename","()",""],["fill","Spruz::Bijection","Spruz/Bijection.html#method-i-fill","()",""],["for_file","Spruz::LinesFile","Spruz/LinesFile.html#method-c-for_file","(file, line_number = nil)",""],["for_filename","Spruz::LinesFile","Spruz/LinesFile.html#method-c-for_filename","(filename, line_number = nil)",""],["for_lines","Spruz::LinesFile","Spruz/LinesFile.html#method-c-for_lines","(lines, line_number = nil)",""],["freeze","Spruz::Bijection","Spruz/Bijection.html#method-i-freeze","()",""],["full?","Spruz::Full","Spruz/Full.html#method-i-full-3F","(dispatch = nil, *args)","<p>Returns the object if it isn't blank (as in Object#blank?), otherwise it\nreturns nil. If a block was ...\n"],["go","Spruz::GO","Spruz/GO.html#method-i-go","(s, args = ARGV)","<p>Parses the argument array <em>args</em>, according to the pattern\n<em>s</em>, to retrieve the single character command ...\n"],["included","Spruz::Blank::Array","Spruz/Blank/Array.html#method-c-included","(modul)",""],["included","Spruz::Blank::Hash","Spruz/Blank/Hash.html#method-c-included","(modul)",""],["included","Spruz::FileBinary","Spruz/FileBinary.html#method-c-included","(modul)",""],["included","Spruz::PartialApplication","Spruz/PartialApplication.html#method-c-included","(modul)","<p>If this module is included into a Proc (or similar object), it tampers with\nits Proc#arity method.\n"],["included","Spruz::Round","Spruz/Round.html#method-c-included","(klass)",""],["included","Spruz::TimeDummy","Spruz/TimeDummy.html#method-c-included","(modul)",""],["inspect","Spruz::LinesFile","Spruz/LinesFile.html#method-i-inspect","()",""],["inspect","Spruz::Null","Spruz/Null.html#method-i-inspect","()",""],["inspect","Spruz::StringVersion::Version","Spruz/StringVersion/Version.html#method-i-inspect","()",""],["last_line_number","Spruz::LinesFile","Spruz/LinesFile.html#method-i-last_line_number","()",""],["line","Spruz::LinesFile","Spruz/LinesFile.html#method-i-line","()",""],["line_number=","Spruz::LinesFile","Spruz/LinesFile.html#method-i-line_number-3D","(number)",""],["major","Spruz::StringVersion::Version","Spruz/StringVersion/Version.html#method-i-major","()",""],["major=","Spruz::StringVersion::Version","Spruz/StringVersion/Version.html#method-i-major-3D","(number)",""],["match_backward","Spruz::LinesFile","Spruz/LinesFile.html#method-i-match_backward","(regexp, previous_after_match = false)",""],["match_forward","Spruz::LinesFile","Spruz/LinesFile.html#method-i-match_forward","(regexp, next_after_match = false)",""],["memoize_cache_clear","Module","Module.html#method-i-memoize_cache_clear","()","<p>Clear cached values for all methods and functions.\n"],["memoize_function","Module","Module.html#method-i-memoize_function","(*function_ids)","<p>Automatically memoize calls of the functions <code>function_ids</code>. The\nmemoized result does ONLY depend on the ...\n"],["memoize_method","Module","Module.html#method-i-memoize_method","(*method_ids)","<p>Automatically memoize calls of the the methods <code>method_ids</code>. The\nmemoized results do NOT ONLY depend on ...\n"],["method_missing","Spruz::Null","Spruz/Null.html#method-i-method_missing","(*)",""],["minimize","Spruz::Minimize","Spruz/Minimize.html#method-i-minimize","()","<p>Returns a minimized version of this object, that is successive elements are\nsubstituted with ranges  ...\n"],["minimize!","Spruz::Minimize","Spruz/Minimize.html#method-i-minimize-21","()","<p>First minimizes this object, then calls the replace method with the result.\n"],["minor","Spruz::StringVersion::Version","Spruz/StringVersion/Version.html#method-i-minor","()",""],["minor=","Spruz::StringVersion::Version","Spruz/StringVersion/Version.html#method-i-minor-3D","(number)",""],["named","Module","Module.html#method-i-named","(name, method, *args, &named_block)",""],["named","Object","Object.html#method-i-named","(name, method, *args, &named_block)",""],["new","Spruz::Bijection","Spruz/Bijection.html#method-c-new","(inverted = Bijection.new(self))",""],["new","Spruz::Generator","Spruz/Generator.html#method-c-new","(enums)","<p>Create a new Generator instance. Use the objects in the Array\n<em>enums</em> as dimensions. The should all respond ...\n"],["new","Spruz::Limited","Spruz/Limited.html#method-c-new","(maximum)","<p>Create a Limited instance, that runs <em>maximum</em> threads at most.\n"],["new","Spruz::LinesFile","Spruz/LinesFile.html#method-c-new","(lines, line_number = nil)",""],["new","Spruz::StringVersion::Version","Spruz/StringVersion/Version.html#method-c-new","(string)",""],["new","Spruz::TimeDummy::ClassMethods","Spruz/TimeDummy/ClassMethods.html#method-i-new","()",""],["next!","Spruz::LinesFile","Spruz/LinesFile.html#method-i-next-21","()",""],["now","Spruz::TimeDummy::ClassMethods","Spruz/TimeDummy/ClassMethods.html#method-i-now","()",""],["only_once","Spruz::Once","Spruz/Once.html#method-i-only_once","(lock_filename = nil, locking_constant = nil)",""],["partial","Spruz::PartialApplication","Spruz/PartialApplication.html#method-i-partial","(*args)","<p>Create a partial application of this Proc (or similar object) using\n<em>args</em> as the already applied arguments. ...\n"],["pred!","Spruz::StringVersion::Version","Spruz/StringVersion/Version.html#method-i-pred-21","()",""],["present?","Spruz::Blank::Object","Spruz/Blank/Object.html#method-i-present-3F","()",""],["previous!","Spruz::LinesFile","Spruz/LinesFile.html#method-i-previous-21","()",""],["revision","Spruz::StringVersion::Version","Spruz/StringVersion/Version.html#method-i-revision","()",""],["revision=","Spruz::StringVersion::Version","Spruz/StringVersion/Version.html#method-i-revision-3D","(number)",""],["rewind","Spruz::LinesFile","Spruz/LinesFile.html#method-i-rewind","()",""],["round","Spruz::Round","Spruz/Round.html#method-i-round","(places = nil)",""],["secure_write","Spruz::SecureWrite","Spruz/SecureWrite.html#method-i-secure_write","(filename, content = nil, mode = 'w')","<p>Write to a file atomically\n"],["shuffle","Spruz::Shuffle","Spruz/Shuffle.html#method-i-shuffle","()",""],["shuffle!","Spruz::Shuffle","Spruz/Shuffle.html#method-i-shuffle-21","()",""],["size","Spruz::Generator","Spruz/Generator.html#method-i-size","()","<p>Return the size of this generator, that is the number of its dimensions.\n"],["subhash","Spruz::Subhash","Spruz/Subhash.html#method-i-subhash","(*patterns)","<p>Create a subhash from this hash, that only contains key-value pairs\nmatching <code>patterns</code> and return it. ...\n"],["subhash!","Hash","Hash.html#method-i-subhash-21","(*patterns)",""],["succ!","Spruz::StringVersion::Version","Spruz/StringVersion/Version.html#method-i-succ-21","()",""],["symbolize_keys_recursive","Spruz::HashSymbolizeKeysRecursive","Spruz/HashSymbolizeKeysRecursive.html#method-i-symbolize_keys_recursive","()",""],["symbolize_keys_recursive!","Spruz::HashSymbolizeKeysRecursive","Spruz/HashSymbolizeKeysRecursive.html#method-i-symbolize_keys_recursive-21","()",""],["to_a","Spruz::StringVersion::Version","Spruz/StringVersion/Version.html#method-i-to_a","()",""],["to_proc","Spruz::ToProc","Spruz/ToProc.html#method-i-to_proc","()",""],["to_s","Spruz::LinesFile","Spruz/LinesFile.html#method-i-to_s","()",""],["to_s","Spruz::Null","Spruz/Null.html#method-i-to_s","()",""],["to_s","Spruz::StringVersion::Version","Spruz/StringVersion/Version.html#method-i-to_s","()",""],["try_only_once","Spruz::Once","Spruz/Once.html#method-i-try_only_once","(lock_filename = nil, locking_constant = nil, &block)",""],["underscore","Spruz::StringUnderscore","Spruz/StringUnderscore.html#method-i-underscore","()",""],["uniq_by","Spruz::UniqBy","Spruz/UniqBy.html#method-i-uniq_by","(&b)",""],["uniq_by!","Array","Array.html#method-i-uniq_by-21","(&b)",""],["unminimize","Spruz::Minimize","Spruz/Minimize.html#method-i-unminimize","()","<p>Invert a minimized version of an object. Some small examples:\n\n<pre>[ 'A'..'C', 'G'..'G', 'K'..'M' ].unminimize ...</pre>\n"],["unminimize!","Spruz::Minimize","Spruz/Minimize.html#method-i-unminimize-21","()","<p>Invert a minimized version of this object in place.\n"],["version","Spruz::StringVersion","Spruz/StringVersion.html#method-i-version","()",""],["version","Spruz::StringVersion::Version","Spruz/StringVersion/Version.html#method-i-version","()",""],["|","Spruz::HashUnion","Spruz/HashUnion.html#method-i-7C","(other)",""],["README","","README_rdoc.html","","<p>Spruz - Useful tools library in Ruby\n<p>Description\n<p>Non yet.\n"]]}}
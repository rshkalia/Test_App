var search_data = {"index":{"searchIndex":["launchy","application","browser","commandline","paths","version","app_list()","application_classes()","browser()","command_line()","cygwin_app_list()","darwin_app_list()","desktop_environment_browser_launchers()","desktop_environment_browser_launchers()","fallback_browsers()","fallback_browsers()","find_application_class_for()","find_executable()","find_executable()","handle?()","inherited()","known_os_families()","lib_path()","log()","my_os()","my_os()","my_os_family()","my_os_family()","new()","nix_app_list()","nix_desktop_environment()","open()","parser()","require_all_libs_relative_to()","root_dir()","run()","run()","run()","sub_path()","testing_app_list()","to_a()","to_s()","visit()","windows_app_list()","history","license","readme"],"longSearchIndex":["launchy","launchy::application","launchy::browser","launchy::commandline","launchy::paths","launchy::version","launchy::application#app_list()","launchy::application::application_classes()","launchy::browser#browser()","launchy::command_line()","launchy::application#cygwin_app_list()","launchy::application#darwin_app_list()","launchy::browser::desktop_environment_browser_launchers()","launchy::browser#desktop_environment_browser_launchers()","launchy::browser::fallback_browsers()","launchy::browser#fallback_browsers()","launchy::application::find_application_class_for()","launchy::application::find_executable()","launchy::application#find_executable()","launchy::browser::handle?()","launchy::application::inherited()","launchy::application::known_os_families()","launchy::paths::lib_path()","launchy::log()","launchy::application#my_os()","launchy::application::my_os()","launchy::application#my_os_family()","launchy::application::my_os_family()","launchy::browser::new()","launchy::browser#nix_app_list()","launchy::application#nix_desktop_environment()","launchy::open()","launchy::commandline#parser()","launchy::require_all_libs_relative_to()","launchy::paths::root_dir()","launchy::application#run()","launchy::browser::run()","launchy::commandline#run()","launchy::paths::sub_path()","launchy::application#testing_app_list()","launchy::version::to_a()","launchy::version::to_s()","launchy::browser#visit()","launchy::application#windows_app_list()","","",""],"info":[["Launchy","","Launchy.html","",""],["Launchy::Application","","Launchy/Application.html","",""],["Launchy::Browser","","Launchy/Browser.html","",""],["Launchy::CommandLine","","Launchy/CommandLine.html","",""],["Launchy::Paths","","Launchy/Paths.html","","<p>Access to various paths inside the project programatically\n"],["Launchy::Version","","Launchy/Version.html","",""],["app_list","Launchy::Application","Launchy/Application.html#method-i-app_list","()","<p>returns the list of command line application names for the current os.  The\nlist returned should only ...\n"],["application_classes","Launchy::Application","Launchy/Application.html#method-c-application_classes","()",""],["browser","Launchy::Browser","Launchy/Browser.html#method-i-browser","()","<p>return the full command line path to the browser or nil\n"],["command_line","Launchy","Launchy.html#method-c-command_line","()","<p>Create an instance of the commandline application of launchy\n"],["cygwin_app_list","Launchy::Application","Launchy/Application.html#method-i-cygwin_app_list","()","<p>Cygwin uses the windows start but through an explicit execution of the cmd\nshell\n"],["darwin_app_list","Launchy::Application","Launchy/Application.html#method-i-darwin_app_list","()","<p>On darwin a good general default is the 'open' executable.\n"],["desktop_environment_browser_launchers","Launchy::Browser","Launchy/Browser.html#method-c-desktop_environment_browser_launchers","()",""],["desktop_environment_browser_launchers","Launchy::Browser","Launchy/Browser.html#method-i-desktop_environment_browser_launchers","()",""],["fallback_browsers","Launchy::Browser","Launchy/Browser.html#method-c-fallback_browsers","()",""],["fallback_browsers","Launchy::Browser","Launchy/Browser.html#method-i-fallback_browsers","()",""],["find_application_class_for","Launchy::Application","Launchy/Application.html#method-c-find_application_class_for","(*args)",""],["find_executable","Launchy::Application","Launchy/Application.html#method-c-find_executable","(bin,*paths)","<p>find an executable in the available paths mkrf did such a good job on this\nI had to borrow it.\n"],["find_executable","Launchy::Application","Launchy/Application.html#method-i-find_executable","(bin,*paths)","<p>find an executable in the available paths\n"],["handle?","Launchy::Browser","Launchy/Browser.html#method-c-handle-3F","(*args)","<p>return true if this class can handle the given parameter(s)\n"],["inherited","Launchy::Application","Launchy/Application.html#method-c-inherited","(sub_class)",""],["known_os_families","Launchy::Application","Launchy/Application.html#method-c-known_os_families","()",""],["lib_path","Launchy::Paths","Launchy/Paths.html#method-c-lib_path","( *args )","<p>Returns The full expanded path of the <code>lib</code> directory below\n<em>root_dir</em>.  All parameters passed in are joined ...\n"],["log","Launchy","Launchy.html#method-c-log","(msg)","<p>Setting the LAUNCHY_DEBUG environment variable to 'true' will spew debug\ninformation to $stderr\n"],["my_os","Launchy::Application","Launchy/Application.html#method-i-my_os","()","<p>return the current 'host_os' string from ruby's configuration\n"],["my_os","Launchy::Application","Launchy/Application.html#method-c-my_os","()","<p>return the current 'host_os' string from ruby's configuration\n"],["my_os_family","Launchy::Application","Launchy/Application.html#method-i-my_os_family","(test_os = my_os)","<p>detect what the current os is and return :windows, :darwin, :nix, or\n:cygwin\n"],["my_os_family","Launchy::Application","Launchy/Application.html#method-c-my_os_family","(test_os = my_os)","<p>detect what the current os is and return :windows, :darwin or :nix\n"],["new","Launchy::Browser","Launchy/Browser.html#method-c-new","()",""],["nix_app_list","Launchy::Browser","Launchy/Browser.html#method-i-nix_app_list","()","<p>Find a list of potential browser applications to run on *nix machines. The\norder is:\n\n<pre>1) What is in ENV['LAUNCHY_BROWSER'] ...</pre>\n"],["nix_desktop_environment","Launchy::Application","Launchy/Application.html#method-i-nix_desktop_environment","()","<p>Determine the appropriate desktop environment for *nix machine.  Currently\nthis is linux centric.  The ...\n"],["open","Launchy","Launchy.html#method-c-open","(*params)","<p>Convenience method to launch an item\n"],["parser","Launchy::CommandLine","Launchy/CommandLine.html#method-i-parser","()",""],["require_all_libs_relative_to","Launchy","Launchy.html#method-c-require_all_libs_relative_to","(fname)","<p>Utility method to require all files ending in .rb in the directory with the\nsame name as this file minus ...\n"],["root_dir","Launchy::Paths","Launchy/Paths.html#method-c-root_dir","()","<p>Returns The full expanded path of the parent directory of <code>lib</code>\ngoing up the path from the current file. ...\n"],["run","Launchy::Application","Launchy/Application.html#method-i-run","(cmd,*args)","<p>run the command\n"],["run","Launchy::Browser","Launchy/Browser.html#method-c-run","(*args)",""],["run","Launchy::CommandLine","Launchy/CommandLine.html#method-i-run","(argv = ARGV)",""],["sub_path","Launchy::Paths","Launchy/Paths.html#method-c-sub_path","( sub, *args )","<p>Returns the full expanded path of the <code>sub</code> directory below\n_root_dir.  All <em>arg</em> parameters passed in are ...\n"],["testing_app_list","Launchy::Application","Launchy/Application.html#method-i-testing_app_list","()","<p>used only for running tests\n"],["to_a","Launchy::Version","Launchy/Version.html#method-c-to_a","()",""],["to_s","Launchy::Version","Launchy/Version.html#method-c-to_s","()",""],["visit","Launchy::Browser","Launchy/Browser.html#method-i-visit","(url)","<p>launch the browser at the appointed url\n"],["windows_app_list","Launchy::Application","Launchy/Application.html#method-i-windows_app_list","()","<p>On windows a good general default is the 'start' Command Shell command\n"],["HISTORY","","HISTORY.html","","<p>Launchy Changlog\n<p>Version 0.3.7 - 2010-07-19\n<p>Fix launchy on windows (mikefarmer)\n"],["LICENSE","","LICENSE.html","","<p>ISC LICENSE - opensource.org/licenses/isc-license.txt\n<p>Copyright (c) 2007-2009 Jeremy Hinegardner\n<p>Permission ...\n"],["README","","README.html","","<p>launchy\n<p>Homepage\n<p>Rubyforge Project\n"]]}}
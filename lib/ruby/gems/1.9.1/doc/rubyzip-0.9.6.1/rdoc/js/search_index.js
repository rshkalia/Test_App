var search_data = {"index":{"searchIndex":["bugfix","tempfile","ioextras","abstractinputstream","abstractoutputstream","fakeio","object","tempfile","zip","zipcentraldirectory","zipcompressionmethoderror","zipdestinationfileexistserror","zipentry","zipentryexistserror","zipentrynameerror","ziperror","zipextrafield","generic","iunix","universaltime","zipfile","zipfilesystem","zipfsdir","zipfsfile","zipfsstat","zipinputstream","zipinternalerror","zipoutputstream","zipstreamabledirectory","zipstreamablestream","<<()","<=>()","==()","==()","==()","==()","add()","add_buffer()","atime()","basename()","blksize()","blockdev?()","blocks()","c_dir_length()","c_dir_size()","chardev?()","chdir()","chmod()","chown()","chroot()","close()","close()","close()","close_buffer()","comment_in()","commit()","commit_required?()","copy_raw_entry()","create()","ctime()","delegate_to_fs_file()","delete()","delete()","dev()","dir()","directory?()","directory?()","dirname()","each()","each()","each_line()","entries()","entries()","eof()","eof?()","executable?()","executable_real?()","exist?()","exists?()","expand_path()","extract()","extract()","file()","file?()","file?()","find_entry()","finish()","flush()","foreach()","foreach()","foreach()","ftype()","ftype()","get_entry()","get_input_stream()","get_input_stream()","get_input_stream()","get_next_entry()","get_output_stream()","get_output_stream()","get_raw_input_stream()","gets()","getwd()","gid()","grpowned?()","initial_parse()","ino()","input_finished?()","is_directory()","join()","kind_of?()","kind_of?()","length()","link()","local_length()","local_size()","lstat()","merge()","merge()","merge()","mkdir()","mkdir()","mode()","mtime()","mtime()","name()","name_encoding()","name_in()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","nlink()","open()","open()","open()","open()","open()","open_buffer()","open_entry()","owned?()","pack_for_c_dir()","pack_for_c_dir()","pack_for_local()","pack_for_local()","parent_as_string()","pipe()","pipe?()","popen()","print()","printf()","produce_input()","put_next_entry()","putc()","puts()","pwd()","rdev()","rdev_major()","rdev_minor()","read()","read()","read()","read_local_entry()","readable?()","readable_real?()","readline()","readlines()","readlines()","readlink()","register_map()","remove()","rename()","rename()","replace()","rewind()","rmdir()","setgid?()","setuid?()","size()","size()","size()","size?()","socket?()","split()","stat()","sticky?()","symlink()","symlink?()","symlink?()","sysread()","time()","time=()","to_c_dir_bin()","to_c_dir_bin()","to_local_bin()","to_local_bin()","to_s()","to_s()","to_s()","truncate()","uid()","umask()","unlink()","unlink()","utime()","writable?()","writable_real?()","write()","write_buffer()","write_buffer()","write_to_zip_output_stream()","zero?()"],"longSearchIndex":["bugfix","bugfix::tempfile","ioextras","ioextras::abstractinputstream","ioextras::abstractoutputstream","ioextras::fakeio","object","object::tempfile","zip","zip::zipcentraldirectory","zip::zipcompressionmethoderror","zip::zipdestinationfileexistserror","zip::zipentry","zip::zipentryexistserror","zip::zipentrynameerror","zip::ziperror","zip::zipextrafield","zip::zipextrafield::generic","zip::zipextrafield::iunix","zip::zipextrafield::universaltime","zip::zipfile","zip::zipfilesystem","zip::zipfilesystem::zipfsdir","zip::zipfilesystem::zipfsfile","zip::zipfilesystem::zipfsfile::zipfsstat","zip::zipinputstream","zip::zipinternalerror","zip::zipoutputstream","zip::zipstreamabledirectory","zip::zipstreamablestream","zip::zipoutputstream#<<()","zip::zipentry#<=>()","zip::zipentry#==()","zip::zipextrafield::generic#==()","zip::zipextrafield::iunix#==()","zip::zipextrafield::universaltime#==()","zip::zipfile#add()","zip::zipfile::add_buffer()","zip::zipfilesystem::zipfsfile#atime()","zip::zipfilesystem::zipfsfile#basename()","zip::zipfilesystem::zipfsfile::zipfsstat#blksize()","zip::zipfilesystem::zipfsfile#blockdev?()","zip::zipfilesystem::zipfsfile::zipfsstat#blocks()","zip::zipextrafield#c_dir_length()","zip::zipextrafield#c_dir_size()","zip::zipfilesystem::zipfsfile#chardev?()","zip::zipfilesystem::zipfsdir#chdir()","zip::zipfilesystem::zipfsfile#chmod()","zip::zipfilesystem::zipfsfile#chown()","zip::zipfilesystem::zipfsdir#chroot()","zip::zipfile#close()","zip::zipinputstream#close()","zip::zipoutputstream#close()","zip::zipoutputstream#close_buffer()","zip::zipentry#comment_in()","zip::zipfile#commit()","zip::zipfile#commit_required?()","zip::zipoutputstream#copy_raw_entry()","zip::zipextrafield#create()","zip::zipfilesystem::zipfsfile#ctime()","zip::zipfilesystem::zipfsfile::zipfsstat::delegate_to_fs_file()","zip::zipfilesystem::zipfsdir#delete()","zip::zipfilesystem::zipfsfile#delete()","zip::zipfilesystem::zipfsfile::zipfsstat#dev()","zip::zipfilesystem#dir()","zip::zipentry#directory?()","zip::zipfilesystem::zipfsfile#directory?()","zip::zipfilesystem::zipfsfile#dirname()","ioextras::abstractinputstream#each()","zip::zipcentraldirectory#each()","ioextras::abstractinputstream#each_line()","zip::zipcentraldirectory#entries()","zip::zipfilesystem::zipfsdir#entries()","zip::zipinputstream#eof()","zip::zipinputstream#eof?()","zip::zipfilesystem::zipfsfile#executable?()","zip::zipfilesystem::zipfsfile#executable_real?()","zip::zipfilesystem::zipfsfile#exist?()","zip::zipfilesystem::zipfsfile#exists?()","zip::zipfilesystem::zipfsfile#expand_path()","zip::zipentry#extract()","zip::zipfile#extract()","zip::zipfilesystem#file()","zip::zipentry#file?()","zip::zipfilesystem::zipfsfile#file?()","zip::zipfile#find_entry()","zip::zipoutputstream#finish()","ioextras::abstractinputstream#flush()","zip::zipfile::foreach()","zip::zipfilesystem::zipfsdir#foreach()","zip::zipfilesystem::zipfsfile#foreach()","zip::zipfilesystem::zipfsfile#ftype()","zip::zipfilesystem::zipfsfile::zipfsstat#ftype()","zip::zipfile#get_entry()","zip::zipentry#get_input_stream()","zip::zipfile#get_input_stream()","zip::zipstreamablestream#get_input_stream()","zip::zipinputstream#get_next_entry()","zip::zipfile#get_output_stream()","zip::zipstreamablestream#get_output_stream()","zip::zipentry#get_raw_input_stream()","ioextras::abstractinputstream#gets()","zip::zipfilesystem::zipfsdir#getwd()","zip::zipfilesystem::zipfsfile::zipfsstat#gid()","zip::zipfilesystem::zipfsfile#grpowned?()","zip::zipextrafield::generic#initial_parse()","zip::zipfilesystem::zipfsfile::zipfsstat#ino()","zip::zipinputstream#input_finished?()","zip::zipentry#is_directory()","zip::zipfilesystem::zipfsfile#join()","ioextras::fakeio#kind_of?()","zip::zipfilesystem::zipfsfile::zipfsstat#kind_of?()","zip::zipextrafield#length()","zip::zipfilesystem::zipfsfile#link()","zip::zipextrafield#local_length()","zip::zipextrafield#local_size()","zip::zipfilesystem::zipfsfile#lstat()","zip::zipextrafield#merge()","zip::zipextrafield::iunix#merge()","zip::zipextrafield::universaltime#merge()","zip::zipfile#mkdir()","zip::zipfilesystem::zipfsdir#mkdir()","zip::zipfilesystem::zipfsfile::zipfsstat#mode()","zip::zipentry#mtime()","zip::zipfilesystem::zipfsfile#mtime()","zip::zipextrafield::generic::name()","zip::zipentry#name_encoding()","zip::zipentry#name_in()","ioextras::abstractinputstream::new()","zip::zipentry::new()","zip::zipextrafield::new()","zip::zipextrafield::iunix::new()","zip::zipextrafield::universaltime::new()","zip::zipfile::new()","zip::zipfilesystem::zipfsdir#new()","zip::zipfilesystem::zipfsdir::new()","zip::zipfilesystem::zipfsfile#new()","zip::zipfilesystem::zipfsfile::new()","zip::zipfilesystem::zipfsfile::zipfsstat::new()","zip::zipinputstream::new()","zip::zipoutputstream::new()","zip::zipstreamabledirectory::new()","zip::zipstreamablestream::new()","zip::zipfilesystem::zipfsfile::zipfsstat#nlink()","zip::zipfile::open()","zip::zipfilesystem::zipfsdir#open()","zip::zipfilesystem::zipfsfile#open()","zip::zipinputstream::open()","zip::zipoutputstream::open()","zip::zipinputstream::open_buffer()","zip::zipinputstream#open_entry()","zip::zipfilesystem::zipfsfile#owned?()","zip::zipextrafield::iunix#pack_for_c_dir()","zip::zipextrafield::universaltime#pack_for_c_dir()","zip::zipextrafield::iunix#pack_for_local()","zip::zipextrafield::universaltime#pack_for_local()","zip::zipentry#parent_as_string()","zip::zipfilesystem::zipfsfile#pipe()","zip::zipfilesystem::zipfsfile#pipe?()","zip::zipfilesystem::zipfsfile#popen()","ioextras::abstractoutputstream#print()","ioextras::abstractoutputstream#printf()","zip::zipinputstream#produce_input()","zip::zipoutputstream#put_next_entry()","ioextras::abstractoutputstream#putc()","ioextras::abstractoutputstream#puts()","zip::zipfilesystem::zipfsdir#pwd()","zip::zipfilesystem::zipfsfile::zipfsstat#rdev()","zip::zipfilesystem::zipfsfile::zipfsstat#rdev_major()","zip::zipfilesystem::zipfsfile::zipfsstat#rdev_minor()","ioextras::abstractinputstream#read()","zip::zipfile#read()","zip::zipfilesystem::zipfsfile#read()","zip::zipentry::read_local_entry()","zip::zipfilesystem::zipfsfile#readable?()","zip::zipfilesystem::zipfsfile#readable_real?()","ioextras::abstractinputstream#readline()","ioextras::abstractinputstream#readlines()","zip::zipfilesystem::zipfsfile#readlines()","zip::zipfilesystem::zipfsfile#readlink()","zip::zipextrafield::generic::register_map()","zip::zipfile#remove()","zip::zipfile#rename()","zip::zipfilesystem::zipfsfile#rename()","zip::zipfile#replace()","zip::zipinputstream#rewind()","zip::zipfilesystem::zipfsdir#rmdir()","zip::zipfilesystem::zipfsfile#setgid?()","zip::zipfilesystem::zipfsfile#setuid?()","zip::zipcentraldirectory#size()","zip::zipextrafield#size()","zip::zipfilesystem::zipfsfile#size()","zip::zipfilesystem::zipfsfile#size?()","zip::zipfilesystem::zipfsfile#socket?()","zip::zipfilesystem::zipfsfile#split()","zip::zipfilesystem::zipfsfile#stat()","zip::zipfilesystem::zipfsfile#sticky?()","zip::zipfilesystem::zipfsfile#symlink()","zip::zipentry#symlink?()","zip::zipfilesystem::zipfsfile#symlink?()","zip::zipinputstream#sysread()","zip::zipentry#time()","zip::zipentry#time=()","zip::zipextrafield#to_c_dir_bin()","zip::zipextrafield::generic#to_c_dir_bin()","zip::zipextrafield#to_local_bin()","zip::zipextrafield::generic#to_local_bin()","zip::zipentry#to_s()","zip::zipextrafield#to_s()","zip::zipfile#to_s()","zip::zipfilesystem::zipfsfile#truncate()","zip::zipfilesystem::zipfsfile::zipfsstat#uid()","zip::zipfilesystem::zipfsfile#umask()","zip::zipfilesystem::zipfsdir#unlink()","zip::zipfilesystem::zipfsfile#unlink()","zip::zipfilesystem::zipfsfile#utime()","zip::zipfilesystem::zipfsfile#writable?()","zip::zipfilesystem::zipfsfile#writable_real?()","ioextras::abstractoutputstream#write()","zip::zipfile#write_buffer()","zip::zipoutputstream::write_buffer()","zip::zipstreamablestream#write_to_zip_output_stream()","zip::zipfilesystem::zipfsfile#zero?()"],"info":[["BugFix","","BugFix.html","",""],["BugFix::Tempfile","","BugFix/Tempfile.html","",""],["IOExtras","","IOExtras.html","",""],["IOExtras::AbstractInputStream","","IOExtras/AbstractInputStream.html","","<p>Implements many of the convenience methods of IO such as gets, getc,\nreadline and readlines  depends ...\n"],["IOExtras::AbstractOutputStream","","IOExtras/AbstractOutputStream.html","","<p>Implements many of the output convenience methods of IO. relies on &lt;&lt;\n"],["IOExtras::FakeIO","","IOExtras/FakeIO.html","","<p>Implements kind_of? in order to pretend to be an IO object\n"],["Object","","Object.html","",""],["Object::Tempfile","","BugFix/Tempfile.html","",""],["Zip","","Zip.html","",""],["Zip::ZipCentralDirectory","","Zip/ZipCentralDirectory.html","",""],["Zip::ZipCompressionMethodError","","Zip/ZipCompressionMethodError.html","",""],["Zip::ZipDestinationFileExistsError","","Zip/ZipDestinationFileExistsError.html","",""],["Zip::ZipEntry","","Zip/ZipEntry.html","",""],["Zip::ZipEntryExistsError","","Zip/ZipEntryExistsError.html","",""],["Zip::ZipEntryNameError","","Zip/ZipEntryNameError.html","",""],["Zip::ZipError","","Zip/ZipError.html","",""],["Zip::ZipExtraField","","Zip/ZipExtraField.html","",""],["Zip::ZipExtraField::Generic","","Zip/ZipExtraField/Generic.html","","<p>Meta class for extra fields\n"],["Zip::ZipExtraField::IUnix","","Zip/ZipExtraField/IUnix.html","","<p>Info-ZIP Extra for UNIX uid/gid\n"],["Zip::ZipExtraField::UniversalTime","","Zip/ZipExtraField/UniversalTime.html","","<p>Info-ZIP Additional timestamp field\n"],["Zip::ZipFile","","Zip/ZipFile.html","","<p>ZipFile is modeled after java.util.zip.ZipFile from the Java SDK. The most\nimportant methods are those ...\n"],["Zip::ZipFileSystem","","Zip/ZipFileSystem.html","","<p>The ZipFileSystem API provides an API for accessing entries in  a zip\narchive that is similar to ruby's ...\n"],["Zip::ZipFileSystem::ZipFsDir","","Zip/ZipFileSystem/ZipFsDir.html","","<p>Instances of this class are normally accessed via the accessor\nZipFile::dir. An instance of ZipFsDir ...\n"],["Zip::ZipFileSystem::ZipFsFile","","Zip/ZipFileSystem/ZipFsFile.html","","<p>Instances of this class are normally accessed via the accessor\nZipFile::file. An instance of ZipFsFile ...\n"],["Zip::ZipFileSystem::ZipFsFile::ZipFsStat","","Zip/ZipFileSystem/ZipFsFile/ZipFsStat.html","","<p>protected :dir\n"],["Zip::ZipInputStream","","Zip/ZipInputStream.html","","<p>ZipInputStream is the basic class for reading zip entries in a  zip file.\nIt is possible to create a ...\n"],["Zip::ZipInternalError","","Zip/ZipInternalError.html","",""],["Zip::ZipOutputStream","","Zip/ZipOutputStream.html","","<p>ZipOutputStream is the basic class for writing zip files. It is possible to\ncreate a ZipOutputStream ...\n"],["Zip::ZipStreamableDirectory","","Zip/ZipStreamableDirectory.html","",""],["Zip::ZipStreamableStream","","Zip/ZipStreamableStream.html","",""],["<<","Zip::ZipOutputStream","Zip/ZipOutputStream.html#method-i-3C-3C","(data)","<p>Modeled after IO.&lt;&lt;\n"],["<=>","Zip::ZipEntry","Zip/ZipEntry.html#method-i-3C-3D-3E","(other)",""],["==","Zip::ZipEntry","Zip/ZipEntry.html#method-i-3D-3D","(other)",""],["==","Zip::ZipExtraField::Generic","Zip/ZipExtraField/Generic.html#method-i-3D-3D","(other)",""],["==","Zip::ZipExtraField::IUnix","Zip/ZipExtraField/IUnix.html#method-i-3D-3D","(other)",""],["==","Zip::ZipExtraField::UniversalTime","Zip/ZipExtraField/UniversalTime.html#method-i-3D-3D","(other)",""],["add","Zip::ZipFile","Zip/ZipFile.html#method-i-add","(entry, srcPath, &continueOnExistsProc)","<p>Convenience method for adding the contents of a file to the archive\n"],["add_buffer","Zip::ZipFile","Zip/ZipFile.html#method-c-add_buffer","()","<p>Same as #open. But outputs data to a buffer instead of a file\n"],["atime","Zip::ZipFileSystem::ZipFsFile","Zip/ZipFileSystem/ZipFsFile.html#method-i-atime","(fileName)",""],["basename","Zip::ZipFileSystem::ZipFsFile","Zip/ZipFileSystem/ZipFsFile.html#method-i-basename","(fileName)",""],["blksize","Zip::ZipFileSystem::ZipFsFile::ZipFsStat","Zip/ZipFileSystem/ZipFsFile/ZipFsStat.html#method-i-blksize","()",""],["blockdev?","Zip::ZipFileSystem::ZipFsFile","Zip/ZipFileSystem/ZipFsFile.html#method-i-blockdev-3F","(filename)",""],["blocks","Zip::ZipFileSystem::ZipFsFile::ZipFsStat","Zip/ZipFileSystem/ZipFsFile/ZipFsStat.html#method-i-blocks","()",""],["c_dir_length","Zip::ZipExtraField","Zip/ZipExtraField.html#method-i-c_dir_length","()",""],["c_dir_size","Zip::ZipExtraField","Zip/ZipExtraField.html#method-i-c_dir_size","()",""],["chardev?","Zip::ZipFileSystem::ZipFsFile","Zip/ZipFileSystem/ZipFsFile.html#method-i-chardev-3F","(filename)",""],["chdir","Zip::ZipFileSystem::ZipFsDir","Zip/ZipFileSystem/ZipFsDir.html#method-i-chdir","(aDirectoryName)",""],["chmod","Zip::ZipFileSystem::ZipFsFile","Zip/ZipFileSystem/ZipFsFile.html#method-i-chmod","(modeInt, *filenames)",""],["chown","Zip::ZipFileSystem::ZipFsFile","Zip/ZipFileSystem/ZipFsFile.html#method-i-chown","(ownerInt, groupInt, *filenames)",""],["chroot","Zip::ZipFileSystem::ZipFsDir","Zip/ZipFileSystem/ZipFsDir.html#method-i-chroot","(*args)",""],["close","Zip::ZipFile","Zip/ZipFile.html#method-i-close","()","<p>Closes the zip file committing any changes that has been made.\n"],["close","Zip::ZipInputStream","Zip/ZipInputStream.html#method-i-close","()",""],["close","Zip::ZipOutputStream","Zip/ZipOutputStream.html#method-i-close","()","<p>Closes the stream and writes the central directory to the zip file\n"],["close_buffer","Zip::ZipOutputStream","Zip/ZipOutputStream.html#method-i-close_buffer","()","<p>Closes the stream and writes the central directory to the zip file\n"],["comment_in","Zip::ZipEntry","Zip/ZipEntry.html#method-i-comment_in","(enc)","<p>Returns the name in the encoding specified by enc\n"],["commit","Zip::ZipFile","Zip/ZipFile.html#method-i-commit","()","<p>Commits changes that has been made since the previous commit to the zip\narchive.\n"],["commit_required?","Zip::ZipFile","Zip/ZipFile.html#method-i-commit_required-3F","()","<p>Returns true if any changes has been made to this archive since the\nprevious commit\n"],["copy_raw_entry","Zip::ZipOutputStream","Zip/ZipOutputStream.html#method-i-copy_raw_entry","(entry)",""],["create","Zip::ZipExtraField","Zip/ZipExtraField.html#method-i-create","(name)",""],["ctime","Zip::ZipFileSystem::ZipFsFile","Zip/ZipFileSystem/ZipFsFile.html#method-i-ctime","(fileName)",""],["delegate_to_fs_file","Zip::ZipFileSystem::ZipFsFile::ZipFsStat","Zip/ZipFileSystem/ZipFsFile/ZipFsStat.html#method-c-delegate_to_fs_file","(*methods)",""],["delete","Zip::ZipFileSystem::ZipFsDir","Zip/ZipFileSystem/ZipFsDir.html#method-i-delete","(entryName)",""],["delete","Zip::ZipFileSystem::ZipFsFile","Zip/ZipFileSystem/ZipFsFile.html#method-i-delete","(*args)",""],["dev","Zip::ZipFileSystem::ZipFsFile::ZipFsStat","Zip/ZipFileSystem/ZipFsFile/ZipFsStat.html#method-i-dev","()",""],["dir","Zip::ZipFileSystem","Zip/ZipFileSystem.html#method-i-dir","()","<p>Returns a ZipFsDir which is much like ruby's builtin Dir (class) object,\nexcept it works on the ZipFile ...\n"],["directory?","Zip::ZipEntry","Zip/ZipEntry.html#method-i-directory-3F","()","<p>Returns <code>true</code> if the entry is a directory.\n"],["directory?","Zip::ZipFileSystem::ZipFsFile","Zip/ZipFileSystem/ZipFsFile.html#method-i-directory-3F","(fileName)",""],["dirname","Zip::ZipFileSystem::ZipFsFile","Zip/ZipFileSystem/ZipFsFile.html#method-i-dirname","(fileName)",""],["each","IOExtras::AbstractInputStream","IOExtras/AbstractInputStream.html#method-i-each","(aSepString = $/)",""],["each","Zip::ZipCentralDirectory","Zip/ZipCentralDirectory.html#method-i-each","(&proc)","<p>For iterating over the entries.\n"],["each_line","IOExtras::AbstractInputStream","IOExtras/AbstractInputStream.html#method-i-each_line","(aSepString = $/)",""],["entries","Zip::ZipCentralDirectory","Zip/ZipCentralDirectory.html#method-i-entries","()","<p>Returns an Enumerable containing the entries.\n"],["entries","Zip::ZipFileSystem::ZipFsDir","Zip/ZipFileSystem/ZipFsDir.html#method-i-entries","(aDirectoryName)",""],["eof","Zip::ZipInputStream","Zip/ZipInputStream.html#method-i-eof","()",""],["eof?","Zip::ZipInputStream","Zip/ZipInputStream.html#method-i-eof-3F","()",""],["executable?","Zip::ZipFileSystem::ZipFsFile","Zip/ZipFileSystem/ZipFsFile.html#method-i-executable-3F","(fileName)",""],["executable_real?","Zip::ZipFileSystem::ZipFsFile","Zip/ZipFileSystem/ZipFsFile.html#method-i-executable_real-3F","(fileName)",""],["exist?","Zip::ZipFileSystem::ZipFsFile","Zip/ZipFileSystem/ZipFsFile.html#method-i-exist-3F","(fileName)",""],["exists?","Zip::ZipFileSystem::ZipFsFile","Zip/ZipFileSystem/ZipFsFile.html#method-i-exists-3F","(fileName)",""],["expand_path","Zip::ZipFileSystem::ZipFsFile","Zip/ZipFileSystem/ZipFsFile.html#method-i-expand_path","(aPath)",""],["extract","Zip::ZipEntry","Zip/ZipEntry.html#method-i-extract","(destPath = @name, &onExistsProc)","<p>Extracts entry to file destPath (defaults to @name).\n"],["extract","Zip::ZipFile","Zip/ZipFile.html#method-i-extract","(entry, destPath, &onExistsProc)","<p>Extracts entry to file destPath.\n"],["file","Zip::ZipFileSystem","Zip/ZipFileSystem.html#method-i-file","()","<p>Returns a ZipFsFile which is much like ruby's builtin File (class) object,\nexcept it works on the ZipFile ...\n"],["file?","Zip::ZipEntry","Zip/ZipEntry.html#method-i-file-3F","()","<p>Returns <code>true</code> if the entry is a file.\n"],["file?","Zip::ZipFileSystem::ZipFsFile","Zip/ZipFileSystem/ZipFsFile.html#method-i-file-3F","(fileName)",""],["find_entry","Zip::ZipFile","Zip/ZipFile.html#method-i-find_entry","(entry)","<p>Searches for entry with the specified name. Returns nil if no entry is\nfound. See also get_entry\n"],["finish","Zip::ZipOutputStream","Zip/ZipOutputStream.html#method-i-finish","()",""],["flush","IOExtras::AbstractInputStream","IOExtras/AbstractInputStream.html#method-i-flush","()",""],["foreach","Zip::ZipFile","Zip/ZipFile.html#method-c-foreach","(aZipFileName, &block)","<p>Iterates over the contents of the ZipFile. This is more efficient than\nusing a ZipInputStream since this ...\n"],["foreach","Zip::ZipFileSystem::ZipFsDir","Zip/ZipFileSystem/ZipFsDir.html#method-i-foreach","(aDirectoryName)",""],["foreach","Zip::ZipFileSystem::ZipFsFile","Zip/ZipFileSystem/ZipFsFile.html#method-i-foreach","(fileName, aSep = $/, &aProc)",""],["ftype","Zip::ZipFileSystem::ZipFsFile","Zip/ZipFileSystem/ZipFsFile.html#method-i-ftype","(fileName)",""],["ftype","Zip::ZipFileSystem::ZipFsFile::ZipFsStat","Zip/ZipFileSystem/ZipFsFile/ZipFsStat.html#method-i-ftype","()",""],["get_entry","Zip::ZipFile","Zip/ZipFile.html#method-i-get_entry","(entry)","<p>Searches for an entry just as find_entry, but throws Errno::ENOENT if no\nentry is found.\n"],["get_input_stream","Zip::ZipEntry","Zip/ZipEntry.html#method-i-get_input_stream","(&aProc)","<p>Returns an IO like object for the given ZipEntry. Warning: may behave weird\nwith symlinks.\n"],["get_input_stream","Zip::ZipFile","Zip/ZipFile.html#method-i-get_input_stream","(entry, &aProc)","<p>Returns an input stream to the specified entry. If a block is passed the\nstream object is passed to the ...\n"],["get_input_stream","Zip::ZipStreamableStream","Zip/ZipStreamableStream.html#method-i-get_input_stream","()",""],["get_next_entry","Zip::ZipInputStream","Zip/ZipInputStream.html#method-i-get_next_entry","()","<p>Returns a ZipEntry object. It is necessary to call this method on a newly\ncreated ZipInputStream before ...\n"],["get_output_stream","Zip::ZipFile","Zip/ZipFile.html#method-i-get_output_stream","(entry, permissionInt = nil, &aProc)","<p>Returns an output stream to the specified entry. If a block is passed the\nstream object is passed to ...\n"],["get_output_stream","Zip::ZipStreamableStream","Zip/ZipStreamableStream.html#method-i-get_output_stream","()",""],["get_raw_input_stream","Zip::ZipEntry","Zip/ZipEntry.html#method-i-get_raw_input_stream","(&aProc)",""],["gets","IOExtras::AbstractInputStream","IOExtras/AbstractInputStream.html#method-i-gets","(aSepString = $/)",""],["getwd","Zip::ZipFileSystem::ZipFsDir","Zip/ZipFileSystem/ZipFsDir.html#method-i-getwd","()",""],["gid","Zip::ZipFileSystem::ZipFsFile::ZipFsStat","Zip/ZipFileSystem/ZipFsFile/ZipFsStat.html#method-i-gid","()",""],["grpowned?","Zip::ZipFileSystem::ZipFsFile","Zip/ZipFileSystem/ZipFsFile.html#method-i-grpowned-3F","(fileName)",""],["initial_parse","Zip::ZipExtraField::Generic","Zip/ZipExtraField/Generic.html#method-i-initial_parse","(binstr)","<p>return field [size, content] or false\n"],["ino","Zip::ZipFileSystem::ZipFsFile::ZipFsStat","Zip/ZipFileSystem/ZipFsFile/ZipFsStat.html#method-i-ino","()",""],["input_finished?","Zip::ZipInputStream","Zip/ZipInputStream.html#method-i-input_finished-3F","()",""],["is_directory","Zip::ZipEntry","Zip/ZipEntry.html#method-i-is_directory","()",""],["join","Zip::ZipFileSystem::ZipFsFile","Zip/ZipFileSystem/ZipFsFile.html#method-i-join","(*fragments)",""],["kind_of?","IOExtras::FakeIO","IOExtras/FakeIO.html#method-i-kind_of-3F","(object)",""],["kind_of?","Zip::ZipFileSystem::ZipFsFile::ZipFsStat","Zip/ZipFileSystem/ZipFsFile/ZipFsStat.html#method-i-kind_of-3F","(t)",""],["length","Zip::ZipExtraField","Zip/ZipExtraField.html#method-i-length","()",""],["link","Zip::ZipFileSystem::ZipFsFile","Zip/ZipFileSystem/ZipFsFile.html#method-i-link","(fileName, symlinkName)",""],["local_length","Zip::ZipExtraField","Zip/ZipExtraField.html#method-i-local_length","()",""],["local_size","Zip::ZipExtraField","Zip/ZipExtraField.html#method-i-local_size","()",""],["lstat","Zip::ZipFileSystem::ZipFsFile","Zip/ZipFileSystem/ZipFsFile.html#method-i-lstat","(fileName)",""],["merge","Zip::ZipExtraField","Zip/ZipExtraField.html#method-i-merge","(binstr)",""],["merge","Zip::ZipExtraField::IUnix","Zip/ZipExtraField/IUnix.html#method-i-merge","(binstr)",""],["merge","Zip::ZipExtraField::UniversalTime","Zip/ZipExtraField/UniversalTime.html#method-i-merge","(binstr)",""],["mkdir","Zip::ZipFile","Zip/ZipFile.html#method-i-mkdir","(entryName, permissionInt = 0755)","<p>Creates a directory\n"],["mkdir","Zip::ZipFileSystem::ZipFsDir","Zip/ZipFileSystem/ZipFsDir.html#method-i-mkdir","(entryName, permissionInt = 0755)",""],["mode","Zip::ZipFileSystem::ZipFsFile::ZipFsStat","Zip/ZipFileSystem/ZipFsFile/ZipFsStat.html#method-i-mode","()",""],["mtime","Zip::ZipEntry","Zip/ZipEntry.html#method-i-mtime","()",""],["mtime","Zip::ZipFileSystem::ZipFsFile","Zip/ZipFileSystem/ZipFsFile.html#method-i-mtime","(fileName)",""],["name","Zip::ZipExtraField::Generic","Zip/ZipExtraField/Generic.html#method-c-name","()",""],["name_encoding","Zip::ZipEntry","Zip/ZipEntry.html#method-i-name_encoding","()","<p>Returns the character encoding used for name and comment\n"],["name_in","Zip::ZipEntry","Zip/ZipEntry.html#method-i-name_in","(enc)","<p>Returns the name in the encoding specified by enc\n"],["new","IOExtras::AbstractInputStream","IOExtras/AbstractInputStream.html#method-c-new","()",""],["new","Zip::ZipEntry","Zip/ZipEntry.html#method-c-new","(zipfile = \"\", name = \"\", comment = \"\", extra = \"\", compressed_size = 0, crc = 0, compression_method = ZipEntry::DEFLATED, size = 0, time = DOSTime.now)",""],["new","Zip::ZipExtraField","Zip/ZipExtraField.html#method-c-new","(binstr = nil)","<p>start main of ZipExtraField &lt; Hash\n"],["new","Zip::ZipExtraField::IUnix","Zip/ZipExtraField/IUnix.html#method-c-new","(binstr = nil)",""],["new","Zip::ZipExtraField::UniversalTime","Zip/ZipExtraField/UniversalTime.html#method-c-new","(binstr = nil)",""],["new","Zip::ZipFile","Zip/ZipFile.html#method-c-new","(fileName, create = nil, buffer = false)","<p>Opens a zip archive. Pass true as the second parameter to create a new\narchive if it doesn't exist already. ...\n"],["new","Zip::ZipFileSystem::ZipFsDir","Zip/ZipFileSystem/ZipFsDir.html#method-i-new","(aDirectoryName)",""],["new","Zip::ZipFileSystem::ZipFsDir","Zip/ZipFileSystem/ZipFsDir.html#method-c-new","(mappedZip)",""],["new","Zip::ZipFileSystem::ZipFsFile","Zip/ZipFileSystem/ZipFsFile.html#method-i-new","(fileName, openMode = \"r\")",""],["new","Zip::ZipFileSystem::ZipFsFile","Zip/ZipFileSystem/ZipFsFile.html#method-c-new","(mappedZip)",""],["new","Zip::ZipFileSystem::ZipFsFile::ZipFsStat","Zip/ZipFileSystem/ZipFsFile/ZipFsStat.html#method-c-new","(zipFsFile, entryName)",""],["new","Zip::ZipInputStream","Zip/ZipInputStream.html#method-c-new","(filename, offset = 0, io = nil)","<p>Opens the indicated zip file. An exception is thrown if the specified\noffset in the specified filename ...\n"],["new","Zip::ZipOutputStream","Zip/ZipOutputStream.html#method-c-new","(fileName, stream=false)","<p>Opens the indicated zip file. If a file with that name already exists it\nwill be overwritten.\n"],["new","Zip::ZipStreamableDirectory","Zip/ZipStreamableDirectory.html#method-c-new","(zipfile, entry, srcPath = nil, permissionInt = nil)",""],["new","Zip::ZipStreamableStream","Zip/ZipStreamableStream.html#method-c-new","(entry)",""],["nlink","Zip::ZipFileSystem::ZipFsFile::ZipFsStat","Zip/ZipFileSystem/ZipFsFile/ZipFsStat.html#method-i-nlink","()",""],["open","Zip::ZipFile","Zip/ZipFile.html#method-c-open","(fileName, create = nil)","<p>Same as #new. If a block is passed the ZipFile object is passed to the\nblock and is automatically closed ...\n"],["open","Zip::ZipFileSystem::ZipFsDir","Zip/ZipFileSystem/ZipFsDir.html#method-i-open","(aDirectoryName)",""],["open","Zip::ZipFileSystem::ZipFsFile","Zip/ZipFileSystem/ZipFsFile.html#method-i-open","(fileName, openMode = \"r\", permissionInt = 0644, &block)",""],["open","Zip::ZipInputStream","Zip/ZipInputStream.html#method-c-open","(filename)","<p>Same as #initialize but if a block is passed the opened stream is passed to\nthe block and closed when ...\n"],["open","Zip::ZipOutputStream","Zip/ZipOutputStream.html#method-c-open","(fileName)","<p>Same as #initialize but if a block is passed the opened stream is passed to\nthe block and closed when ...\n"],["open_buffer","Zip::ZipInputStream","Zip/ZipInputStream.html#method-c-open_buffer","(io)",""],["open_entry","Zip::ZipInputStream","Zip/ZipInputStream.html#method-i-open_entry","()",""],["owned?","Zip::ZipFileSystem::ZipFsFile","Zip/ZipFileSystem/ZipFsFile.html#method-i-owned-3F","(fileName)","<p>Permissions not implemented, so if the file exists it is accessible\n"],["pack_for_c_dir","Zip::ZipExtraField::IUnix","Zip/ZipExtraField/IUnix.html#method-i-pack_for_c_dir","()",""],["pack_for_c_dir","Zip::ZipExtraField::UniversalTime","Zip/ZipExtraField/UniversalTime.html#method-i-pack_for_c_dir","()",""],["pack_for_local","Zip::ZipExtraField::IUnix","Zip/ZipExtraField/IUnix.html#method-i-pack_for_local","()",""],["pack_for_local","Zip::ZipExtraField::UniversalTime","Zip/ZipExtraField/UniversalTime.html#method-i-pack_for_local","()",""],["parent_as_string","Zip::ZipEntry","Zip/ZipEntry.html#method-i-parent_as_string","()",""],["pipe","Zip::ZipFileSystem::ZipFsFile","Zip/ZipFileSystem/ZipFsFile.html#method-i-pipe","()",""],["pipe?","Zip::ZipFileSystem::ZipFsFile","Zip/ZipFileSystem/ZipFsFile.html#method-i-pipe-3F","(filename)",""],["popen","Zip::ZipFileSystem::ZipFsFile","Zip/ZipFileSystem/ZipFsFile.html#method-i-popen","(*args, &aProc)",""],["print","IOExtras::AbstractOutputStream","IOExtras/AbstractOutputStream.html#method-i-print","(*params)",""],["printf","IOExtras::AbstractOutputStream","IOExtras/AbstractOutputStream.html#method-i-printf","(aFormatString, *params)",""],["produce_input","Zip::ZipInputStream","Zip/ZipInputStream.html#method-i-produce_input","()",""],["put_next_entry","Zip::ZipOutputStream","Zip/ZipOutputStream.html#method-i-put_next_entry","(entryname, comment = nil, extra = nil, compression_method = ZipEntry::DEFLATED, level = Zlib::DEFAULT_COMPRESSION)","<p>Closes the current entry and opens a new for writing. <code>entry</code>\ncan be a ZipEntry object or a string.\n"],["putc","IOExtras::AbstractOutputStream","IOExtras/AbstractOutputStream.html#method-i-putc","(anObject)",""],["puts","IOExtras::AbstractOutputStream","IOExtras/AbstractOutputStream.html#method-i-puts","(*params)",""],["pwd","Zip::ZipFileSystem::ZipFsDir","Zip/ZipFileSystem/ZipFsDir.html#method-i-pwd","()",""],["rdev","Zip::ZipFileSystem::ZipFsFile::ZipFsStat","Zip/ZipFileSystem/ZipFsFile/ZipFsStat.html#method-i-rdev","()",""],["rdev_major","Zip::ZipFileSystem::ZipFsFile::ZipFsStat","Zip/ZipFileSystem/ZipFsFile/ZipFsStat.html#method-i-rdev_major","()",""],["rdev_minor","Zip::ZipFileSystem::ZipFsFile::ZipFsStat","Zip/ZipFileSystem/ZipFsFile/ZipFsStat.html#method-i-rdev_minor","()",""],["read","IOExtras::AbstractInputStream","IOExtras/AbstractInputStream.html#method-i-read","(numberOfBytes = nil, buf = nil)",""],["read","Zip::ZipFile","Zip/ZipFile.html#method-i-read","(entry)","<p>Returns a string containing the contents of the specified entry\n"],["read","Zip::ZipFileSystem::ZipFsFile","Zip/ZipFileSystem/ZipFsFile.html#method-i-read","(fileName)",""],["read_local_entry","Zip::ZipEntry","Zip/ZipEntry.html#method-c-read_local_entry","(io)",""],["readable?","Zip::ZipFileSystem::ZipFsFile","Zip/ZipFileSystem/ZipFsFile.html#method-i-readable-3F","(fileName)",""],["readable_real?","Zip::ZipFileSystem::ZipFsFile","Zip/ZipFileSystem/ZipFsFile.html#method-i-readable_real-3F","(fileName)",""],["readline","IOExtras::AbstractInputStream","IOExtras/AbstractInputStream.html#method-i-readline","(aSepString = $/)",""],["readlines","IOExtras::AbstractInputStream","IOExtras/AbstractInputStream.html#method-i-readlines","(aSepString = $/)",""],["readlines","Zip::ZipFileSystem::ZipFsFile","Zip/ZipFileSystem/ZipFsFile.html#method-i-readlines","(fileName)",""],["readlink","Zip::ZipFileSystem::ZipFsFile","Zip/ZipFileSystem/ZipFsFile.html#method-i-readlink","(fileName)",""],["register_map","Zip::ZipExtraField::Generic","Zip/ZipExtraField/Generic.html#method-c-register_map","()",""],["remove","Zip::ZipFile","Zip/ZipFile.html#method-i-remove","(entry)","<p>Removes the specified entry.\n"],["rename","Zip::ZipFile","Zip/ZipFile.html#method-i-rename","(entry, newName, &continueOnExistsProc)","<p>Renames the specified entry.\n"],["rename","Zip::ZipFileSystem::ZipFsFile","Zip/ZipFileSystem/ZipFsFile.html#method-i-rename","(fileToRename, newName)",""],["replace","Zip::ZipFile","Zip/ZipFile.html#method-i-replace","(entry, srcPath)","<p>Replaces the specified entry with the contents of srcPath (from the file\nsystem).\n"],["rewind","Zip::ZipInputStream","Zip/ZipInputStream.html#method-i-rewind","()","<p>Rewinds the stream to the beginning of the current entry\n"],["rmdir","Zip::ZipFileSystem::ZipFsDir","Zip/ZipFileSystem/ZipFsDir.html#method-i-rmdir","(entryName)",""],["setgid?","Zip::ZipFileSystem::ZipFsFile","Zip/ZipFileSystem/ZipFsFile.html#method-i-setgid-3F","(fileName)",""],["setuid?","Zip::ZipFileSystem::ZipFsFile","Zip/ZipFileSystem/ZipFsFile.html#method-i-setuid-3F","(fileName)",""],["size","Zip::ZipCentralDirectory","Zip/ZipCentralDirectory.html#method-i-size","()","<p>Returns the number of entries in the central directory (and  consequently\nin the zip archive).\n"],["size","Zip::ZipExtraField","Zip/ZipExtraField.html#method-i-size","()",""],["size","Zip::ZipFileSystem::ZipFsFile","Zip/ZipFileSystem/ZipFsFile.html#method-i-size","(fileName)",""],["size?","Zip::ZipFileSystem::ZipFsFile","Zip/ZipFileSystem/ZipFsFile.html#method-i-size-3F","(fileName)","<p>Returns nil for not found and nil for directories\n"],["socket?","Zip::ZipFileSystem::ZipFsFile","Zip/ZipFileSystem/ZipFsFile.html#method-i-socket-3F","(fileName)",""],["split","Zip::ZipFileSystem::ZipFsFile","Zip/ZipFileSystem/ZipFsFile.html#method-i-split","(fileName)",""],["stat","Zip::ZipFileSystem::ZipFsFile","Zip/ZipFileSystem/ZipFsFile.html#method-i-stat","(fileName)",""],["sticky?","Zip::ZipFileSystem::ZipFsFile","Zip/ZipFileSystem/ZipFsFile.html#method-i-sticky-3F","(fileName)",""],["symlink","Zip::ZipFileSystem::ZipFsFile","Zip/ZipFileSystem/ZipFsFile.html#method-i-symlink","(fileName, symlinkName)",""],["symlink?","Zip::ZipEntry","Zip/ZipEntry.html#method-i-symlink-3F","()","<p>Returns <code>true</code> if the entry is a symlink.\n"],["symlink?","Zip::ZipFileSystem::ZipFsFile","Zip/ZipFileSystem/ZipFsFile.html#method-i-symlink-3F","(fileName)",""],["sysread","Zip::ZipInputStream","Zip/ZipInputStream.html#method-i-sysread","(numberOfBytes = nil, buf = nil)","<p>Modeled after IO.sysread\n"],["time","Zip::ZipEntry","Zip/ZipEntry.html#method-i-time","()",""],["time=","Zip::ZipEntry","Zip/ZipEntry.html#method-i-time-3D","(aTime)",""],["to_c_dir_bin","Zip::ZipExtraField","Zip/ZipExtraField.html#method-i-to_c_dir_bin","()",""],["to_c_dir_bin","Zip::ZipExtraField::Generic","Zip/ZipExtraField/Generic.html#method-i-to_c_dir_bin","()",""],["to_local_bin","Zip::ZipExtraField","Zip/ZipExtraField.html#method-i-to_local_bin","()",""],["to_local_bin","Zip::ZipExtraField::Generic","Zip/ZipExtraField/Generic.html#method-i-to_local_bin","()",""],["to_s","Zip::ZipEntry","Zip/ZipEntry.html#method-i-to_s","()",""],["to_s","Zip::ZipExtraField","Zip/ZipExtraField.html#method-i-to_s","()",""],["to_s","Zip::ZipFile","Zip/ZipFile.html#method-i-to_s","()","<p>Returns the name of the zip archive\n"],["truncate","Zip::ZipFileSystem::ZipFsFile","Zip/ZipFileSystem/ZipFsFile.html#method-i-truncate","(fileName, len)",""],["uid","Zip::ZipFileSystem::ZipFsFile::ZipFsStat","Zip/ZipFileSystem/ZipFsFile/ZipFsStat.html#method-i-uid","()",""],["umask","Zip::ZipFileSystem::ZipFsFile","Zip/ZipFileSystem/ZipFsFile.html#method-i-umask","(*args)",""],["unlink","Zip::ZipFileSystem::ZipFsDir","Zip/ZipFileSystem/ZipFsDir.html#method-i-unlink","(entryName)",""],["unlink","Zip::ZipFileSystem::ZipFsFile","Zip/ZipFileSystem/ZipFsFile.html#method-i-unlink","(*args)",""],["utime","Zip::ZipFileSystem::ZipFsFile","Zip/ZipFileSystem/ZipFsFile.html#method-i-utime","(modifiedTime, *fileNames)",""],["writable?","Zip::ZipFileSystem::ZipFsFile","Zip/ZipFileSystem/ZipFsFile.html#method-i-writable-3F","(fileName)",""],["writable_real?","Zip::ZipFileSystem::ZipFsFile","Zip/ZipFileSystem/ZipFsFile.html#method-i-writable_real-3F","(fileName)",""],["write","IOExtras::AbstractOutputStream","IOExtras/AbstractOutputStream.html#method-i-write","(data)",""],["write_buffer","Zip::ZipFile","Zip/ZipFile.html#method-i-write_buffer","()","<p>Write buffer write changes to buffer and return\n"],["write_buffer","Zip::ZipOutputStream","Zip/ZipOutputStream.html#method-c-write_buffer","()","<p>Same as #open but writes to a filestream instead\n"],["write_to_zip_output_stream","Zip::ZipStreamableStream","Zip/ZipStreamableStream.html#method-i-write_to_zip_output_stream","(aZipOutputStream)",""],["zero?","Zip::ZipFileSystem::ZipFsFile","Zip/ZipFileSystem/ZipFsFile.html#method-i-zero-3F","(fileName)",""]]}}
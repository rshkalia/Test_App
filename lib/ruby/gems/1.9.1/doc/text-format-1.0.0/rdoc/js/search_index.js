var search_data = {"index":{"searchIndex":["text","format","alpha","number","roman","splitword","==()","[]()","[]()","[]()","center()","expand()","format()","format_one_paragraph()","hyphenate_to()","justify?()","left_align?()","new()","new()","new()","new()","new()","paragraphs()","right_align?()","right_fill?()","split_word_to()","unexpand()","changelog","install","readme"],"longSearchIndex":["text","text::format","text::format::alpha","text::format::number","text::format::roman","text::format::splitword","text::format#==()","text::format::alpha#[]()","text::format::number#[]()","text::format::roman#[]()","text::format#center()","text::format#expand()","text::format#format()","text::format#format_one_paragraph()","text::format#hyphenate_to()","text::format#justify?()","text::format#left_align?()","text::format::new()","text::format::alpha::new()","text::format::number::new()","text::format::roman::new()","text::format::splitword::new()","text::format#paragraphs()","text::format#right_align?()","text::format#right_fill?()","text::format#split_word_to()","text::format#unexpand()","","",""],"info":[["Text","","Text.html","",""],["Text::Format","","Text/Format.html","","<p>Introduction\n<p>Text::Format provides the ability to nicely format fixed-width text with\nknowledge of the ...\n"],["Text::Format::Alpha","","Text/Format/Alpha.html","","<p>Provides a numbering object that will produce letters. Accepts four options\nfor numbering that will control ...\n"],["Text::Format::Number","","Text/Format/Number.html","","<p>Provides a numbering object that will produce numbers. Accepts three\nparameters for numbering that will ...\n"],["Text::Format::Roman","","Text/Format/Roman.html","","<p>Provides a numbering object that will produce numbers. Accepts three\nparameters for numbering that will ...\n"],["Text::Format::SplitWord","","Text/Format/SplitWord.html","","<p>Words forcibly split by Text::Format will be stored as split words. This\nclass represents a word forcibly ...\n"],["==","Text::Format","Text/Format.html#method-i-3D-3D","(o)","<p>Compares the formatting rules, excepting #hyphenator, of two Text::Format\nobjects. Generated results ...\n"],["[]","Text::Format::Alpha","Text/Format/Alpha.html#method-i-5B-5D","(index)",""],["[]","Text::Format::Number","Text/Format/Number.html#method-i-5B-5D","(index)",""],["[]","Text::Format::Roman","Text/Format/Roman.html#method-i-5B-5D","(index)",""],["center","Text::Format","Text/Format.html#method-i-center","(to_center = nil)","<p>Centers the text, preserving empty lines and tabs.\n"],["expand","Text::Format","Text/Format.html#method-i-expand","(to_expand = nil)","<p>Replaces all tab characters in the text with #tabstop spaces.\n"],["format","Text::Format","Text/Format.html#method-i-format","(text = nil)",""],["format_one_paragraph","Text::Format","Text/Format.html#method-i-format_one_paragraph","(text = nil)","<p>Formats text into a nice paragraph format. The text is separated into words\nand then reassembled a word ...\n"],["hyphenate_to","Text::Format","Text/Format.html#method-i-hyphenate_to","(word, size)","<p>The formatting object itself can be used as a #hyphenator, where the\ndefault implementation of #hyphenate_to ...\n"],["justify?","Text::Format","Text/Format.html#method-i-justify-3F","()","<p>Indicates that the format style is full justification.\n<p>Default &mdash; <code>false</code>\n<p>Used in &mdash; #format, #paragraphs\n"],["left_align?","Text::Format","Text/Format.html#method-i-left_align-3F","()","<p>Indicates that the format style is left alignment.\n<p>Default &mdash; <code>true</code>\n<p>Used in &mdash; #format, #paragraphs\n"],["new","Text::Format","Text/Format.html#method-c-new","(options = {})","<p>Create a Text::Format object. Accepts an optional hash of construction\noptions (this will be changed ...\n"],["new","Text::Format::Alpha","Text/Format/Alpha.html#method-c-new","(options = {})",""],["new","Text::Format::Number","Text/Format/Number.html#method-c-new","(options = {})",""],["new","Text::Format::Roman","Text/Format/Roman.html#method-c-new","(options = {})",""],["new","Text::Format::SplitWord","Text/Format/SplitWord.html#method-c-new","(word, first, rest)",""],["paragraphs","Text::Format","Text/Format.html#method-i-paragraphs","(to_wrap = nil, split_on = /(#{$/}){2}/o)","<p>Considers each element of text (provided or internal) as a paragraph. If\n#first_indent is the same as ...\n"],["right_align?","Text::Format","Text/Format.html#method-i-right_align-3F","()","<p>Indicates that the format style is right alignment.\n<p>Default &mdash; <code>false</code>\n<p>Used in &mdash; #format, #paragraphs\n"],["right_fill?","Text::Format","Text/Format.html#method-i-right_fill-3F","()","<p>Indicates that the format style is right fill.\n<p>Default &mdash; <code>false</code>\n<p>Used in &mdash; #format, #paragraphs\n"],["split_word_to","Text::Format","Text/Format.html#method-i-split_word_to","(word, size)","<p>Splits the provided word so that it is in two parts, <code>word[0 .. (size\n- 1)]</code> and <code>word[size .. -1]</code>.\n"],["unexpand","Text::Format","Text/Format.html#method-i-unexpand","(to_unexpand = nil)","<p>Replaces all occurrences of #tabstop consecutive spaces with a tab\ncharacter.\n"],["Changelog","","Changelog.html","","<p>Text::Format 1.0.0\n<p>Changed installer: added a .gem package.\n<p>Changed installer: moving to a variant of  ...\n"],["Install","","Install.html","","<p>Installing this package is as simple as:\n<p>% ruby setup.rb\n<p>Alternatively, you can use the RubyGem version ...\n"],["README","","README.html","","<p>Text::Format 1.0.0\n<p>\n<p>Text::Format is provides the ability to nicely format fixed-width text with\nknowledge ...\n"]]}}